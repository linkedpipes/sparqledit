import { AtomicClass, IntersectionClass, UnionClass, UnknownClass, RestrictionClass, ListClass } from "./OntologyClass";

export interface IOntologyClassTextFormatter {
    formatUnknownClass(unknownClass: UnknownClass): string;
    formatAtomicClass(atomicClass: AtomicClass): string;
    formatRestrictionClass(restrictionClass: RestrictionClass): string;
    formatIntersectionClass(intersectionClass: IntersectionClass): string;
    formatUnionClass(unionClass: UnionClass): string;
}

export class SimpleOntologyClassTextFormatter implements IOntologyClassTextFormatter {

    private formatListClasses(listClass: ListClass) {
        return listClass.classes.map(x => x.getText()).join(', ');
    }

    formatUnknownClass(unknownClass: UnknownClass): string {
        return 'Unknown(' + unknownClass.nodeValue + ')';
    }

    formatAtomicClass(atomicClass: AtomicClass): string {
        return 'Atomic(' + atomicClass.iri + ')';
    }

    formatRestrictionClass(restrictionClass: RestrictionClass): string {
        return 'RestrictionOn(' + restrictionClass.onProperty + ')';
    }

    formatIntersectionClass(intersectionClass: IntersectionClass): string {
        return 'IntersectionOf(' + this.formatListClasses(intersectionClass) + ')';

    }

    formatUnionClass(unionClass: UnionClass): string {
        return 'UnionOf(' + this.formatListClasses(unionClass) + ')';
    }
}