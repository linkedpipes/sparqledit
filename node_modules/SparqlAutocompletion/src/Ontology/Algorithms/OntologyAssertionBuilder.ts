import { UnknownClass } from '../OntologyClass';
import { AlgorithmErrorLogger } from './Errors/AlgorithmErrors';
import { RdfIri } from '../../Utils/RdfIri';
import { IGraph } from '../../GraphTools/GraphInterfaces';
import { OntologyClassParser } from '../OntologyClassParser';
import { OntologyAssertions } from '../OntologyAssertions';

interface OntologyAssertionsBuilderContext {
    graph: IGraph;
    ontologyAssertions: OntologyAssertions;
    algorithmErrorLogger: AlgorithmErrorLogger;
}

function buildOntologyAssertionsOnGraph(context: OntologyAssertionsBuilderContext): void {
    var ontologyClassParser = new OntologyClassParser(context.graph);

    var subClassOfGraph = context.graph.match(null, RdfIri.rdfsSubclassOf, null);
    for (var subClassOfTriple of subClassOfGraph.getTriples()) {
        let subjectOntologyClass = ontologyClassParser.getClassType(subClassOfTriple.subject);
        let objectOntologyClass = ontologyClassParser.getClassType(subClassOfTriple.object);
        context.ontologyAssertions.addSubclassEdge(subjectOntologyClass, objectOntologyClass);
    }

    var equalClassGraph = context.graph.match(null, RdfIri.owlEquivalentClass, null);
    for (var equalClassTriple of equalClassGraph.getTriples()) {
        let subjectOntologyClass = ontologyClassParser.getClassType(equalClassTriple.subject);
        let objectOntologyClass = ontologyClassParser.getClassType(equalClassTriple.object);
        context.ontologyAssertions.addEquivalenceEdge(subjectOntologyClass, objectOntologyClass);
    }

    var domainGraph = context.graph.match(null, RdfIri.rdfsDomain, null);
    for (var domainTriple of domainGraph.getTriples()) {
        var propertyName = domainTriple.subject.nominalValue;
        var domainOntologyClass = ontologyClassParser.getClassType(domainTriple.object);
        context.ontologyAssertions.addDomain(propertyName, domainOntologyClass);
    }

    var rangeGraph = context.graph.match(null, RdfIri.rdfsRange, null);
    for (var rangeTriple of rangeGraph.getTriples()) {
        var propertyName = rangeTriple.subject.nominalValue;
        var rangeOntologyClass = ontologyClassParser.getClassType(rangeTriple.object);
        context.ontologyAssertions.addRange(propertyName, rangeOntologyClass);
    }

    buildLabels(context.graph, context.ontologyAssertions);
    // Log errors
    context.ontologyAssertions.classes
        .filter(x => x instanceof UnknownClass)
        .forEach(x => context.algorithmErrorLogger.logError({ getMessage: () => (<UnknownClass>x).nodeValue }));
}

function buildLabels(graph: IGraph, ontologyAssertions: OntologyAssertions) {
    var labelTriples = graph.match(null, RdfIri.rdfsLabel, null);

    for (var labelTriple of labelTriples.getTriples()) {
        var objectType = labelTriple.object.nodeType();
        if (labelTriple.subject.nodeType() == "IRI" &&
            (objectType == "PlainLiteral" || objectType == "TypedLiteral")) {
            var ontologyClass = ontologyAssertions.findClassByIri(labelTriple.subject.nominalValue);
            if (ontologyClass != null) {
                ontologyClass.label.addLabel(labelTriple.object.nominalValue);
            }

            var possibleProperty = ontologyAssertions.findPropertyByName(labelTriple.subject.nominalValue);
            if (possibleProperty != null) {
                possibleProperty.label.addLabel(labelTriple.object.nominalValue);
            }
        }
    }
}

export function buildOntologyAssertions(graph: IGraph) {
    return buildOntologyAssertionsMultipleGraphs([graph]);
}

export function buildOntologyAssertionsMultipleGraphs(graphs: IGraph[]) {
    var ontologyAssertions = new OntologyAssertions();
    var algorithmErrorLogger = new AlgorithmErrorLogger()
    for (var graph of graphs) {
        buildOntologyAssertionsOnGraph({
            graph: graph,
            ontologyAssertions: ontologyAssertions,
            algorithmErrorLogger: algorithmErrorLogger
        });
    }

    return {
        ontologyAssertions: ontologyAssertions,
        algorithmErrorLogger: algorithmErrorLogger
    };
}
