import { PrefixProcessor } from "../../Autocompletition/Query/PrefixProcessor";
import { IOntologyClass } from "../../Ontology/OntologyClass";
import { OntologyConcept } from "../../Ontology/OntologyConcept";
import { OntologyAssertions, OntologyProperty } from "../../Ontology/OntologyAssertions";
import { StringDictionary } from "../../Collections/Dictionary";

import * as _ from "lodash";

export interface IQueryAdvice {
    getStringQueryAdvices(): string[];
}

export class RdfTypeQueryAdvice implements IQueryAdvice {
    private prefixProcessor: PrefixProcessor;

    constructor(private possibleRdfTypes: string[], prefixes: StringDictionary<string>) {
        this.prefixProcessor = new PrefixProcessor(prefixes);
    }

    getStringQueryAdvices(): string[] {
        return this.possibleRdfTypes.map(x => this.prefixProcessor.processPrefixesInIri(x));
    }

    getData() {
        return this.possibleRdfTypes;
    }
}

export class PropertyQueryAdvice implements IQueryAdvice {

    private prefixProcessor: PrefixProcessor;

    private ontologyAssertions: OntologyAssertions;

    constructor(
        public orderConcepts: OntologyConcept[],
        ontologyAssertions: OntologyAssertions,
        prefixes: StringDictionary<string>) {

        this.ontologyAssertions = ontologyAssertions;
        this.prefixProcessor = new PrefixProcessor(prefixes);
    }

    getPropertiesOfClass(ontologyClass: IOntologyClass) {
        return this.ontologyAssertions.findPropertiesByDomain(ontologyClass);
    }

    getPropertiesOfConcept(ontologyConcept: OntologyConcept) {
        var result = _(ontologyConcept.ontologyClasses)
            .map(x => this.getPropertiesOfClass(x))
            .flatten<OntologyProperty>()
            .value();

        return result;
    }

    getPropertiesByChunk() {
        return this.orderConcepts.map(x => ({ concept: x, properties: this.getPropertiesOfConcept(x) }));
    }

    getStringQueryAdvices(): string[] {
        var result = _(this.getPropertiesByChunk())
            .map(x => x.properties.map(y => this.prefixProcessor.processPrefixesInIri(y.name)))
            .flatten<string>()
            .value();

        return result;
    }
}