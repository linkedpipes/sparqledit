import { IOntologyClass, AtomicClass, IntersectionClass, UnionClass } from "../../Ontology/OntologyClass";
import * as _ from "lodash";

function distinctOntologyClasses(ontologyClasses: IOntologyClass[]): IOntologyClass[] {
    var resultOntologyClasses: IOntologyClass[] = [];
    for (var ontologyClass of ontologyClasses) {
        var ontologyClassSignature = ontologyClass.getText();
        if (resultOntologyClasses.filter(x => x.getText() == ontologyClassSignature).length == 0) {
            resultOntologyClasses.push(ontologyClass);
        }
    }
    return resultOntologyClasses;
}

export function addExtractedClass(ontologyClasses: IOntologyClass[]): IOntologyClass[] {
    var newOntologyClasses = _(ontologyClasses)
        .map(x => extractAtomicClassFromComplexClass(x))
        .flatten<IOntologyClass>().value();

    return distinctOntologyClasses(ontologyClasses.concat(newOntologyClasses))
}

export function extractAtomicClassFromComplexClass(ontologyClass: IOntologyClass): IOntologyClass[] {
    if (ontologyClass instanceof AtomicClass) {
        return [ontologyClass];
    }
    else if (ontologyClass instanceof IntersectionClass) {
        return _(ontologyClass.classes)
            .map(x => extractAtomicClassFromComplexClass(x))
            .flatten<IOntologyClass>()
            .value();
    }
    else if (ontologyClass instanceof UnionClass) {
        return _(ontologyClass.classes)
            .map(x => extractAtomicClassFromComplexClass(x))
            .flatten<IOntologyClass>()
            .value();
    }
    else {
        return [];
    }
}