export class BlockFinderContext {
    tripleBlockNodes: any[] = [];
}

export class BlockFinder {
    private isNodeTripleBlock(node: any) {
        return node != null && node.hasOwnProperty('type') && node.type === "bgp";
    }

    private findNodeRecursivelly(node: any, context: BlockFinderContext) {
        if (typeof node !== 'object') {
            return;
        }
        if (this.isNodeTripleBlock(node)) {
            context.tripleBlockNodes.push(node);
        }
        else if (Array.isArray(node)) {
            node.forEach(arrayNode => this.findNodeRecursivelly(arrayNode, context));
        }
        else {
            for (var property in node) {
                this.findNodeRecursivelly(node[property], context);
            }
        }
    }
    
    findBlocks(query: any) {
        var context = new BlockFinderContext();
        this.findNodeRecursivelly(query, context);
        return context;
    }
}