import { IOntologyClass } from '../../Ontology/OntologyClass';
import { OntologyAssertions } from '../../Ontology/OntologyAssertions';
import * as _ from "lodash";

export interface IParentOntologyClassTracker {
    trackAcessibleClasses(ontologyAssertions: OntologyAssertions, ontologyClass: IOntologyClass): IOntologyClass[];
}

export abstract class BaseParentOntologyClassTracker implements IParentOntologyClassTracker {
    abstract getAcessibleClasses(ontologyAssertions: OntologyAssertions, ontologyClass: IOntologyClass): ReadonlyArray<IOntologyClass>;

    innerTrackAcessibleClasses(ontologyAssertions: OntologyAssertions, visitedClasses: IOntologyClass[], ontologyClass: IOntologyClass) {
        if (visitedClasses.filter(x => x == ontologyClass).length > 0) {
            return;
        }
        visitedClasses.push(ontologyClass);

        for (var superSetClass of this.getAcessibleClasses(ontologyAssertions, ontologyClass)) {
            ontologyAssertions.addSubclassEdge(ontologyClass, superSetClass);
            this.innerTrackAcessibleClasses(ontologyAssertions, visitedClasses, superSetClass);
        }
        return visitedClasses;
    }

    trackAcessibleClasses(ontologyAssertions: OntologyAssertions, ontologyClass: IOntologyClass): IOntologyClass[] {
        return this.innerTrackAcessibleClasses(ontologyAssertions, [], ontologyClass);
    }

}

export class FullParentOntologyClassTracker extends BaseParentOntologyClassTracker {
    getAcessibleClasses(ontologyAssertions: OntologyAssertions, ontologyClass: IOntologyClass) {
        return ontologyAssertions
            .findSuperSetClasses(ontologyClass);
    }
}

export class RestrictedParentOntologyClassTracker extends BaseParentOntologyClassTracker {
    getAcessibleClasses(ontologyAssertions: OntologyAssertions, ontologyClass: IOntologyClass) {
        return ontologyAssertions
            .findSuperSetClasses(ontologyClass)
            .filter(x => !ontologyAssertions.existSubclassEdgeOntologyClass(x, ontologyClass))
    }
}

export function createParentOntologyTrackerFromSettings(propertySelectorType: "Restricted" | "Full"): IParentOntologyClassTracker {
    switch (propertySelectorType) {
        case "Full":
            return new FullParentOntologyClassTracker();
        case "Restricted":
            return new RestrictedParentOntologyClassTracker()
        default:
            throw new Error("Invalid property selector type inserted.");
    }
}
