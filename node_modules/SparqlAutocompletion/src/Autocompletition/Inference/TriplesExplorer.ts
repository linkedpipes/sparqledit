import { Triple } from "SparqlAutocompletion/src/Autocompletition/Query/Query";

export class TriplesExplorerContext {
    triples: Triple[] = [];
}

export class TriplesExplorer {
    private isNodeTripleBlock(node: any) {
        return node != null && node.hasOwnProperty("type") && node.type === "bgp";
    }

    private isTriple(node: any) {
        return node != null &&
            node.hasOwnProperty("object") &&
            node.hasOwnProperty("subject") &&
            node.hasOwnProperty("predicate");
    }

    private createTriple(node: any) {
        return new Triple(node.subject,
            node.predicate,
            node.object);
    }

    private findNodeRecursivelly(node: any, context: TriplesExplorerContext) {
        if (typeof node !== "object") {
            return;
        }
        if (this.isNodeTripleBlock(node)) {
            if (!Array.isArray(node.triples)) {
                return;
            }

            node.triples.forEach((arrayNode: any) => {
                if (this.isTriple(arrayNode)) {
                    context.triples.push(this.createTriple(arrayNode));
                }
                else {
                    this.findNodeRecursivelly(arrayNode, context);
                }
            });
        }
        else if (Array.isArray(node)) {
            node.forEach(arrayNode => this.findNodeRecursivelly(arrayNode, context));
        }
        else {
            for (var property in node) {
                this.findNodeRecursivelly(node[property], context);
            }
        }
    }

    findTriples(query: any):Triple[] {
        var context = new TriplesExplorerContext();
        this.findNodeRecursivelly(query, context);
        return context.triples;
    }
}