import { AutocompleteSubProvider, AutocompleteSubProviderContext } from './SubProviders/AutocompleteSubProvider';
import { OntologyHiearchyBuilder } from '../Ontology/Algorithms/OntologyHiearchyBuilder';
import { OntologyAssertionsBuilder } from '../Ontology/Algorithms/OntologyAssertionBuilder';
import { TurtleGraphWrapper } from '../GraphTools/TurtleGraphWrapper';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyAutocompleteSubProvider } from "./SubProviders/OntologyAutocompleteSubProvider";
import { KeywordAutocompleteSubProvider } from "./SubProviders/KewordAutocompleteSubProvider";
import { ERSParser } from "ERSParser";

import * as _ from "lodash";

export interface SparqlAutocompleteItem {
    label: string,
    insertText: string;
}

export class SparqlAutocompleteProvider {
    private subProviders: AutocompleteSubProvider[];

    constructor(private ontologyContent: string) {
        console.log('Start preparing ontology hiearchy.')
        this.ontologyHiearchy = this.createOntologyHiearchyFromFile();
        console.log('Ontology hiearchy prepared.')

        this.subProviders = [new OntologyAutocompleteSubProvider(this.ontologyHiearchy),
        new KeywordAutocompleteSubProvider()];
    }

    private ontologyAssertionsBuilder = new OntologyAssertionsBuilder();
    private ontologyHiarchyBuilder = new OntologyHiearchyBuilder();
    private ontologyHiearchy: OntologyHiearchy;

    createOntologyHiearchyFromFile() {
        var ontologyAssertions = this.ontologyAssertionsBuilder.buildOntologyAsertions(new TurtleGraphWrapper(this.ontologyContent));
        var ontologyHiearchy = this.ontologyHiarchyBuilder.createOntologyHiearchy(ontologyAssertions);
        return ontologyHiearchy;
    }

    provideAutocompleteItems(query: string, cursorOffset: number): SparqlAutocompleteItem[] {
        var context = new AutocompleteSubProviderContext(query, cursorOffset);
        var autocompleteItems: SparqlAutocompleteItem[][] = [];

        for (var subProvider of this.subProviders) {
            var providerAutocompleteItems = subProvider.provideAutocompleteItems(context);
            autocompleteItems.push(providerAutocompleteItems);
        }

        return _.flatten(autocompleteItems);
    }
}


