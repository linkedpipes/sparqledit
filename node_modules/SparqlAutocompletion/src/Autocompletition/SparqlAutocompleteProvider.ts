import { AutocompleteSubProvider, AutocompleteSubProviderContext } from './SubProviders/AutocompleteSubProvider';
import { OntologyHiearchyBuilder } from '../Ontology/Algorithms/OntologyHiearchyBuilder';
import { OntologyAssertionsBuilder } from '../Ontology/Algorithms/OntologyAssertionBuilder';
import { TurtleGraphWrapper } from '../GraphTools/TurtleGraphWrapper';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyAutocompleteSubProvider } from "./SubProviders/OntologyAutocompleteSubProvider";
import { KeywordAutocompleteSubProvider } from "./SubProviders/KeywordAutocompleteSubProvider";
import { VariableAutocompleteSubProvider } from "./SubProviders/VariableAutocompleteSubProvider";
import { ERSParser } from "ERSParser";

import * as _ from "lodash";

/**
 * Item kind copied from monaco editor completitionItem. 
 * This enum is copied because monaco editor is otherwise 
 * big and useless dependency.
 */
export enum SparqlAutocompleteItemKind {
    Text = 0,
    Method = 1,
    Function = 2,
    Constructor = 3,
    Field = 4,
    Variable = 5,
    Class = 6,
    Interface = 7,
    Module = 8,
    Property = 9,
    Unit = 10,
    Value = 11,
    Enum = 12,
    Keyword = 13,
    Snippet = 14,
    Color = 15,
    File = 16,
    Reference = 17,
    Folder = 18,
}

export interface SparqlAutocompleteItem {
    label: string,
    kind: SparqlAutocompleteItemKind
    insertText: string;
    filterText?: string
}

export class SparqlAutocompleteProvider {
    private subProviders: AutocompleteSubProvider[];

    constructor(private ontologyContent: string) {
        console.log('Start preparing ontology hiearchy.')
        this.ontologyHiearchy = this.createOntologyHiearchyFromFile();
        console.log('Ontology hiearchy prepared.')

        this.subProviders = [
            new OntologyAutocompleteSubProvider(this.ontologyHiearchy),
            new KeywordAutocompleteSubProvider(),
            new VariableAutocompleteSubProvider()];
    }

    private ontologyAssertionsBuilder = new OntologyAssertionsBuilder();
    private ontologyHiarchyBuilder = new OntologyHiearchyBuilder();
    private ontologyHiearchy: OntologyHiearchy;

    createOntologyHiearchyFromFile() {
        var ontologyAssertions = this.ontologyAssertionsBuilder.buildOntologyAsertions(new TurtleGraphWrapper(this.ontologyContent));
        var ontologyHiearchy = this.ontologyHiarchyBuilder.createOntologyHiearchy(ontologyAssertions);
        return ontologyHiearchy;
    }

    provideAutocompleteItems(query: string, cursorOffset: number): SparqlAutocompleteItem[] {
        var context = new AutocompleteSubProviderContext(query, cursorOffset);
        var autocompleteItems: SparqlAutocompleteItem[][] = [];
        for (var subProvider of this.subProviders) {
            var providerAutocompleteItems = subProvider.provideAutocompleteItems(context);
            autocompleteItems.push(providerAutocompleteItems);
        }

        return _.flatten(autocompleteItems);
    }
}