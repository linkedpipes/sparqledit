export interface ISparqlLanguageServerSettings {
    parentOntologyClassTracking?: "Restricted" | "Full";
    isLoggingEnabled?: boolean;
    languageTag?: string;
    adviseAtomicClassFromComplexClass?: boolean;
}

export class SparqlLanguageServerSettings {

    public constructor(private sparqlLanguageServerSettings: ISparqlLanguageServerSettings) {

    }

    getParentOntologyClassTracking(): "Restricted" | "Full" {
        var parentOntologyClassTracking = this.sparqlLanguageServerSettings.parentOntologyClassTracking;
        if (parentOntologyClassTracking == null) {
            return "Full";
        }
        if (parentOntologyClassTracking !== "Restricted" && parentOntologyClassTracking !== "Full") {
            throw Error("Property selector type option must have value 'Restricted' or 'Full'.");
        }
        return parentOntologyClassTracking;
    }

    getAdviseAtomicClassFromComplexClass() {
        var adviseAtomicClassFromComplexClass = this.sparqlLanguageServerSettings.adviseAtomicClassFromComplexClass;
        if (adviseAtomicClassFromComplexClass == null) {
            return false;
        }
        if (typeof adviseAtomicClassFromComplexClass != 'boolean') {
            throw Error("Settings adviseAtomicClassFromComplexClass must be boolean.");
        }
        return adviseAtomicClassFromComplexClass;
    }

    getIsLoggingEnabled(): boolean {
        var isLoggingEnabled = this.sparqlLanguageServerSettings.isLoggingEnabled;
        return isLoggingEnabled === true;
    }

    getLanguageTag() {
        var languageTag = this.sparqlLanguageServerSettings.languageTag;
        return languageTag || "en";
    }
}