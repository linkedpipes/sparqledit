import { injectBreaker, injectCursor } from './Utils/QueryTerminalInjection';

import { IParserResult, ERSParser } from "ERSParser";

export class AutocompleteContext {

    private _queryWithCursorParserResult: IParserResult;
    private _queryWithBreakerParserResult: IParserResult;


    constructor(public query: string, public cursorOffset: number) {

    }

    public get queryWithCursorParserResult(): IParserResult {
        if (!this._queryWithCursorParserResult) {
            var query = injectCursor(this.query, this.cursorOffset);
            var parser = new ERSParser();
            this._queryWithCursorParserResult = parser.parse(query);
        }

        return this._queryWithCursorParserResult;
    }

    public get queryWithBreakerParserResult(): IParserResult {
        if (!this._queryWithBreakerParserResult) {
            var query = injectBreaker(this.query, this.cursorOffset);
            var parser = new ERSParser();
            this._queryWithBreakerParserResult = parser.parse(query);
        }

        return this._queryWithBreakerParserResult;
    }
}
