import { QueryAdviceInferencer } from './Inference/QueryAdviceInferencer';
import { PropertyQueryAdvice } from './Inference/QueryAdvice';
import { OntologyAssertions, OntologyProperty } from '../Ontology/OntologyAssertions';
import { OntologyConcept } from "../Ontology/OntologyConcept";
import { SparqlAutocompleteItem, SparqlAutocompleteProvider } from './SparqlAutocompleteProvider';
import { SparqlSignatureHelpProvider } from './SparqlSignatureHelpProvider';
import { SparqlHoverProvider } from 'SparqlAutocompletion/src/Autocompletition/SparqlHoverProvider';
import { ISparqlLanguageServerSettings, SparqlLanguageServerSettings } from '../Autocompletition/SparqlLanguageServerSettings';
import { LoggerFactory } from '../Logging/Logger';
import * as _ from 'lodash';

export class SparqlLanguageServer {
    private queryAdviceInferencer: QueryAdviceInferencer;

    public _sparqlAutocompleteProvider: SparqlAutocompleteProvider;
    public _sparqlSignatureHelpProvider: SparqlSignatureHelpProvider;
    public _sparqlHoverProvider: SparqlHoverProvider;

    constructor(private ontologyAssertions: OntologyAssertions, sparqlLanguageServerSettings: ISparqlLanguageServerSettings) {
        var loggerFactory = new LoggerFactory();
        var coealescedSparqlLanguageServerSettings = new SparqlLanguageServerSettings(sparqlLanguageServerSettings);
        var logger = loggerFactory.createLogger(coealescedSparqlLanguageServerSettings.getIsLoggingEnabled());
        this._sparqlAutocompleteProvider = new SparqlAutocompleteProvider(logger, ontologyAssertions, coealescedSparqlLanguageServerSettings);
        this._sparqlSignatureHelpProvider = new SparqlSignatureHelpProvider(logger, ontologyAssertions);
        this._sparqlHoverProvider = new SparqlHoverProvider(ontologyAssertions, coealescedSparqlLanguageServerSettings.getLanguageTag());
        this.queryAdviceInferencer = new QueryAdviceInferencer(
            logger,
            ontologyAssertions,
            coealescedSparqlLanguageServerSettings.getAdviseAtomicClassFromComplexClass(),
            coealescedSparqlLanguageServerSettings.getParentOntologyClassTracking());
    }

    public getOntologyAssertions() {
        return this.ontologyAssertions;
    }

    public get sparqlSignatureHelpProvider() {
        return this._sparqlSignatureHelpProvider;
    }

    public get sparqlHoverProvider() {
        return this._sparqlHoverProvider;
    }

    provideAutocompleteItems(query: string, cursorOffset: number): SparqlAutocompleteItem[] {
        return this._sparqlAutocompleteProvider.provideAutocompleteItems(query, cursorOffset);
    }

    provideAutocompleteAdvice(query: string, cursorOffset: number): { concept: OntologyConcept, properties: OntologyProperty[] }[] {
        var propertiesAdvices = this.queryAdviceInferencer.providePropertyAutocompletion(query, cursorOffset);
        var result = propertiesAdvices != null && propertiesAdvices instanceof PropertyQueryAdvice ?
            (propertiesAdvices as PropertyQueryAdvice).getData() : null;
        return result;
    }
}