import { Block } from './Query/Query';
import { injectCursor } from './Utils/QueryTerminalInjection';
import { QueryClassInferencer } from './Inference/QueryClassInferencer';
import { QueryAdviceInferencer } from './Inference/QueryAdviceInferencer';
import { OntologyAssertions } from '../Ontology/OntologyAssertions';
import { TurtleGraphWrapper } from '../GraphTools/TurtleGraphWrapper';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyHiearchyBuilder } from '../Ontology/Algorithms/OntologyHiearchyBuilder';
import { OntologyAssertionsBuilder } from '../Ontology/Algorithms/OntologyAssertionBuilder';
import { SparqlAutocompleteItem, SparqlAutocompleteProvider } from './SparqlAutocompleteProvider';
import { SparqlSignatureHelpProvider } from './SparqlSignatureHelpProvider';
import { SparqlHoverProvider } from 'SparqlAutocompletion/src/Autocompletition/SparqlHoverProvider';
import { Node } from '../Autocompletition/Query/Query'
import * as _ from 'lodash';
import { ERSParser } from 'ERSParser';

export class SparqlLanguageServer {

    public _ontologyHiearchy: OntologyHiearchy;
    public _sparqlAutocompleteProvider: SparqlAutocompleteProvider;
    public _sparqlSignatureHelpProvider: SparqlSignatureHelpProvider;
    public _sparqlHoverProvider: SparqlHoverProvider;

    constructor(private ontologyAssertions: OntologyAssertions) {
        var ontologyHiarchyBuilder = new OntologyHiearchyBuilder();
        this._ontologyHiearchy = ontologyHiarchyBuilder.createOntologyHiearchy(ontologyAssertions);
        this._sparqlAutocompleteProvider = new SparqlAutocompleteProvider(this._ontologyHiearchy);
        this._sparqlSignatureHelpProvider = new SparqlSignatureHelpProvider(this._ontologyHiearchy);
        this._sparqlHoverProvider = new SparqlHoverProvider(this._ontologyHiearchy);
    }

    public get ontologyHiearchy() {
        return this._ontologyHiearchy;
    }

    public get sparqlSignatureHelpProvider() {
        return this._sparqlSignatureHelpProvider;
    }

    public get sparqlHoverProvider() {
        return this._sparqlHoverProvider;
    }

    provideAutocompleteItems(query: string, cursorOffset: number): SparqlAutocompleteItem[] {
        console.log("Provide items");
        return this._sparqlAutocompleteProvider.provideAutocompleteItems(query, cursorOffset);
    }
}