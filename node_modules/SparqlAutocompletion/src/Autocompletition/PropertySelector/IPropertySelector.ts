import { IOntologyClass } from '../../Ontology/OntologyClass';
import { OntologyAssertions, OntologyProperty } from '../../Ontology/OntologyAssertions';
import { OntologyHiearchy, OntologyConcept } from '../../Ontology/OntologyHierchy';

import * as _ from 'lodash';

export class PropertyForConceptProvider {
    private ontologyAssertions: OntologyAssertions;

    constructor(public orderConcepts: OntologyConcept[], private ontologyHiearchy: OntologyHiearchy) {
        this.ontologyAssertions = this.ontologyHiearchy.ontologyAssertions;
    }

    getAllPoperties() {
        var result = _(this.orderConcepts)
            .map(x => this.getPropertiesOfConcept(x))
            .flatten<OntologyProperty>()
            .value();
        return result;
    }

    getPropertiesOfClass(ontologyClass: IOntologyClass) {
        return this.ontologyAssertions.findPropertiesByDomain(ontologyClass);
    }

    getPropertiesOfConcept(ontologyConcept: OntologyConcept) {
        var result = _(ontologyConcept.ontologyClasses)
            .map(x => this.getPropertiesOfClass(x))
            .flatten<OntologyProperty>()
            .value();

        return result;
    }

    getPropertiesByChunk() {
        return this.orderConcepts.map(x => ({ concept: x, properties: this.getPropertiesOfConcept(x) }))
    }
}

export interface IPropertySelector {
    getPropertiesFor(ontologyClass: IOntologyClass): PropertyForConceptProvider;
}