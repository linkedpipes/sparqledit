import { AutocompleteSubProvider, AutocompleteSubProviderContext } from './AutocompleteSubProvider';
import { SparqlAutocompleteItem, SparqlAutocompleteItemKind } from "../SparqlAutocompleteProvider";

export class KeywordAutocompleteSubProvider implements AutocompleteSubProvider {

    private supportedKeywords = ["cursor", "base", "prefix", "select", "distinct", "reduced", "as", "construct", "where", "describe", "ask",
        "from", "named", "group", "by", "having", "order", "asc", "desc", "limit", "offset", "values", "load", "silent",
        "into", "clear", "drop", "create", "add", "to", "move", "copy", "insert", "delete", "delete", "with", "delete", "insert",
        "using", "default", "graph", "all", "optional", "service", "bind", "undef", "minus", "union", "filter", "in", "not",
        "bound", "bnode", "concat", "coalesce", "if", "replace", "exists", "separator"];


    provideAutocompleteItems(context: AutocompleteSubProviderContext): SparqlAutocompleteItem[] {

        var errorWithUnknonw = context
            .queryWithBreakerParserResult
            .extraTracedParserErrors
            .filter(x => x.problemToken == "BREAKER");

        if (errorWithUnknonw.length == 0) {
            return [];
        }

        var expectedTokens = errorWithUnknonw[0].expected;

        var currentKeywords: string[] = expectedTokens;
        return currentKeywords.map(x => ({
            label: x,
            kind: SparqlAutocompleteItemKind.Keyword,
            insertText: x
        }));
    }
}