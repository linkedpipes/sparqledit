import { OntologyHiearchy } from '../../Ontology/OntologyHierchy';
import { SparqlAutocompleteItemKind, SparqlAutocompleteItem } from '../SparqlAutocompleteProvider';
import { AutocompleteSubProviderContext, AutocompleteSubProvider } from './AutocompleteSubProvider';
import { QueryInferencer } from "../Inference/QueryInferencer";

export class OntologyAutocompleteSubProvider implements AutocompleteSubProvider {

    constructor(private ontologyHiearchy: OntologyHiearchy) {
        // empty
    }

    provideAutocompleteItems(context: AutocompleteSubProviderContext): SparqlAutocompleteItem[] {
        var ontologyInferencer = new QueryInferencer(this.ontologyHiearchy);

        try {
            var result = ontologyInferencer.doAutocomplete(context.queryWithCursorParserResult.query);
        } catch (e) {
            console.log("Autocomplete broken.");
            return [];
        }

        var cursorContext = result.getVariableContext('cursor');
        if (cursorContext != null) {
            return cursorContext.possibleAdvices.map((x: string) => {
                // TODO: can be better
                var insertText = x.match(/^http:\/\//) ? '<' + x + '>' : x;

                return {
                    label: x,
                    kind: SparqlAutocompleteItemKind.Property,
                    insertText: insertText,
                    filterText: insertText,
                }
            });
        }
        return [];
    }
}