import { SparqlAutocompleteItem } from "../SparqlAutocompleteProvider"
import { ERSParser, IParserResult } from "ERSParser";


function takeWhileNotWhitespace(text: string) {
    for (var i = text.length - 1; i >= 0; i--) {
        if (text[i] == " ") {
            return text.substr(0, i);
        }
    }

    return "";
}

function removeCharactersAfterCursor(text: string) {
    for (var i = 0; i < text.length; i++) {
        var currentCharacter = text[i];
        if (currentCharacter == '\n' || currentCharacter == '\r') {
            return '.' + text.substring(i, text.length);
        }
    }

    return "";
}

function injectCursor(query: string, offset: number) {
    return injectTerminal(query, offset, "cursor");
}

function injectUnknown(query: string, offset: number) {
    return injectTerminal(query, offset, "unknown");
}

function injectTerminal(query: string, offset: number, terminal: string) {
    var beforeCursor = query.substring(0, offset);
    var atferCursor = query.substring(offset, query.length)
    return takeWhileNotWhitespace(beforeCursor) + ' ' + terminal + ' ' + removeCharactersAfterCursor(atferCursor);
}


export class AutocompleteSubProviderContext {

    private _queryWithCursorParserResult: IParserResult;
    private _queryWithUnknownParserResult: IParserResult;


    constructor(public query: string, public cursorOffset: number) {

    }

    public get queryWithCursorParserResult(): IParserResult {
        if (!this._queryWithCursorParserResult) {
            var query = injectCursor(this.query, this.cursorOffset);
            var parser = new ERSParser();
            this._queryWithCursorParserResult = parser.parse(query);
        }

        return this._queryWithCursorParserResult;
    }

    public get queryWithUnknownParserResult(): IParserResult {
        if (!this._queryWithUnknownParserResult) {
            var query = injectUnknown(this.query, this.cursorOffset);
            var parser = new ERSParser();
            this._queryWithUnknownParserResult = parser.parse(query);
        }

        return this._queryWithUnknownParserResult;
    }
}

export interface AutocompleteSubProvider {
    provideAutocompleteItems(context: AutocompleteSubProviderContext): SparqlAutocompleteItem[];
}