import { injectCursor } from './Utils/QueryTerminalInjection';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyHiearchyBuilder } from '../Ontology/Algorithms/OntologyHiearchyBuilder';
import { OntologyAssertionsBuilder } from '../Ontology/Algorithms/OntologyAssertionBuilder';
import { TurtleGraphWrapper } from '../GraphTools/TurtleGraphWrapper';
import { OntologyAutocompleteSubProvider } from "./SubProviders/OntologyAutocompleteSubProvider"
import { IParserResult, ERSParser } from "ERSParser";

export interface SparqlSignatureHelp {
    label: string;
    documentation: string
}

export class SparqlSignatureHelpProvider {
    private ontologyAutocompleteSubProvider: OntologyAutocompleteSubProvider;
    private ontologyHiearchy: OntologyHiearchy;

    constructor(private ontologyContent: string) {
        console.log('Start preparing ontology hiearchy.')
        this.ontologyHiearchy = this.createOntologyHiearchyFromFile();
        console.log('Ontology hiearchy prepared.')

        this.ontologyAutocompleteSubProvider = new OntologyAutocompleteSubProvider(this.ontologyHiearchy);
    }

    private ontologyAssertionsBuilder = new OntologyAssertionsBuilder();
    private ontologyHiarchyBuilder = new OntologyHiearchyBuilder();


    createOntologyHiearchyFromFile() {
        var ontologyAssertions = this.ontologyAssertionsBuilder.buildOntologyAsertions(new TurtleGraphWrapper(this.ontologyContent));
        var ontologyHiearchy = this.ontologyHiarchyBuilder.createOntologyHiearchy(ontologyAssertions);
        return ontologyHiearchy;
    }

    public queryWithCursorParserResult(query: string, cursorOffset: number): IParserResult {
        var query = injectCursor(query, cursorOffset);
        var parser = new ERSParser();
        return parser.parse(query);
    }


    provideSignatureHelp(query: string, cursorOffset: number): SparqlSignatureHelp {

        try {
            var result = this.ontologyAutocompleteSubProvider.doAutocomplete(this.queryWithCursorParserResult(query, cursorOffset).query);
        } catch (e) {
            return null;
        }

        var cursorContext = result.getVariableContext('cursor');
        if (cursorContext == null) {
            return null;
        }
        if (cursorContext.possibleClasses.length == 0) {
            return null;
        }
        return {
            label: cursorContext.possibleClasses.map((x: any) => x.getText()).join(";"),
            documentation: "docs"
        };
    }
}