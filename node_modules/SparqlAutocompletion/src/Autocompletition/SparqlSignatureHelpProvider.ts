import { injectCursor } from './Utils/QueryTerminalInjection';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyAutocompleteSubProvider } from "./SubProviders/OntologyAutocompleteSubProvider"
import { IParserResult, ERSParser } from "ERSParser";
import { QueryInferencer } from './Inference/QueryInferencer';

export interface SparqlSignatureHelp {
    label: string;
    documentation: string
}

export class SparqlSignatureHelpProvider {
    private ontologyInferencer: QueryInferencer;

    constructor(private ontologyHiearchy: OntologyHiearchy) {
        this.ontologyInferencer = new QueryInferencer(this.ontologyHiearchy);
    }

    public queryWithCursorParserResult(query: string, cursorOffset: number): IParserResult {
        var query = injectCursor(query, cursorOffset);
        var parser = new ERSParser();
        return parser.parse(query);
    }

    provideSignatureHelp(query: string, cursorOffset: number): SparqlSignatureHelp {
        try {
            var result = this.ontologyInferencer.doAutocomplete(this.queryWithCursorParserResult(query, cursorOffset).query);
        } catch (e) {
            return null;
        }

        var cursorContext = result.getVariableContext('cursor');
        if (cursorContext == null) {
            return null;
        }
        if (cursorContext.possibleClasses.length == 0) {
            return null;
        }
        return {
            label: cursorContext.possibleClasses.map((x: any) => x.getText()).join(";"),
            documentation: "docs"
        };
    }
}