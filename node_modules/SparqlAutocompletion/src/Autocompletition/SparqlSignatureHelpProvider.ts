import { injectCursor } from './Utils/QueryTerminalInjection';
import { OntologyHiearchy } from '../Ontology/OntologyHierchy';
import { OntologyAutocompleteSubProvider } from "./SubProviders/OntologyAutocompleteSubProvider"
import { IParserResult, ERSParser } from "ERSParser";
import { SparqlLanguageServerSettings } from '../Autocompletition/SparqlLanguageServerSettings';
import { QueryClassInferencer } from '../Autocompletition/Inference/QueryClassInferencer';
import { CleanOntologyClassTextFormatter } from '../Ontology/OntologyClassTextFormatter';

export interface SparqlSignatureHelp {
    label: string;
    documentation: string
}

export class SparqlSignatureHelpProvider {
    private queryClassInferencer: QueryClassInferencer;
    private ontologyClassTextFormatter: CleanOntologyClassTextFormatter = new CleanOntologyClassTextFormatter();

    constructor(private ontologyHiearchy: OntologyHiearchy, sparqlLanguageServerSettings: SparqlLanguageServerSettings) {

        this.queryClassInferencer = new QueryClassInferencer(ontologyHiearchy);
    }

    public queryWithCursorParserResult(query: string, cursorOffset: number): IParserResult {
        var query = injectCursor(query, cursorOffset);
        var parser = new ERSParser();
        return parser.parse(query);
    }

    provideSignatureHelp(query: string, cursorOffset: number): SparqlSignatureHelp {
        try {
            var result = this.queryClassInferencer.inferClasses(this.queryWithCursorParserResult(query, cursorOffset).query);
            var cursorContext = result.getVariable("cursor");
        } catch (e) {
            return null;
        }

        if (cursorContext == null) {
            return null;
        }

        if (cursorContext.possibleClasses.length == 0) {
            return null;
        }
        var neco = cursorContext.possibleClasses[0].getText()
        return {
            label: cursorContext.possibleClasses.map(x => x.getText(this.ontologyClassTextFormatter)).join(";"),
            documentation: "docs"
        };
    }
}