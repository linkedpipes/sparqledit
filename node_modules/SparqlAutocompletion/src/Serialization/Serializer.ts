import { OntologyAssertions } from '../Ontology/OntologyAssertions';
import { BaseTypeSerializer, TypeSerializerCommon, SerializationContext, } from './TypeSerializer';
import { IOntologyClass, AtomicClass, UnknownClass } from '../Ontology/OntologyClass';
import { OntologyAssertionsSerializer } from './TypeSerializers/OntologyAssertionsSerializer';
import { OntologyClassSerializer } from './TypeSerializers/OntologyClassSerializer';

/**
 * Provide serialization and deserialization for project. 
 */
export class Serializer {
    private typeSerializers: { [key: string]: TypeSerializerCommon } = {};

    constructor() {
        this.registerTypeSerializer("OntologyClass", new OntologyClassSerializer());
        this.registerTypeSerializer("OntologyAssertions", new OntologyAssertionsSerializer());
    }

    private registerTypeSerializer(typeName: string, typeSerializer: TypeSerializerCommon) {
        this.typeSerializers[typeName] = typeSerializer;
    }

    private getTypeSerializer(serializerName: string) {
        var typeSerializer = this.typeSerializers[serializerName];
        if (typeSerializer == undefined) {
            throw new Error("For given serializer name is not registered any serializer.");
        }
        return typeSerializer;
    }

    serialize(serializerName: string, serializeObject: any): string {
        var typeSerializer = this.getTypeSerializer(serializerName);
        var payLoad = typeSerializer.serializeCommon(serializeObject, new SerializationContext(this.typeSerializers));
        return JSON.stringify(payLoad);
    }

    deserialize(serializerName: string, serializedObject: string): any {
        var payload = JSON.parse(serializedObject);
        var typeSerializer = this.getTypeSerializer(serializerName);
        return typeSerializer.deserializeCommon(payload, new SerializationContext(this.typeSerializers));
    }

    serializeOntologyAssertions(ontologyAssertions: OntologyAssertions) {
        this.serialize("OntologyAssertions", ontologyAssertions);
    }

    deserializeOntologyAssertions(serializedOntologyAssertions: string): OntologyAssertions {
        return this.deserialize("OntologyAssertions", serializedOntologyAssertions);
    }

}