import { IOntologyClass } from '../../Ontology/OntologyClass';
import { OntologyProperty, OntologyAssertions } from '../../Ontology/OntologyAssertions';
import { SerializationContext, BaseTypeSerializer } from '../TypeSerializer';

/**
 * Provide serialization of OntologyAssertion
 */
export class OntologyAssertionsSerializer extends BaseTypeSerializer<OntologyAssertions> {

    private processDomainOrRange(classDictionary: { [key: string]: number }, ontologyClass: IOntologyClass) {
        if (ontologyClass == null) {
            return -1;
        }
        return classDictionary[ontologyClass.getText()]
    }
    serialize(serializeObject: OntologyAssertions, serializationContext: SerializationContext) {
        var ontologyClassSerializer = serializationContext.getTypeSerializer("OntologyClass");
        var classPayload = serializeObject.classes.map(ontologyClass => ontologyClassSerializer.serializeCommon(ontologyClass, serializationContext));
        var classDictionary = serializeObject.classDictionary;
        var properties = serializeObject.properties.map(property => ({
            name: property.name,
            domain: this.processDomainOrRange(classDictionary, property.domain),
            range: this.processDomainOrRange(classDictionary, property.range)
        }));

        return {
            classes: classPayload,
            classDictionary: classDictionary,
            subClassEdges: serializeObject.subClassEdges,
            properties: properties
        }
    }

    deserialize(payload: any, serializationContext: SerializationContext): OntologyAssertions {
        var ontologyClassSerializer = serializationContext.getTypeSerializer("OntologyClass");
        var ontologyAssertions = new OntologyAssertions();
        var classes = payload.classes.map((classPayload: any) => <IOntologyClass>ontologyClassSerializer.deserializeCommon(classPayload, serializationContext));
        ontologyAssertions.classes = classes;
        ontologyAssertions.subClassEdges = payload.subClassEdges;
        ontologyAssertions.classDictionary = payload.classDictionary;
        ontologyAssertions.properties = payload.properties.map((property: any) => {
            var newPropery = new OntologyProperty(property.name);
            if (property.domain != -1) {
                newPropery.domain = classes[property.domain];
            }
            if (property.range != -1) {
                newPropery.range = classes[property.range];
            }
            return newPropery;
        });
        return ontologyAssertions;
    }
}