import { IOntologyClass } from '../../Ontology/OntologyClass';
import { OntologyProperty, OntologyAssertions } from '../../Ontology/OntologyAssertions';
import { SerializationContext, BaseTypeSerializer, TypeSerializerCommon } from '../TypeSerializer';
import { StringDictionary } from '../../Collections/Dictionary';

/**
 * Provide serialization of OntologyAssertion
 */
export class OntologyAssertionsSerializer extends BaseTypeSerializer<OntologyAssertions> {

    serializeOntologyClasseArray(classDictionary: StringDictionary<number>, ontologyClasses: IOntologyClass[]) {
        return ontologyClasses.map(ontologyClass => classDictionary[ontologyClass.getText()]);
    }

    serialize(serializeObject: OntologyAssertions, serializationContext: SerializationContext) {
        var ontologyClassSerializer = serializationContext.getTypeSerializer("OntologyClass");
        var ontologyLabelSerializer = serializationContext.getTypeSerializer("OntologyLabel");
        var classPayload = serializeObject.classes.map(ontologyClass => ontologyClassSerializer.serializeCommon(ontologyClass, serializationContext));
        var classDictionary = serializeObject.classDictionary;

        var properties = serializeObject.properties.map(ontologyProperty => {
            var propertyPayload: any = {
                name: ontologyProperty.name,
                domains: this.serializeOntologyClasseArray(classDictionary, ontologyProperty.domains),
                ranges: this.serializeOntologyClasseArray(classDictionary, ontologyProperty.ranges)
            }

            if (ontologyProperty.label.containsAnyLabel) {
                propertyPayload.label = ontologyLabelSerializer.serializeCommon(ontologyProperty.label, serializationContext)
            }
            return propertyPayload;
        });

        return {
            classes: classPayload,
            subClassEdges: serializeObject.subClassEdges,
            properties: properties
        }
    }

    deserializeOntologyClassArray(classes: IOntologyClass[], classIndexes: number[]) {
        return classIndexes.map(classIndex => classes[classIndex]);
    }

    deserialize(payload: any, serializationContext: SerializationContext): OntologyAssertions {
        var ontologyClassSerializer = serializationContext.getTypeSerializer("OntologyClass");
        var ontologyLabelSerializer = serializationContext.getTypeSerializer("OntologyLabel");
        var ontologyAssertions = new OntologyAssertions();
        var classes = payload.classes.map((classPayload: any) => <IOntologyClass>ontologyClassSerializer.deserializeCommon(classPayload, serializationContext));
        var properties = payload.properties.map((property: any) => {
            var newProperty = new OntologyProperty(property.name);
            newProperty.domains = this.deserializeOntologyClassArray(classes, property.domains);
            newProperty.ranges = this.deserializeOntologyClassArray(classes, property.ranges);
            if (property.label !== undefined) {
                newProperty.label = ontologyLabelSerializer.deserializeCommon(property.label, serializationContext);
            }
            return newProperty;
        });
        ontologyAssertions.load(classes, payload.subClassEdges, properties);
        return ontologyAssertions;
    }
}