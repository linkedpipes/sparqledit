import { ListClass, IOntologyClass, AtomicClass, UnknownClass, UnionClass, IntersectionClass, RestrictionClass } from '../../Ontology/OntologyClass';
import { SerializationContext, BaseTypeSerializer } from '../TypeSerializer';
var uuid = require("uuid");

/**
 * Provide serialization of OntologyClass
 */
export class OntologyClassSerializer extends BaseTypeSerializer<IOntologyClass> {
    serialize(serializeObject: IOntologyClass, serializationContext: SerializationContext) {
        if (serializeObject instanceof AtomicClass) {
            return {
                type: 0,
                iri: serializeObject.iri
            }
        }
        else if (serializeObject instanceof RestrictionClass) {
            return {
                type: 1,
                onProperty: serializeObject.onProperty
            };
        }
        else if (serializeObject instanceof ListClass) {
            var isUnionClass = serializeObject instanceof UnionClass;
            var serializedList: any[] = serializeObject.classes.map(x => this.serialize(x, serializationContext));
            return {
                type: isUnionClass ? 2 : 3,
                classes: serializedList
            }
        }
        else if (serializeObject instanceof UnknownClass) {
            return {
                type: 4,
                nodeValue: serializeObject.nodeValue
            }
        }
        else {
            return {
                type: 5
            }
        }
    }
    private deserializelist() {

    }
    deserialize(payload: any, serializationContext: SerializationContext): IOntologyClass {
        switch (payload.type) {
            case 0:
                return new AtomicClass(payload.iri);
            case 1:
                return new RestrictionClass(payload.onProperty);
            case 2:
            case 3:
                var result = payload.type == 2 ? new UnionClass() : new IntersectionClass();
                payload.classes.forEach((serializedClass: any) => result.addClass(this.deserialize(serializedClass, serializationContext)));
                return result;
            case 4:
                return new UnknownClass(payload.nodeValue);
            case 5:
                return new UnknownClass("SerializationError" + uuid.v4());
            default:
                throw Error("Unkown ontology class type.");
        }
    }
}