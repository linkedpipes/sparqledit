/**
 * Context for serialization and deserialization algorithm.
 * Meanwhile provides only other type serializers. 
 */
export class SerializationContext {
    constructor(private typeSerializers: { [key: string]: TypeSerializerCommon }) {

    }

    /**
     * Returns serializer globally registered for given name.
     * @param serializerName serializer name
     */
    public getTypeSerializer(serializerName: string) {
        var typeSerializer = this.typeSerializers[serializerName];
        if (typeSerializer == undefined) {
            throw new Error("For given serializer name is not registered any serializer.");
        }
        return typeSerializer;
    }
}

/**
 * Type serializer provide serialization and deserialization only for one type (e.g. ExampleClass).
 * This interface contains method for non-generic acess => methods use any. 
 * This is usefull for working with type serializers.
 */
export interface TypeSerializerCommon {
    serializeCommon(serializeObject: any, serializationContext: SerializationContext): any;
    deserializeCommon(payload: any, serializationContext: SerializationContext): any;
}

/**
 * Type serializer provide serialization and deserialization only for one type (e.g. ExampleClass).
 * This interface contains method forgeneric acess => methods use T. 
 * This is usefull for implementation. 
 */
export interface TypeSerializer<T> extends TypeSerializerCommon {
    serialize(serializeObject: T, serializationContext: SerializationContext): any;
    deserialize(payload: any, serializationContext: SerializationContext): T;
}

/**
 * Base implementation of TypeSerializer<T> interface. Implements non-generic methods.
 * Every type serializer shoud extends this class.
 */
export abstract class BaseTypeSerializer<T> implements TypeSerializer<T>{
    serializeCommon(serializeObject: any, serializationContext: SerializationContext) {
        return this.serialize(serializeObject, serializationContext);
    }
    deserializeCommon(payload: any, serializationContext: SerializationContext) {
        return this.deserialize(payload, serializationContext);
    }

    abstract serialize(serializeObject: T, serializationContext: SerializationContext): any;
    abstract deserialize(payload: any, serializationContext: SerializationContext): T;
}