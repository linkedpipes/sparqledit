import { extractAtomicClassFromComplexClass, addExtractedClass } from "../../../src/Autocompletition/Inference/AtomicClassExtraction";
import { UnionClass, IntersectionClass, RestrictionClass, ComplementClass, UnknownClass } from "../../../src/Ontology/OntologyClass";
import { nc } from "../../Utils/OntologyObjectUtils";
import * as chai from "chai";
describe("AtomicClassExtraction", () => {
    describe("addExtractedClass", () => {
        it("should work with one atomic class.", () => {
            var exampleClasses = [nc(0)];
            var result = addExtractedClass(exampleClasses);
            chai.expect(result).to.deep.equal(exampleClasses);
        });

        it("should work with disjoin classes.", () => {
            var exampleClasses = [
                nc(0),
                (new UnionClass()).addClass(nc(1)).addClass(nc(2)),
                (new IntersectionClass()).addClass(nc(3)).addClass(nc(4)),
            ];
            var result = addExtractedClass(exampleClasses);
            chai.expect(result).to.deep.equal(exampleClasses.concat([nc(1), nc(2), nc(3), nc(4)]));
        });

        it("should work duplicated classes.", () => {
            var exampleClasses = [
                nc(0),
                (new UnionClass()).addClass(nc(0)).addClass(nc(2)),
                (new IntersectionClass()).addClass(nc(0)).addClass(nc(2)).addClass(nc(3)),
            ];
            var result = addExtractedClass(exampleClasses);
            chai.expect(result).to.deep.equal(exampleClasses.concat([nc(2), nc(3)]));
        });
    });
    
    describe("extractAtomicClassFromComplexClass", () => {
        it("should extract work on atomic class.", () => {
            var exampleClass = nc(1);
            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([nc(1)]);
        });

        it("should extract work on empty union class.", () => {
            var exampleClass = new UnionClass();
            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([]);
        });

        it("should stop on restriction class.", () => {
            var exampleClass = new RestrictionClass("http://www.example.org/property");
            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([]);
        });

        it("should stop on complement class.", () => {
            var exampleClass = new ComplementClass(nc(0));
            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([]);
        });

        it("should stop on unknown class.", () => {
            var exampleClass = new UnknownClass("Error");
            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([]);
        });

        it("should extract comple classes.", () => {
            var exampleClass = (new UnionClass())
                .addClass(nc(1))
                .addClass(nc(2))
                .addClass((new IntersectionClass()
                    .addClass(
                        new UnionClass()
                            .addClass(nc(3))
                            .addClass(nc(4))
                            .addClass(nc(5))
                    )
                    .addClass(nc(6)))
                );

            var extractedClasses = extractAtomicClassFromComplexClass(exampleClass);
            chai.expect(extractedClasses).to.deep.equal([nc(1), nc(2), nc(3), nc(4), nc(5), nc(6)]);
        });
    });
});