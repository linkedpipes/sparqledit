import { bubbleOntologyConcept, QueryAdviceInferencer, mergePossibleClassOntologyConcepts } from "../../../src/Autocompletition/Inference/QueryAdviceInferencer";
import { no } from "../../Utils/OntologyObjectUtils";
import * as chai from "chai";
import { OntologyConcept  } from "SparqlAutocompletion/src";
    
describe("QueryAdviceInferencer", () => {
    describe("bubbleOntologyConcept", () => {
        it("should merge two concepts with intersection.", () => {
            var concepts = [no([1, 2]), no([3])];
            var concept = no([1, 4]);
            bubbleOntologyConcept(concepts, concept);
            chai.expect(concepts).to.deep.equal([no([1, 2, 4]), no([3])]);
        });

        it("should ignore same concepts.", () => {
            var concepts = [no([1]), no([3])];
            var concept = no([1]);
            bubbleOntologyConcept(concepts, concept);
            chai.expect(concepts).to.deep.equal([no([1]), no([3])]);
        });

        it("should add new concept.", () => {
            var concepts = [no([1, 2]), no([3])];
            var concept = no([4]);
            bubbleOntologyConcept(concepts, concept);
            chai.expect(concepts).to.deep.equal([no([1, 2]), no([3]), no([4])]);
        });

        it("should work with empty concepts", () => {
            var concepts: OntologyConcept[] = [];
            var concept = no([1, 4]);
            bubbleOntologyConcept(concepts, concept);
            chai.expect(concepts).to.deep.equal([no([1, 4])]);
        });
    });

    describe("mergePossibleClassOntologyConcepts", () => {
        it("should do empty", () => {
            var result = mergePossibleClassOntologyConcepts([]);
            chai.expect(result).length(0);
        });
    });
}); 