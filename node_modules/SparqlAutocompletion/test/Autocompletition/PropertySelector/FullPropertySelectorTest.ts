import { FullPropertySelector } from "../../../src/Autocompletition/PropertySelector/FullPropertySelector";
import { RestrictedPropertySelector } from "../../../src/Autocompletition/PropertySelector/RestrictedPropertySelector";
import { createOntologyHierarchyFromTurtle } from "../../Utils/Utils";
import { AtomicClass } from "../../../src/Ontology/OntologyClass";

import * as chai from 'chai';
import { OntologyConcept } from "SparqlAutocompletion/src";

/**
 * Creates node atomic class.
 */
function nc(index: number) {
    return new AtomicClass(`http://www.example.com/Node${index}`);
}
/**
 * Creates ontology concept with  atomic class.
 * */
function no(index: number) {
    return new OntologyConcept([nc(index)]);
}

describe("FullPropertySelector", () => {
    it("should sort 1. testcase by topological order.", () => {
        var ontologyHierarchy = createOntologyHierarchyFromTurtle(
            require("raw-loader!../../TestData/Autocompletition/PropertySelector/fullPropertySelectorOntology1.ttl")
        );

        var propertySelector = new FullPropertySelector(ontologyHierarchy);
        var propertiesAdvices = propertySelector.getPropertiesFor(nc(0));
        chai.expect(propertiesAdvices.orderConcepts).to.deep.equal([no(0), no(1), no(2), no(3), no(4), no(5), no(6)]);
    });

    it("should sort 2. testcase by topological order.", () => {
        var ontologyHierarchy = createOntologyHierarchyFromTurtle(
            require("raw-loader!../../TestData/Autocompletition/PropertySelector/fullPropertySelectorOntology2.ttl")
        );

        var propertySelector = new FullPropertySelector(ontologyHierarchy);
        var propertiesAdvices = propertySelector.getPropertiesFor(nc(0));
        chai.expect(propertiesAdvices.orderConcepts).to.deep.equal([no(0), no(1), no(2), no(3), no(4), no(5), no(6)]);
    });

    it("should sort 3. testcase by topological order.", () => {
        var ontologyHierarchy = createOntologyHierarchyFromTurtle(
            require("raw-loader!../../TestData/Autocompletition/PropertySelector/fullPropertySelectorOntology3.ttl")
        );

        var propertySelector = new FullPropertySelector(ontologyHierarchy);
        var propertiesAdvices = propertySelector.getPropertiesFor(nc(0));
        chai.expect(propertiesAdvices.orderConcepts).to.deep.equal([no(0)]);
    });

    it("should not fail on non-existing ontology concept.", () => {
        var ontologyHierarchy = createOntologyHierarchyFromTurtle(
            require("raw-loader!../../TestData/Autocompletition/PropertySelector/fullPropertySelectorOntology3.ttl")
        );

        var propertySelector = new FullPropertySelector(ontologyHierarchy);
        var propertiesAdvices = propertySelector.getPropertiesFor(nc(1));
        var properties = propertiesAdvices.getAllPoperties();
        var propertiesByChunk = propertiesAdvices.getPropertiesByChunk();
        chai.expect(propertiesAdvices.orderConcepts).to.deep.equal([no(1)]);
        chai.expect(properties).to.deep.equal([]);
        chai.expect(propertiesByChunk).to.deep.equal([{ concept: no(1), properties: [] }]);
    });
});