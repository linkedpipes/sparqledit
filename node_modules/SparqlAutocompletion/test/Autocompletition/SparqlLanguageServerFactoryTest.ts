import { SparqlLanguageServerFactory } from "SparqlAutocompletion/src/Autocompletition/SparqlLanguageServerFactory";
import * as chai from 'chai';

function runTestCase(editorFormatData: string) {
    var sparqlLanguageServerFactory = new SparqlLanguageServerFactory();
    var result = sparqlLanguageServerFactory.createFromEditorFormat(editorFormatData, {});
    return result;
}

function runStringifyTestCase(editorFormatDataObject: any) {
    return runTestCase(JSON.stringify(editorFormatDataObject));
}

describe("SparqlLanguageServerFactory", () => {

    it("should create server from format with raw data.", () => {
        var testCaseData = {
            type: "raw",
            value: require("raw-loader!../TestData/Autocompletition/rawDataTest.ttl")
        }

        var result = runStringifyTestCase(testCaseData);
        chai.expect(result.sparqlLanguageServer.ontologyHierarchy.concepts.length).greaterThan(1);
        chai.expect(result.buildOntologyAlgorithmErrorLogger).not.to.be.null;
    });

    it("should create server from format with precomputed data.", () => {
        var testCaseData = {
            type: "precomputed",
            value: require("raw-loader!../TestData/Autocompletition/precomputedDataTest.json")
        }

        var result = runStringifyTestCase(testCaseData);
        chai.expect(result.sparqlLanguageServer.ontologyHierarchy.concepts.length).greaterThan(1);
        chai.expect(result.buildOntologyAlgorithmErrorLogger).not.to.be.null;
    });

    it('should throw exception when get non json data', () => {
        chai.assert.throw(() => {
            runTestCase('no json');
        }, "Wrong editor format: can not parse to JSON.");
    });

    it('should throw exception when does not get value property', () => {
        chai.assert.throw(() => {
            runStringifyTestCase({ type: "raw" });
        }, "Wrong editor format: missing property type or value.");
    });

    it('should throw exception when does not get type property', () => {
        chai.assert.throw(() => {
            runStringifyTestCase({ value: "" });
        }, "Wrong editor format: missing property type or value.");
    });

    it('should throw exception when does not get value property', () => {
        chai.assert.throw(() => {
            runStringifyTestCase({ type: "unknown", value: "" });
        }, "Wrong editor format: unknown format type.");
    });
});