import { IRDFNode } from '../../src/GraphTools/GraphInterfaces';
import { TurtleGraphWrapper } from '../../src/GraphTools/TurtleGraphWrapper';
import * as chai from 'chai';
var prefix = "http://example.org/";
describe('TurtleGraphWrapper', () => {
    describe('should match triples', () => {
        var turtleFile = require("raw-loader!./resources/matchTest.ttl");
        var matchTestGraph = new TurtleGraphWrapper(turtleFile);

        it('should match subject', () => {
            var result = matchTestGraph.match(prefix + "Subject1", null, null);
            chai.expect(result.getTriplesCount()).equal(1);
            chai.expect(result.triples[0].subject.nominalValue).equal(prefix + "Subject1");
            chai.expect(result.triples[0].predicate.nominalValue).equal(prefix + "Predicate1");
            chai.expect(result.triples[0].object.nominalValue).equal(prefix + "Object1");
        });

        it('should match predicate', () => {
            var result = matchTestGraph.match(null, prefix + "Predicate1", null);
            chai.expect(result.getTriplesCount()).equal(2);
            chai.expect(result.triples[0].subject.nominalValue).equal(prefix + "Subject1");
            chai.expect(result.triples[0].predicate.nominalValue).equal(prefix + "Predicate1");
            chai.expect(result.triples[0].object.nominalValue).equal(prefix + "Object1");
            chai.expect(result.triples[1].subject.nominalValue).equal(prefix + "Subject2");
            chai.expect(result.triples[1].predicate.nominalValue).equal(prefix + "Predicate1");
            chai.expect(result.triples[1].object.nominalValue).equal(prefix + "Object2");
        })

        it('should match object', () => {
            var result = matchTestGraph.match(null, null, prefix + "Object1");
            chai.expect(result.getTriplesCount()).equal(1);
            chai.expect(result.triples[0].subject.nominalValue).equal(prefix + "Subject1");
            chai.expect(result.triples[0].predicate.nominalValue).equal(prefix + "Predicate1");
            chai.expect(result.triples[0].object.nominalValue).equal(prefix + "Object1");
        })

        it('should not match non-existing subject', () => {
            var result = matchTestGraph.match(prefix + "notExist", null, null);
            chai.expect(result.getTriplesCount()).equal(0);
        });

        it('should not match non-existing predicate', () => {
            var result = matchTestGraph.match(null, prefix + "notExist", null);
            chai.expect(result.getTriplesCount()).equal(0);
        });

        it('should not match non-existing object', () => {
            var result = matchTestGraph.match(null, null, prefix + "notExist");
            chai.expect(result.getTriplesCount()).equal(0);
        });
    });

    describe('shoud work with blank nodes', () => {
        var turtleFile = require("raw-loader!./resources/blankNodeTest.ttl");
        var blankNodeTestGraph = new TurtleGraphWrapper(turtleFile);

        function assertBlankNode(node: IRDFNode) {
            chai.expect(node.nodeType()).equal("BlankNode");
            chai.expect(node.nominalValue).match(/^b[0-9]+/);
        }

        it('shoud match named blank nodes', () => {
            var getBlanNodeResult = blankNodeTestGraph.match(null, "http://example.org/PredicateNamedBlank1", "http://example.org/ObjectNamedBlank1");
            chai.expect(getBlanNodeResult.getTriplesCount()).equal(1);
            var testedBlankNode = getBlanNodeResult.triples[0].subject;
            assertBlankNode(testedBlankNode);

            var blanNodeAsSubject = blankNodeTestGraph.match("_:" + testedBlankNode.nominalValue, null, null);
            chai.expect(blanNodeAsSubject.getTriplesCount()).equal(2);

            chai.expect(blanNodeAsSubject.triples[0].predicate.nominalValue).equal("http://example.org/PredicateNamedBlank1");
            chai.expect(blanNodeAsSubject.triples[0].object.nominalValue).equal("http://example.org/ObjectNamedBlank1");
            chai.expect(blanNodeAsSubject.triples[1].predicate.nominalValue).equal("http://example.org/PredicateNamedBlank2");
            chai.expect(blanNodeAsSubject.triples[1].object.nominalValue).equal("http://example.org/ObjectNamedBlank2");

            var blankNodeAsObject = blankNodeTestGraph.match(null, null, "_:" + testedBlankNode.nominalValue);
            chai.expect(blankNodeAsObject.getTriplesCount()).equal(1);
            chai.expect(blankNodeAsObject.triples[0].subject.nominalValue).equal("http://example.org/SubjectNamedBlank1");
            chai.expect(blankNodeAsObject.triples[0].predicate.nominalValue).equal("http://example.org/PredicateNamedBlank3");
        });

        it('shoud do work with anonymous blank node', () => {
            var result = blankNodeTestGraph.anyObject(prefix + "SubjectToBlank", prefix + "PredicateToBlank");
        });

        it('should work with blank nodes special syntax.', () => {
            var result = blankNodeTestGraph.match(prefix + "SpecialSubject", prefix + "SpecialPredicate", null);
            chai.expect(result.getTriplesCount()).equal(1);
            var blankNode = result.triples[0].object;
            assertBlankNode(blankNode);

            var blankNodeResult = blankNodeTestGraph.match("_:" + blankNode.nominalValue, null, null);
            chai.expect(blankNodeResult.getTriplesCount()).equal(2);

            chai.expect(blankNodeResult.triples[0].predicate.nominalValue).equal(prefix + "SpecialPredicate1");
            chai.expect(blankNodeResult.triples[0].object.nominalValue).equal(prefix + "SpecialObject1");

            chai.expect(blankNodeResult.triples[1].predicate.nominalValue).equal(prefix + "SpecialPredicate2");
            chai.expect(blankNodeResult.triples[1].object.nominalValue).equal(prefix + "SpecialObject2");
        });
    });

    describe('shoud work with collections', () => {
        var turtleFile = require("raw-loader!./resources/collectionTest.ttl");
        var collectionTestGraph = new TurtleGraphWrapper(turtleFile);

        it("should extract collection with more nodes", () => {
            var collectionStartNodeResult = collectionTestGraph.match(prefix + "Subject1", prefix + "Predicate1", null);
            chai.expect(collectionStartNodeResult.getTriplesCount()).equal(1);
            var collectionStartNode = collectionStartNodeResult.triples[0].object;
            var result = collectionTestGraph.getCollection("_:" + collectionStartNode.nominalValue);
            
            chai.expect(result.length).equal(3);
            chai.expect(result[0].nominalValue).equal("http://example.org/Object1");
            chai.expect(result[1].nominalValue).equal("http://example.org/Object2");
            chai.expect(result[2].nominalValue).equal("http://example.org/Object3");
        });

        it("should extract collection with one node", () => {
            var collectionStartNodeResult = collectionTestGraph.match(prefix + "Subject2", prefix + "Predicate2", null);
            chai.expect(collectionStartNodeResult.getTriplesCount()).equal(1);
            var collectionStartNode = collectionStartNodeResult.triples[0].object;
            var result = collectionTestGraph.getCollection("_:" + collectionStartNode.nominalValue);
            
            chai.expect(result.length).equal(1);
            chai.expect(result[0].nominalValue).equal("http://example.org/Object4");
        });

        it("should extract empty collection", () => {
            var result = collectionTestGraph.match(prefix + "Subject3", prefix + "Predicate3", null);
            chai.expect(result.getTriplesCount()).equal(1);
            chai.expect(result.triples[0].object).equal("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
        });        
    });
});