import { OntologyConcept } from "../../../src/Ontology/OntologyConcept";
import { AtomicClass } from '../../../src/Ontology/OntologyClass';
import { buildOntologyHierarchy } from '../../../src/Ontology/Algorithms/OntologyHierarchyBuilder';
import { createOntologyAssertionsFromTurtle } from "../../Utils/Utils"
import * as chai from 'chai';

describe('OntologyHierarchyBuilder', () => {
    var dbpediaOntologyAssertions = createOntologyAssertionsFromTurtle(require("raw-loader!../../TestData/Global/dbpediaOntology.ttl"));

    it('should create ontology hiearchy which tests strongly connected components.', () => {
        var nodeAtomicClass = ((nodeNumber: number) => new AtomicClass("http://example.org/test#Node" + nodeNumber.toString()));
        var extractNodesIri = ((concept: OntologyConcept) => concept.ontologyClasses.map(x => (<AtomicClass>x).iri).sort());
        var ontologyAssertions = createOntologyAssertionsFromTurtle(require('raw-loader!../../TestData/Ontology/Algorithms/stronglyConnectedComponents.owl.ttl'));

        var ontologyHiarchy = buildOntologyHierarchy(ontologyAssertions);

        var node0Concept = ontologyHiarchy.getConceptContainsOntologyClass(nodeAtomicClass(0));
        var node5Concept = ontologyHiarchy.getConceptContainsOntologyClass(nodeAtomicClass(5));
        var node7Concept = ontologyHiarchy.getConceptContainsOntologyClass(nodeAtomicClass(7));

        chai.expect(ontologyHiarchy.concepts.length).equal(3);
        chai.expect(extractNodesIri(node0Concept)).deep
            .equal([nodeAtomicClass(0).iri,
            nodeAtomicClass(1).iri,
            nodeAtomicClass(2).iri,
            nodeAtomicClass(3).iri,
            nodeAtomicClass(4).iri]);
        chai.expect(extractNodesIri(node5Concept)).deep
            .equal([nodeAtomicClass(5).iri,
            nodeAtomicClass(6).iri]);

        chai.expect(extractNodesIri(node7Concept)).deep
            .equal([nodeAtomicClass(7).iri]);

        chai.expect(ontologyHiarchy.subClassOfEdges.length).equal(3);
        chai.expect(ontologyHiarchy.existsSubclassOfEdgeConcept(node5Concept, node0Concept)).to.be.true;
        chai.expect(ontologyHiarchy.existsSubclassOfEdgeConcept(node7Concept, node0Concept)).to.be.true;
        chai.expect(ontologyHiarchy.existsSubclassOfEdgeConcept(node7Concept, node5Concept)).to.be.true;
    })

    it('should create large ontology hiararchy.', () => {
        var ontologyAssertions = dbpediaOntologyAssertions;
        var ontologyHiararchy = buildOntologyHierarchy(ontologyAssertions);
        chai.expect(ontologyHiararchy.concepts.length).greaterThan(1);
        chai.expect(ontologyHiararchy.subClassOfEdges.length).greaterThan(1);
    });
});