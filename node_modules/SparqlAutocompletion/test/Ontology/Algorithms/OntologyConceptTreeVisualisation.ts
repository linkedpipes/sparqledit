import { OntologyConcept, OntologyHierarchy } from '../../../src/Ontology/OntologyHierarchy';
class Node {
    public children: Node[] = [];
    constructor(public value: OntologyConcept) {
        // empty
    }
}

export class OntologyConceptTreeVisualisation {
    constructor(private ontologyHierarchy: OntologyHierarchy) {
        // empty 
    }

    private buildTree(ontologyConcept: OntologyConcept) {
        var superClassConcepts = this.ontologyHierarchy.subClassOfEdges
            .filter(x => x.subsetClassConcept == ontologyConcept)
            .map(x => x.superClassConcept);

        var resultNode: Node = new Node(ontologyConcept);
        resultNode.children = superClassConcepts.map(x => this.buildTree(x));
        return resultNode;
    }

    private writeTree(node: Node, depth: number): string {
        var value = node.value.ontologyClasses.map(x => x.getText()).join("; ");
        var oneSpace = "    ";
        var space = "";
        for (var i = 0; i < depth; i++) {
            space += oneSpace;
        }

        node.children.forEach(children => {
            value += "\r\n" + space + this.writeTree(children, depth + 1);
        });
        return value;
    }

    visualise(ontologyConcept: OntologyConcept) {
        var root = this.buildTree(ontologyConcept);
        return this.writeTree(root, 1);
    }
}