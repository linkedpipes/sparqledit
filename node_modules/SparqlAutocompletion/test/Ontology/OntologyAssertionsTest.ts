import { OntologyAssertions } from '../../src/Ontology/OntologyAssertions';
import { AtomicClass } from '../../src/Ontology/OntologyClass';

import * as chai from 'chai';

describe('OntologyAssertions', () => {
    it('should correctlly work with classes.', () => {
        var ontologyAssertions = new OntologyAssertions();
        var c1 = new AtomicClass('http://example.org/c1');
        var c2 = new AtomicClass('http://example.org/c2');

        ontologyAssertions.addOrGetClassIndex(c1);
        chai.expect(ontologyAssertions.findClass(c1)).to.equal(0);
        chai.expect(ontologyAssertions.findClass(c2)).to.equal(-1);

        ontologyAssertions.addOrGetClassIndex(c2);
        chai.expect(ontologyAssertions.findClass(c1)).to.equal(0);
        chai.expect(ontologyAssertions.findClass(c2)).to.equal(1);

        var c1Index = ontologyAssertions.addOrGetClassIndex(c2);
        chai.expect(c1Index).to.equal(1);
        chai.expect(ontologyAssertions.findClass(c1)).to.equal(0);
        chai.expect(ontologyAssertions.findClass(c2)).to.equal(1);
    });

    it('should correctlly work with subClasses.', () => {
        var ontologyAssertions = new OntologyAssertions();
        var c1 = new AtomicClass('http://example.org/c1');
        var c2 = new AtomicClass('http://example.org/c2');
        var c3 = new AtomicClass('http://example.org/c2');
        var c4 = new AtomicClass('http://example.org/c4');

        ontologyAssertions.addSubclassEdge(c1, c2);
        chai.expect(ontologyAssertions.existSubclassEdge(0, 1)).to.be.true;
        chai.expect(ontologyAssertions.existSubclassEdgeOntologyClass(c1, c2)).to.be.true;
        chai.expect(ontologyAssertions.existSubclassEdgeOntologyClass(c2, c3)).to.be.false;
        chai.expect(ontologyAssertions.existSubclassEdge(0, 2)).to.be.false;

        ontologyAssertions.addSubclassEdge(c2, c3);
        chai.expect(ontologyAssertions.existSubclassEdgeOntologyClass(c2, c3)).to.be.true;

        ontologyAssertions.addEquivalenceEdge(c3, c4);
        chai.expect(ontologyAssertions.existSubclassEdgeOntologyClass(c3, c4)).to.be.true;
        chai.expect(ontologyAssertions.existSubclassEdgeOntologyClass(c4, c3)).to.be.true;
    });

    it('do some labels', () => {
        var ontologyAssertions;
    });

    describe('Properties', () => {
        var p1 = 'http://example.org/p1';
        var p2 = 'http://example.org/p2';
        var p3 = 'http://example.org/p3';
        var p4 = 'http://example.org/p4';
        var c1 = new AtomicClass('http://example.org/c1');
        var c2 = new AtomicClass('http://example.org/c2');
        var c3 = new AtomicClass('http://example.org/c3');
        var c4 = new AtomicClass('http://example.org/c4');

        it('should be correctlly found by name.', () => {
            var ontologyAssertions = new OntologyAssertions();
            ontologyAssertions.addDomain(p1, c1);
            chai.expect(ontologyAssertions.findPropertyByName(p2)).to.be.null;

            var p1Founded = ontologyAssertions.findPropertyByName(p1);
            chai.expect(p1Founded).not.to.be.null;
            chai.expect(p1Founded.domains).deep.equal([c1]);
            chai.expect(p1Founded.ranges).deep.equal([]);

            ontologyAssertions.addRange(p1, c2);
            var p1Founded = ontologyAssertions.findPropertyByName(p1);
            chai.expect(p1Founded).not.to.be.null;
            chai.expect(p1Founded.domains).to.deep.equal([c1]);
            chai.expect(p1Founded.ranges).to.deep.equal([c2]);
        });

        it('should not found non-existing property.', () => {
            var ontologyAssertions = new OntologyAssertions();
            ontologyAssertions.addDomain(p1, c1);
            ontologyAssertions.addRange(p1, c2);
            var p2Founded = ontologyAssertions.findPropertyByName(p2);
            chai.expect(p2Founded).to.be.null;
        });

        it('should be correctlly found by domain.', () => {
            var ontologyAssertions = new OntologyAssertions();

            ontologyAssertions.addDomain(p1, c1);
            ontologyAssertions.addDomain(p2, c1);
            ontologyAssertions.addDomain(p4, c3);
            ontologyAssertions.addRange(p3, c2);

            var foundedPropertyNames1 = ontologyAssertions.findPropertiesByDomain(c1).map(x => x.name);
            chai.expect(foundedPropertyNames1).to.deep.equal([p1, p2]);

            var foundedPropertyNames2 = ontologyAssertions.findPropertiesByDomain(c2).map(x => x.name);
            chai.expect(foundedPropertyNames2).to.deep.equal([]);
        });

        it('shoud correctly work with multiple domains and ranges.', () => {
            var ontologyAssertions = new OntologyAssertions();

            ontologyAssertions.addDomain(p1, c1);
            ontologyAssertions.addRange(p1, c2);
            ontologyAssertions.addDomain(p1, c3);
            ontologyAssertions.addRange(p1, c4);

            ontologyAssertions.addDomain(p2, c1);
            ontologyAssertions.addRange(p2, c2);

            var foundedProperties1 = ontologyAssertions.findPropertiesByDomain(c1);
            chai.expect(foundedProperties1).length(2);

            var property1 = foundedProperties1[0];
            chai.expect(property1.name).equal(p1);
            chai.expect(property1.domains).to.deep.equal([c1, c3]);
            chai.expect(property1.ranges).to.deep.equal([c2, c4]);

            var property2 = foundedProperties1[1];
            chai.expect(property2.name).equal(p2);
            chai.expect(property2.domains).to.deep.equal([c1]);
            chai.expect(property2.ranges).to.deep.equal([c2]);

            var foundedProperties2 = ontologyAssertions.findPropertiesByDomain(c3);
            chai.expect(foundedProperties2).length(1);

            var property3 = foundedProperties2[0];
            chai.expect(property3.name).equal(p1);
            chai.expect(property3.domains).to.deep.equal([c1, c3]);
            chai.expect(property3.ranges).to.deep.equal([c2, c4]);
        });
    })
});