import { TurtleGraphWrapper } from '../src/GraphTools/TurtleGraphWrapper';
import { OntologyHiearchyBuilder } from '../src/Ontology/Algorithms/OntologyHiearchyBuilder';
import { OntologyAssertionsBuilder } from '../src/Ontology/Algorithms/OntologyAssertionBuilder';
import { OntologyAutocompleteSubProvider } from '../src/Autocompletition/SubProviders/OntologyAutocompleteSubProvider';
import { Block, NodeType } from '../src/Autocompletition/Query/Query';
import * as chai from 'chai';
import { ERSParser } from 'ERSParser';
import { SparqlLanguageServerSettings } from 'SparqlAutocompletion/src/Autocompletition/SparqlLanguageServerSettings';
var rdf = require('rdf');

var ontologyAssertionsBuilder = new OntologyAssertionsBuilder();
var ontologyHiarchyBuilder = new OntologyHiearchyBuilder();

function parseQuery(queryContent: string) {
    var parser = new ERSParser();
    return parser.parse(queryContent).query;
}

function createOntologyHiearchyFromContent(fileContent: string) {
    var ontologyAssertionsResult = ontologyAssertionsBuilder.buildOntologyAsertions(new TurtleGraphWrapper(fileContent));
    var ontologyHiearchy = ontologyHiarchyBuilder.createOntologyHiearchy(ontologyAssertionsResult.ontologyAssertions);
    return ontologyHiearchy;
}

describe('AutocompleteProvider', () => {
    it('should do simple autocomplettion', () => {
        var hiearchySchemaContent = require('raw-loader!./autocompleteData/schema.ttl');
        var queryContent = require('raw-loader!./autocompleteData/query.sparql');

        var ontologyHierachy = createOntologyHiearchyFromContent(hiearchySchemaContent);
        var autocompleteProvider = new OntologyAutocompleteSubProvider(ontologyHierachy, new SparqlLanguageServerSettings({}));
        var query = parseQuery(queryContent);
        var autocompleteResult = autocompleteProvider.provideAutocompleteItems(query);
        var end = '';
    })

    describe('Block', () => {
        it('should parse different kinds of nodes.', () => {
            var queryContent = require('raw-loader!./autocompleteData/queryBlock.sparql');

            var query: any = parseQuery(queryContent);
            var block = new Block(query.where[0].triples);
            var objects = block.triples.map(x =>
                ({
                    type: NodeType[x.object.type],
                    value: x.object.value
                }));
        })
    });
})