import { AtomicClass, UnknownClass, IntersectionClass, RestrictionClass, UnionClass, ComplementClass } from "../../../src/Ontology/OntologyClass";
import { Serializer } from "../../../src/Serialization/Serializer";
import * as chai from "chai";

var typeSerializerName = "OntologyClass";
describe("OntologyClassSerializer", () => {
    it("should serialize and deserialize atomic class", () => {
        var testIri = "http://example.org/test";
        var atomicClass = new AtomicClass(testIri);
        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, atomicClass);
        var deserialized = <AtomicClass>serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserialized.iri).equal(testIri);
    });

    it("should serialize and deserialize restriction class", () => {
        var propertyIri = "http://example.org/test";
        var restrictionClass = new RestrictionClass(propertyIri);
        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, restrictionClass);
        var deserialized = <RestrictionClass>serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserialized.onProperty).equal(propertyIri);
    });

    it("should serialize and deserialize complement class", () => {
        var classIri = "http://example.org/test";
        var restrictionClass = new ComplementClass(new AtomicClass(classIri));
        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, restrictionClass);
        var deserialized = <ComplementClass>serializer.deserialize(typeSerializerName, serialized);
        chai.expect((<AtomicClass>deserialized.value).iri).equal(classIri);
    });

    it("should serialize and deserialize unknown class", () => {
        var testNodeValue = "http://example.org/test";
        var unknownClass = new UnknownClass(testNodeValue);
        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, unknownClass);
        var deserialized = <UnknownClass>serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserialized.nodeValue).equal(testNodeValue);
    });

    it("should serialize and deserialize union class", () => {
        var ac1 = new AtomicClass("http://example.org/test1");
        var ac2 = new AtomicClass("http://example.org/test2");
        var ac3 = new AtomicClass("http://example.org/test3");
        var ac4 = new AtomicClass("http://example.org/test4");

        var unc1 = (new UnionClass())
            .addClass(ac1)
            .addClass(ac2).addClass(
                new UnionClass()
                    .addClass(ac3)
                    .addClass(ac4)
            );

        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, unc1);
        var deserialized = serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserialized).deep.equal(unc1);
        chai.expect(deserialized.getText()).equal(unc1.getText());
    });

    it("should serialize and deserialize intersection class", () => {
        var ac1 = new AtomicClass("http://example.org/test1");
        var ac2 = new AtomicClass("http://example.org/test2");
        var ac3 = new AtomicClass("http://example.org/test3");
        var ac4 = new AtomicClass("http://example.org/test4");

        var inc1 = (new IntersectionClass())
            .addClass(ac1)
            .addClass(ac2).addClass(
                new IntersectionClass()
                    .addClass(ac3)
                    .addClass(ac4)
            );

        var serializer = new Serializer();
        var serialized = serializer.serialize(typeSerializerName, inc1);
        var deserialized = serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserialized).deep.equal(inc1);
        chai.expect(deserialized.getText()).equal(inc1.getText());
    });

});