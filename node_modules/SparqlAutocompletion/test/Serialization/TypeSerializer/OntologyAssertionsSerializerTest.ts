import { OntologyAssertions } from '../../../src/Ontology/OntologyAssertions';
import { OntologyAssertionsBuilder } from '../../../src/Ontology/Algorithms/OntologyAssertionBuilder';
import { TurtleGraphWrapper } from '../../../src/GraphTools/TurtleGraphWrapper';
import { Serializer } from '../../../src/Serialization/Serializer';

import * as chai from 'chai';

var typeSerializerName = "OntologyAssertions";

function createOntologyAsssertions(fileContent: string) {
    var graph = new TurtleGraphWrapper(fileContent);
    var ontologyAssertions = (new OntologyAssertionsBuilder()).buildOntologyAsertions(graph);
    return ontologyAssertions;
}

describe('OntologyAssertionsSerializerTest', () => {
    it('should serialize and deserialize with simple assertions', () => {
        var ontologyAssertionsResult = createOntologyAsssertions(require("raw-loader!./resources/assertionsTest.ttl"));
        var serializer = new Serializer();
        var serialized = serializer.serializeOntologyAssertions(ontologyAssertionsResult.ontologyAssertions);
        var deserializedOntologyAssertions = <OntologyAssertions>serializer.deserialize(typeSerializerName, serialized);
        chai.expect(deserializedOntologyAssertions).deep.equal(ontologyAssertionsResult.ontologyAssertions);
    });

    it('should serialize and deserialize with large assertions', () => {
        // var ontologyAssertionsResult = createOntologyAsssertions(require("raw-loader!../../ontologies/dbpedia.ttl"));
        // var serializer = new Serializer();
        // var serialized = serializer.serializeOntologyAssertions(ontologyAssertionsResult.ontologyAssertions);
        // var deserializedOntologyAssertions = <OntologyAssertions>serializer.deserialize(typeSerializerName, serialized);
        // chai.expect(deserializedOntologyAssertions).deep.equal(ontologyAssertionsResult.ontologyAssertions);
    });
});