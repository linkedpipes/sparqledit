import { QueryClassInferencer } from '../../src/Autocompletition/Inference/QueryClassInferencer';
import { createOntologyAssertionsFromTurtle } from "../Utils/Utils"
import * as chai from 'chai';
import { ERSParser } from "ERSParser";
import { isRegExp } from 'util';
import { AtomicClass } from '../../src';

function inferClasses(ontologyAssertionsContent: string, queryContent: string) {
    var ontologyAssertions = createOntologyAssertionsFromTurtle(ontologyAssertionsContent);
    var parser = new ERSParser();
    var query = parser.parse(queryContent).query;
    var ontologyInferencer = new QueryClassInferencer(ontologyAssertions);
    var result = ontologyInferencer.inferClasses(query);
    return result;
}

describe('QueryClassInferencer', () => {
    it('should run infer class from rdf:type.', () => {
        var result = inferClasses(
            require("raw-loader!../TestData/Inference/QueryInferencer/ontology.ttl"),
            require("raw-loader!../TestData/Inference/QueryInferencer/query1.sparql"))

        chai.expect(result.getVariable("a").possibleClasses.length).equal(1);
    });

    it('should mark isRdfType variable.', () => {
        var result = inferClasses(
            require("raw-loader!../TestData/Inference/QueryInferencer/ontology.ttl"),
            require("raw-loader!../TestData/Inference/QueryInferencer/query2.sparql"))

        chai.expect(result.getVariable("b").isRdfTypeObject).to.be.true;
    });

    it('should infer subject variable name.', () => {
        var result = inferClasses(
            require("raw-loader!../TestData/Inference/QueryInferencer/ontology.ttl"),
            require("raw-loader!../TestData/Inference/QueryInferencer/query3.sparql"))

        chai.expect(result.getVariable("b").subjectVariableName).equal("d");
    });

    it('should infer variable from property.', () => {
        var result = inferClasses(
            require("raw-loader!../TestData/Inference/QueryInferencer/ontology.ttl"),
            require("raw-loader!../TestData/Inference/QueryInferencer/query4.sparql"));

        chai.expect(result.getVariable("person").possibleClasses).to.deep.equal([new AtomicClass("http://www.example.com/Person")]);
        chai.expect(result.getVariable("birthPlace").possibleClasses).to.deep.equal([new AtomicClass("http://www.example.com/Place")]);
        chai.expect(result.getVariable("location").possibleClasses).to.deep.equal([new AtomicClass("http://www.w3.org/2001/XMLSchema#string")]);
    });

    it('Shoudl', () => {
        var result = inferClasses(
            require("raw-loader!../TestData/Inference/QueryInferencer/ontology.ttl"),
            require("raw-loader!../TestData/Inference/QueryInferencer/query5.sparql"));

        chai.expect(result.getVariable("sportPerson").possibleClasses).to.deep.equal([new AtomicClass("http://www.example.com/SportPerson"),new AtomicClass("http://www.example.com/Person")]);
        chai.expect(result.getVariable("birthPlace").possibleClasses).to.deep.equal([new AtomicClass("http://www.example.com/Place")]);
        chai.expect(result.getVariable("sport").possibleClasses).to.deep.equal([new AtomicClass("http://www.w3.org/2001/XMLSchema#string")]);
    });
});