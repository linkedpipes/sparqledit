import { BlockFinder } from "../../src/Autocompletition/Inference/BlockFinder"
import { ERSParser } from "ERSParser";

import * as fs from "fs";
import * as chai from "chai";

function findBlocks(testCaseFileName: string) {
    var blockFinder = new BlockFinder();
    var path = `../${__dirname}/BlockFinderData/${testCaseFileName}`;
    var queryText = fs.readFileSync(path).toString();
    var query = parseQuery(queryText).query;
    var result = blockFinder.findBlocks(query);
    return result;
}

function parseQuery(queryText: string) {
    var parser = new ERSParser();
    return parser.parse(queryText);
}

describe("BlockFinder", () => {
    it("should pass test1.sparql", () => {
        var result = findBlocks('test1.sparql');
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(1);
    });

    it("should pass test2.sparql", () => {
        var result = findBlocks('test2.sparql');
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(2);
    });

    it("should pass test3.sparql", () => {
        var result = findBlocks('test3.sparql');
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(2);
    });

    it("should pass test4.sparql", () => {
        var result = findBlocks('test4.sparql');
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(2);
    });

    it("should pass test5.sparql", () => {
        var result = findBlocks('test5.sparql');
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(2);
    });

    it("should pass json test.", () => {
        var blockFinder = new BlockFinder();
        var query = {
            nullProperty: <any>null,
            intProperty: 3,
            property1: {
                subProperty1: {
                    subProperty2: {
                        type: "notBgp"
                    },
                    subProperty3: [{
                        type: "bgp",
                        bgpProperty1: "value1"
                    }],
                    subProperty4: {
                        type: "bgp",
                        bgpProperty2: "value2"
                    }
                }
            }
        }
        var result = blockFinder.findBlocks(query);
        chai.expect(result.tripleBlockNodes).not.null;
        chai.expect(result.tripleBlockNodes.length).equal(2);
        chai.expect(result.tripleBlockNodes[0].bgpProperty1).equal('value1');
        chai.expect(result.tripleBlockNodes[1].bgpProperty2).equal('value2');
    });
}); 