import { TriplesExplorer } from "../../src/Autocompletition/Inference/TriplesExplorer"
import { ERSParser } from "ERSParser";

import * as fs from "fs";
import * as chai from "chai";

function findTriples(testCaseFileName: string) {
    var triplesExplorer = new TriplesExplorer();
    var path = `../${__dirname}/TriplesExplorerData/${testCaseFileName}`;
    var queryText = fs.readFileSync(path).toString();
    var query = parseQuery(queryText).query;
    var result = triplesExplorer.findTriples(query);
    return result;
}

function parseQuery(queryText: string) {
    var parser = new ERSParser();
    return parser.parse(queryText);
}

describe("TriplesExplorer", () => {
    it("should pass test1.sparql", () => {
        var triples = findTriples('test1.sparql');
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(1);
        chai.expect(triples[0].subject.originalValue).equal('?a');
        chai.expect(triples[0].predicate.originalValue).equal('?b');
        chai.expect(triples[0].object.originalValue).equal('?c');
    });

    it("should pass test2.sparql", () => {
        var triples = findTriples('test2.sparql');
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(4);
    });

    it("should pass test3.sparql", () => {
        var triples = findTriples('test3.sparql');
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(3);
    });

    it("should pass test4.sparql", () => {
        var triples = findTriples('test4.sparql');
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(2);
    });

    it("should pass test5.sparql", () => {
        var triples = findTriples('test5.sparql');
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(2);
    });

    it("should pass json test.", () => {
        var triplesExplorer = new TriplesExplorer();
        var query = {
            nullProperty: <any>null,
            intProperty: 3,
            evilProperty: {
                type: "bgp",
                triples: <any>null
            },
            property1: {
                subProperty1: {
                    subProperty2: {
                        type: "notBgp"
                    },
                    subProperty3: [{
                        type: "bgp",
                        triples: [{
                            subject: "subject1",
                            predicate: "predicate1",
                            object: "object1"
                        }, {
                            type: "bgp",
                            triples: [{
                                subject: "subject2",
                                predicate: "predicate2",
                                object: "object2"
                            }]
                        }]
                    }],
                    subProperty4: {
                        type: "bgp",
                        triples: [{
                            subject: "subject3",
                            predicate: "predicate3",
                            object: "object3"
                        }]
                    }
                }
            }
        }
        var triples = triplesExplorer.findTriples(query);
        chai.expect(triples).not.null;
        chai.expect(triples.length).equal(3);
    });
}); 