import { MonacoEditorProvider } from './providers/MonacoEditorProvider';
import { ErrorMessageProvider } from './providers/ErrorMessageProvider';
import { PluginManagerFactory } from './plugins/PluginManagerFactory';
import { PluginManager } from './plugins/PluginManager';
import { EditorSettingsService } from './service/EditorSettingsService';
import { EditorSettingsStore } from './store/EditorSettingsStore';
import { EditorSettingsComponent } from "./components/EditorSettingsComponent"
import { MonacoEditorWrapper } from "./components/MonacoEditorWrapper"
import { ParsingService, ParserResult, ParserResultStore } from "./service/ParsingService";
import * as React from "react";
import { observer } from "mobx-react";
import DevTools from 'mobx-react-devtools';
import { observable } from "EditorComponent/node_modules/mobx/lib/mobx";
import { ParserLogger } from "./components/ParserLogger";
import RaisedButton from 'material-ui/RaisedButton';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import { ParserVisualiser } from "./components/ParserVisualiser";
import { ParserVisualisingService, IParserVisualisingServiceResult } from "./service/ParserVisualisingService"
import { ERSParserDebuggable } from "ERSParser";
import { ErrorConsole } from "./components/ErrorConsole";
import { ErrorCheckPlugin } from "./plugins/ErrorCheckPlugin/ErrorCheckPlugin";
import { ParserErrorStore } from "./store/ParserErrorsStore";
import { PropertyAutocompleteComponent } from "./components/PropertyAutocompleteComponent";
import { ToolRenderer } from "./components/ToolRenderer";
import { ToolStore, Tool } from "./store/ToolStore";
var injectTapEventPlugin = require("react-tap-event-plugin");

@observer
export class EditorApp extends React.Component<any, any> {
    private toolStore = new ToolStore();
    private editorSettingsService = new EditorSettingsService();
    private editorSettingsStore: EditorSettingsStore;
    private monacoEditor: monaco.editor.IStandaloneCodeEditor;
    private pluginManager: PluginManager;
    private errorMessageProvider: ErrorMessageProvider;
    private parserErrorStore: ParserErrorStore;

    constructor() {
        super();
        injectTapEventPlugin();
        this.editorSettingsStore = new EditorSettingsStore();
        this.init();
    }

    private init() {
        this.editorSettingsStore = this.editorSettingsService.createAndLoadSettingsFromCookies();
        var pluginManagerFactory = new PluginManagerFactory();
        this.pluginManager = pluginManagerFactory.createPluginManager();
        this.parserErrorStore = new ParserErrorStore();
        this.errorMessageProvider = new ErrorMessageProvider(this.parserErrorStore);

        // Hack how to inject message provider
        (this.pluginManager.plugins[2] as ErrorCheckPlugin).setErrorMessageProvider(this.errorMessageProvider);
        this.toolStore.tools.push(new Tool(this.temporarySidePaneContent()));
    }

    setMonacoEditor(monacoEditor: monaco.editor.IStandaloneCodeEditor) {
        this.monacoEditor = monacoEditor;
        this.pluginManager.initPlugins(monacoEditor, { editorSettingsStore: this.editorSettingsStore });
        this.errorMessageProvider.init(monacoEditor);
    }

    getEditorContentAndCursorPosition() {
        var model = this.monacoEditor.getModel()
        return {
            content: model.getValue(),
            position: model.getOffsetAt(this.monacoEditor.getPosition())
        }
    }

    getEditorContent() {
        console.log(this.monacoEditor);
        return this.monacoEditor.getModel().getValue();
    }

    temporarySidePaneContent() {
        return <div>
            <PropertyAutocompleteComponent
                getEditorContentAndCursorPosition={this.getEditorContentAndCursorPosition.bind(this)}
                editorSettingsStore={this.editorSettingsStore} />
            <ParserLogger
                editorSettingsStore={this.editorSettingsStore}
                getEditorContent={this.getEditorContent.bind(this)} />
        </div>
    }

    render() {
        return (<MuiThemeProvider>
            <ToolRenderer toolStore={this.toolStore}>
                <MonacoEditorWrapper setMonacoEditor={this.setMonacoEditor.bind(this)} />
                <ErrorConsole parserErrorStore={this.parserErrorStore} />
                <EditorSettingsComponent editorSettingsStore={this.editorSettingsStore} />
                <ParserVisualiser ediorSettingsStore={this.editorSettingsStore} />
            </ToolRenderer>
        </MuiThemeProvider >);
    }
}