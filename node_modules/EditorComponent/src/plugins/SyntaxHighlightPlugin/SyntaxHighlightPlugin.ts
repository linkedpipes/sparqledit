import { IEditorPluginApi } from '../EditorPluginApi';
import { IPlugin } from '../IPlugin';
import { ERSParser } from "ERSParser"

class SparqlMonarchDefinition implements monaco.languages.IMonarchLanguage {
	keywords = ["add", "all", "as", "asc", "ask", "base", "bind", "by", "clear", "construct", "copy", "create",
		"default", "delete", "desc", "describe", "distinct", "drop", "exists",
		"filter", "from", "graph", "group", "having", "in", "insert", "data", "into", "limit", "load",
		"minus", "move", "named", "not", "offset", "optional", "order", "prefix", "reduced", "select", "separator",
		"service", "silent", "to", "undef", "union", "using", "values", "where", "with",
	];

	keywordsUpperCase: string[];

	constructor() {
		this.keywordsUpperCase = this.keywords.map(x => x.toUpperCase());
	}

	pn_chars_base = /[A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF]/;

	pn_chars_u = /(?:(@pn_chars_base)|"_")/;;

	varname = /((@pn_chars_u)|[0-9])((@pn_chars_u)|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*/;

	tokenizer: { [name: string]: monaco.languages.IMonarchLanguageRule[]; } = {
		root: [
			[/[\?\$](@varname)/, "variable"],
			[/[a-zA-z0-9]+/, {
				cases: {
					'@keywords': "keyword",
					'@keywordsUpperCase': "keyword",
					"@default": "identifier"
				}
			}],
			{ include: '@comment' },
		],
		comment: [
			[/#[^\n\r]*/, 'comment']
		]
	};


	ignoreCase: true;
	defaultToken: "INVALID";
	tokenPostfix: "";
}

export class SyntaxHighlightPlugin implements IPlugin {
	init(editorPluginApi: IEditorPluginApi): void {
		var monacoEditor = editorPluginApi.getMonacoEditor();
		var sparqlMonarchDefinition = new SparqlMonarchDefinition();
		monaco.languages.setMonarchTokensProvider('sparql', sparqlMonarchDefinition);

		monaco.languages.setLanguageConfiguration("sparql", {
			autoClosingPairs: [{ open: "{", close: "}" },
			{ open: "(", close: ")" }],
			brackets: [["{", "}"],
			["(", ")"]],
			wordPattern: /[a-zA-Z<>\:\/\?\.]+/g
		});
		monaco.editor.defineTheme('sparqlTheme', {
			base: 'vs',
			inherit: true,
			rules: [
				{ token: 'variable', foreground: 'BBA600' },
				{ token: 'comment', foreground: 'BBA6FF' },
			]
		});
		monacoEditor.updateOptions({ theme: 'sparqlTheme' });
	}
}