import { ErrorMessageProvider } from '../../providers/ErrorMessageProvider';
import { IPlugin, IEditorPluginApi } from '../IPlugin';
import { ERSParser } from "ERSParser"

class SparqlMonarchDefinition implements monaco.languages.IMonarchLanguage {

	keywords = ["cursor", "base", "prefix", "select", "distinct", "reduced", "as", "construct", "where", "describe", "ask",
		"from", "named", "group", "by", "having", "order", "asc", "desc", "limit", "offset", "values", "load", "silent",
		"into", "clear", "drop", "create", "add", "to", "move", "copy", "insert", "delete", "delete", "with", "delete", "insert",
		"using", "default", "graph", "all", "optional", "service", "bind", "undef", "minus", "union", "filter", "a", "in", "not",
		"bound", "bnode", "concat", "coalesce", "if", "regex", "substr", "replace", "exists", "count", "group_concat",
		"separator", "true", "false",
	];
	keywordsUpperCase = ["CURSOR", "BASE", "PREFIX", "SELECT", "DISTINCT", "REDUCED", "AS", "CONSTRUCT", "WHERE", "DESCRIBE", "ASK",
		"FROM", "NAMED", "GROUP", "BY", "HAVING", "ORDER", "ASC", "DESC", "LIMIT", "OFFSET", "VALUES", "LOAD", "SILENT",
		"INTO", "CLEAR", "DROP", "CREATE", "ADD", "TO", "MOVE", "COPY", "INSERT", "DELETE", "DELETE", "WITH", "DELETE", "INSERT",
		"USING", "DEFAULT", "GRAPH", "ALL", "OPTIONAL", "SERVICE", "BIND", "UNDEF", "MINUS", "UNION", "FILTER", "A", "IN", "NOT",
		"BOUND", "BNODE", "CONCAT", "COALESCE", "IF", "REGEX", "SUBSTR", "REPLACE", "EXISTS", "COUNT", "GROUP_CONCAT",
		"SEPARATOR", "TRUE", "FALSE",
	];
	tokenizer: { [name: string]: monaco.languages.IMonarchLanguageRule[]; } = {
		root: [
			[/[\?\$][a-zA-z0-9]+/, "variable"],
			[/[a-zA-z0-9]+/, {
				cases: {
					'@keywords': "keyword",
					'@keywordsUpperCase': "keyword",
					"@default": "identifier"
				}
			}]
		]
	};

	ignoreCase: true;
	defaultToken: "INVALID";
	// brackets: monaco.languages.IMonarchLanguageBracket[];
	// start: string;
	tokenPostfix: "";
}

export class SyntaxHighlightPlugin implements IPlugin {
	init(monacoEditor: monaco.editor.IStandaloneCodeEditor, editorPluginApi: IEditorPluginApi): void {
		var sparqlMonarchDefinition = new SparqlMonarchDefinition();
		monaco.languages.setMonarchTokensProvider('sparql', sparqlMonarchDefinition);
		// Define a new theme that constains only rules that match this language
		monaco.editor.defineTheme('sparqlTheme', {
			base: 'vs',
			inherit: false,
			rules: [
				{ token: 'variable', foreground: 'BBA600' },
				{ token: 'keyword', foreground: '0040FF' }
			]
		});
		monacoEditor.updateOptions({ theme: 'sparqlTheme' });
	}
}