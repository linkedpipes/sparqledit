import * as _ from "lodash";
import { ERSParserDebuggable, ItemSet } from "ERSParser";

export interface IParserVisualisingServiceResult {
    itemSets: ItemSet[];
    table: { [key: number]: Action[] };
}

export abstract class Action {
    constructor(public symbol: string) {

    }

    public abstract get actionType(): string;
}

export class GotoAction extends Action {

    constructor(symbol: string, public state: string) {
        super(symbol);
    }

    public get actionType() {
        return "goto";
    }

}


export class ShiftAction extends Action {
    constructor(symbol: string, public state: string) {
        super(symbol);
    }

    public get actionType() {
        return "shift";
    }

}

export class ReduceAction extends Action {
    constructor(symbol: string, public production: string) {
        super(symbol);
    }

    public get actionType() {
        return "reduce";
    }
}

export class ParserVisualisingService {

    run(parser: ERSParserDebuggable): IParserVisualisingServiceResult {
        var result: IParserVisualisingServiceResult = {
            itemSets: parser.itemSets,
            table: this.mapTableToActions(parser)
        };
        return result;
    }

    getItemSetReferences(itemSets: ItemSet[], id: number) {
        var result = itemSets
            .filter(function (x) {
                return _.includes(x.Transitions, id);
            })
            .map(function (x) {
                return x.Id;
            });
        return result;
    }

    createInverseSymbolTable(parser: ERSParserDebuggable) {
        var symbolTable = parser.symbols_;
        var inverseSymbolTable: { [key: number]: string } = {};
        Object.keys(symbolTable).forEach(x => {
            inverseSymbolTable[symbolTable[x]] = x;
        });
        return inverseSymbolTable;
    }

    mapTableToActions(parser: ERSParserDebuggable) {
        var table = parser.table;
        var symbolTable = this.createInverseSymbolTable(parser);
        var newTable: { [key: number]: Action[] } = {};

        Object.keys(table).forEach((rowId) => {
            var row = table[<any>rowId];
            var newRow: Action[] = Object.keys(row).map(function (key) {
                var action = row[<any>key];
                var symbol = symbolTable[<any>key];
                if (typeof action == "number") {
                    // could be better
                    return new GotoAction(symbol, <any>action);
                }

                if (action[0] == 1) {
                    // could be better
                    return new ShiftAction(symbol, <any>action[1]);
                }
                else if (<any>action == 3) {
                    return new ShiftAction(symbol, "accept");
                }

                var productionId = action[1];
                var production = parser.productions_[productionId];

                return new ReduceAction(symbol, productionId == 0 ? "accept" : symbolTable[production[0]]);
            });
            newTable[<any>rowId] = newRow;
        });
        return newTable;
    }
}
