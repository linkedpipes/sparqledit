import { ParserResult, ParserResultStore } from "../ParsingService";
import { JsonFormatter } from "../../../../components/utils/JsonFormatter"
import * as React from "react";
import { observer } from "mobx-react";
import { ParserLoggerStackView } from "./ParserLoggerStackView";
import { ParserLoggerStateStackView } from "./ParserLoggerStateStackView";
import { Paper, List, ListItem, Card, CardHeader, CardText } from "material-ui"

export interface ParserLoggerStateProps {
    parserResultStore: ParserResultStore;
}

@observer
export class ParserLoggerStates extends React.Component<ParserLoggerStateProps, any> {
    private showStack: boolean;
    private colorRed = "ffcdd2";
    private colorIndigo = "c5cae9";
    private colorYellow = "fff9c4";

    createStateCard(index: number, color: string, headerElement: JSX.Element, bodyElement: JSX.Element) {
        return (
            <Card key={index}>
                <CardHeader style={{ backgroundColor: color }} actAsExpander={true}>
                    {headerElement}
                </CardHeader>
                <CardText expandable={true}>
                    {bodyElement}
                </CardText>
            </Card>);
    }

    shiftStep(step: any, index: number) {
        return this.createStateCard(index, this.colorRed,
            <span><b>Shift</b>:[{step.terminal}] {step.state}</span>,
            <Paper><List>
                <ListItem>Value: {step.text}</ListItem>
                <ListItem>Lookahead: Normal ({step.symbol}) Error({step.preErrorSymbol})</ListItem>
                <ListItem>Cstack: <JsonFormatter objectToJson={step.cstack} /></ListItem>
                <ListItem><ParserLoggerStackView stack={step.stack} /></ListItem>
                {!this.showStack ? null : <ListItem><ParserLoggerStateStackView stateStack={step.allstack} /></ListItem>}
            </List></Paper>
        )
    }

    reduceStep(step: any, index: number) {
        return this.createStateCard(index, this.colorIndigo,
            <span><b>Reduce</b>: [ {step.nonterminal} ] {step.state}</span>,
            <List>
                <ListItem>Prereduce: <JsonFormatter objectToJson={step.prereduce} /></ListItem>
                <ListItem>Lookahead: Normal ({step.symbol}) Error ({step.preErrorSymbol})</ListItem>
                <ListItem>Cstack: <JsonFormatter objectToJson={step.cstack} /></ListItem>
                <ListItem>Prereduce loc: <JsonFormatter objectToJson={step.prereduceLoc} /> </ListItem>
                <ListItem>Productions: <JsonFormatter objectToJson={step.productions} /> </ListItem>
                <ListItem>Result: <JsonFormatter objectToJson={step.result} /> </ListItem>
                <ListItem><ParserLoggerStackView stack={step.stack} /></ListItem>
                {!this.showStack ? null : <ListItem><ParserLoggerStateStackView stateStack={step.allstack} /></ListItem>}
            </List>
        )
    }

    popStep(step: any, index: number) {
        return this.createStateCard(index, this.colorYellow,
            <span><b>Pop stack {step.state}</b></span>,
            <Paper><List>
                <ListItem>Depth: {step.depth}</ListItem>
                <ListItem>Lookahead: Normal ({step.symbol}) Error({step.preErrorSymbol})</ListItem>
                <ListItem>Cstack: <JsonFormatter objectToJson={step.cstack} /></ListItem>
                <ListItem>Error: <JsonFormatter objectToJson={step.error} />) </ListItem>
                <ListItem>Unwind symbols number: <JsonFormatter objectToJson={step.stack} />)</ListItem>
                <ListItem>Unwind symbols: <JsonFormatter objectToJson={step.stackNamed} />)</ListItem>
                <ListItem>Unwind values: <JsonFormatter objectToJson={step.vstack} />)</ListItem>
            </List></Paper>);
    }

    renderStep(step: any, index: number) {
        switch (step.action) {
            case 'shift':
                return this.shiftStep(step, index);
            case 'reduce':
                return this.reduceStep(step, index);
            case 'popStack':
                return this.popStep(step, index);
            default:
                throw new Error('Unknow step action ' + step.action + '.');
        }
    }

    parserLogView() {
        return <Paper>{this.props.parserResultStore.result.parserLog.map((step: any, index: number) => this.renderStep(step, index))}</Paper>;
    }

    render() {
        if (this.props.parserResultStore.result.parserLog == null) {
            return null;
        }

        return (
            <Card>
                <CardHeader title="Parser log" />
                <CardText>
                    {this.parserLogView()}
                </CardText>
            </Card>);
    }
}
