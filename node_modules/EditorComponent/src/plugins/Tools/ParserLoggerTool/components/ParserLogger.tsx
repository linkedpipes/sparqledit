import { EditorSettingsStore } from '../../../../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { ParserResult, ParserResultStore, ParsingService } from "../../../../service/ParsingService";
import { ParserLoggerStates } from "./ParserLoggerState";
import { JsonFormatter } from "../../../../components/utils/JsonFormatter"
import { Card, CardHeader, CardTitle, CardText } from "material-ui/Card"
import { List, ListItem } from "material-ui"
import { Paper, RaisedButton } from "material-ui"

export interface ParserLoggerProps {
    editorSettingsStore: EditorSettingsStore;
    getEditorContent(): string;
}

@observer
export class ParserLogger extends React.Component<ParserLoggerProps, any> {

    private warningColor = "FFAB91";
    private classicColor = "81D4FA";
    private parserResultStore: ParserResultStore;

    constructor() {
        super();
        this.parserResultStore = new ParserResultStore();
        this.runParserClick = this.runParserClick.bind(this);
    }

    createCard(color: string, title: string, child: JSX.Element) {
        return <Paper><Card>
            <CardHeader title={title} subtitle={null} />
            <CardText>
                {child}
            </CardText>
        </Card></Paper>
    }

    parserErrorOutputCard() {
        return this.createCard(this.warningColor, "Parser error",
            <Paper><List>
                <ListItem>
                    Message {this.parserResultStore.result.parserErrorOutput.message}
                </ListItem>
                <ListItem>
                    Trace messages:
                    <Paper><List>
                        <ListItem>
                            {
                                this.parserResultStore.result.parserErrorOutput.tracedParserErrors.map((parserError: any) =>
                                    <div>Unexpected token {parserError.problemToken}, expected one of
                                    {parserError.expected.map((expectedToken: any) =>
                                            <span>
                                                '{expectedToken}',
                                        </span>)
                                        }
                                    </div>)
                            }
                        </ListItem>
                    </List></Paper>
                </ListItem>
            </List></Paper>);
    }

    lexerErrorOutputCard() {
        return this.createCard(this.warningColor, 'Lexer error', <JsonFormatter objectToJson={this.parserResultStore.result.lexerErrorOutput} />)
    }

    parserOutputCard() {
        return this.createCard(this.classicColor, 'Parser result', <div>
            <JsonFormatter objectToJson={this.parserResultStore.result.parserOutput} multiLine={true} />
            <span className="card-title">Parser errors</span>
            <div>
                <Paper><List>
                    {
                        this.parserResultStore.result.parserErrors.map((parserError: any) => <ListItem>
                            <Paper><List>
                                <ListItem>Type: {parserError.type}</ListItem>
                                <ListItem>
                                    Start from {parserError.yylocStart.first_line}:{parserError.yylocStart.first_column} TO {parserError.yylocStart.last_line}:{parserError.yylocStart.last_column}
                                </ListItem>
                                <ListItem>
                                    End from {parserError.yylocEnd.first_line}:{parserError.yylocEnd.first_column} TO {parserError.yylocEnd.last_line}:{parserError.yylocEnd.last_column}
                                </ListItem>
                            </List></Paper>
                        </ListItem>)
                    }
                </List></Paper>
            </div>
        </div>)
    }

    lexerOutputCard() {
        return this.createCard(this.classicColor, 'Lexer output', <div>{this.parserResultStore.result.lexerOutput}</div>);
    }

    runParserClick() {
        var parserService = new ParsingService(this.props.editorSettingsStore);
        var result = parserService.run(this.props.getEditorContent());
        this.parserResultStore.result = result;
    }

    render() {
        if (this.parserResultStore.result == null) {
            return <div><RaisedButton onClick={this.runParserClick}>Run</RaisedButton></div>;
        }
        var res = this.parserResultStore.result;
        return (<div>
            <RaisedButton onClick={this.runParserClick}>Run</RaisedButton>
            {res.parserErrorOutput == null ? null : this.parserErrorOutputCard()}
            {res.lexerErrorOutput == null ? null : this.lexerErrorOutputCard()}
            {res.parserOutput == null || !this.props.editorSettingsStore.getSettings('showParserOutput') ? null : this.parserOutputCard()}
            {res.lexerOutput == null || !this.props.editorSettingsStore.getSettings('showLexerOutput') ? null : this.lexerOutputCard()}
            <ParserLoggerStates parserResultStore={this.parserResultStore} editorSettingsStore={this.props.editorSettingsStore} />
        </div>);
    }
}
