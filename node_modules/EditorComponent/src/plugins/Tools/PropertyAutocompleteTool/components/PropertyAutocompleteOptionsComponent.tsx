import * as React from "react";
import { observer } from "mobx-react";
import { observable } from "mobx";
import { PropertyAutocompleteOptions } from "../PropertyAutocompleteOptions";
import { defineBoundAction } from "EditorComponent/node_modules/mobx/lib/api/action";

export interface PropertyAutocompleteOptionsComponentProps {
    propertyAutocompleteOptions: PropertyAutocompleteOptions;
}

@observer
export class PropertyAutocompleteOptionsComponent extends React.Component<PropertyAutocompleteOptionsComponentProps, any> {

    @observable propertiesOptionsVisibility: boolean = false;

    togglePropertiesOptionsVisibility() {
        this.propertiesOptionsVisibility = !this.propertiesOptionsVisibility;
    }

    searchBarChaged(event: React.ChangeEvent<HTMLInputElement>) {
        this.props.propertyAutocompleteOptions.searchText = event.target.value;
    }

    renderPropertiesOptions() {
        return (
            <div className="autocompleteInnerOptionBox">
                <div className="autocompleteOption ui checkbox">
                    <input type="checkbox" id="isOntologyConceptShown"
                        checked={this.props.propertyAutocompleteOptions.isOntologyConceptShown}
                        onChange={() => this.props.propertyAutocompleteOptions.isOntologyConceptShown = !this.props.propertyAutocompleteOptions.isOntologyConceptShown} />
                    <label htmlFor="isOntologyConceptShown">Show concept</label>
                </div>
                <br />
                <div className="autocompleteOption ui checkbox">
                    <input type="checkbox" id="isOntologyClassShown"
                        checked={this.props.propertyAutocompleteOptions.isOntologyClassShown}
                        onChange={() => this.props.propertyAutocompleteOptions.isOntologyClassShown = !this.props.propertyAutocompleteOptions.isOntologyClassShown} />
                    <label htmlFor="isOntologyClassShown">Show class</label>
                </div>
                <br />
                <div className="autocompleteOption ui checkbox">
                    <input type="checkbox" id="isClassWithoutPropertiesShown"
                        checked={this.props.propertyAutocompleteOptions.isClassWithoutPropertiesShown}
                        onChange={() => this.props.propertyAutocompleteOptions.isClassWithoutPropertiesShown = !this.props.propertyAutocompleteOptions.isClassWithoutPropertiesShown} />
                    <label htmlFor="isClassWithoutPropertiesShown">Show class without properties</label>
                </div>
            </div>);
    }

    renderOptionsIcon() {
        var iconClassName = "icon " + (this.propertiesOptionsVisibility ? "iconUp" : "iconDown");
        return <div className={iconClassName}></div>;
    }

    render() {
        return (
            <div>
                <div className="autocompleteOptionBox">
                    {this.propertiesOptionsVisibility ? this.renderPropertiesOptions() : null}
                </div>
                <div className="propertyFilterWrapper">
                    <div className="propertyFilter ui input">
                        <input type="text" onChange={this.searchBarChaged.bind(this)} placeholder="Filter properties names .." />
                    </div>
                    <div onClick={this.togglePropertiesOptionsVisibility.bind(this)}>
                        {this.renderOptionsIcon()}
                        Show properties
                    </div>
                </div>
            </div>
        );
    }
}