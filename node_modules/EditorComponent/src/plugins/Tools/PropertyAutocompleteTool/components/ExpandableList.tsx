import * as React from "react";
import { observer } from "mobx-react";
import { observable } from "mobx";

export interface ExpandableListItemProps {
    className?: string;
    onClick?: React.EventHandler<React.MouseEvent<HTMLDivElement>>;
    isListExpanded?: boolean;
    onShowLess?: () => void;
}

export interface ExpandableListProps {
    className?: string;
    showMoreClassName?: string;
    previewItemCount?: number;
}

enum ExpandableListState { Open, Close }

export class ExpandableListItem extends React.Component<ExpandableListItemProps, any> {
    @observable
    isHovering: boolean;

    handleMouseHover() {
        this.setState(this.toggleHoverState);
    }

    toggleHoverState() {
        this.isHovering = !this.isHovering;
    }

    render() {
        return (
            <li className={this.props.className} style={{ display: "grid", gridTemplateColumns: "1fr auto" }}
                onMouseEnter={this.handleMouseHover.bind(this)}
                onMouseLeave={this.handleMouseHover.bind(this)}>
                <div onClick={this.props.onClick}>{this.props.children}</div>
                {this.props.isListExpanded && this.isHovering && <div className="showLessButton" onClick={() => this.props.onShowLess()}>Show less</div>}
            </li>
        );
    }
}

@observer
export class ExpandableList extends React.Component<ExpandableListProps, any> {
    @observable listState: ExpandableListState = ExpandableListState.Close;

    private get previewItemCount() {
        return this.props.previewItemCount || 10;
    }

    toggleState() {
        this.listState = this.listState == ExpandableListState.Open ? ExpandableListState.Close : ExpandableListState.Open;
    }

    render() {
        var children = this.props.children as ExpandableListItem[];
        var isClose = this.listState == ExpandableListState.Close;
        if (isClose) {
            children = children.slice(0, this.previewItemCount);
        }
        var isListExpanded = this.listState == ExpandableListState.Open;
        var clonedChildren = React.Children.map(children, child => React.cloneElement(child as React.ReactElement<any>,
            {
                isListExpanded: isListExpanded,
                onShowLess: this.toggleState.bind(this)
            }));

        return (
            <ul className={this.props.className}>
                {clonedChildren}
                {clonedChildren.length < this.previewItemCount ? null :
                    <ExpandableListItem onClick={this.toggleState.bind(this)} className={this.props.showMoreClassName}>
                        Show {isClose ? "more" : "less"} ...
                    </ExpandableListItem>
                }
            </ul>
        );
    }
}