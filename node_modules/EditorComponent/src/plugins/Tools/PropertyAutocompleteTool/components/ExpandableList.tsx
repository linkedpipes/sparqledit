import * as React from "react";
import { observer } from "mobx-react";
import { observable } from "mobx";

export interface ExpandableListItemProps {
    className?: string;
    titleClassName?: string;
    onClick?: React.EventHandler<React.MouseEvent<HTMLLIElement>>;
}

export interface ExpandableListProps {
    title: string;
    className?: string;
    titleClassName?: string;
    previewItemCount?: number;
}

enum ExpandableListState { Open, Close, Preview }

export class ExpandableListItem extends React.Component<ExpandableListItemProps, any> {
    render() {
        return (
            <li className={this.props.className} onClick={this.props.onClick}>{this.props.children}</li>
        );
    }
}

@observer
export class ExpandableList extends React.Component<ExpandableListProps, any> {
    @observable listState: ExpandableListState = ExpandableListState.Preview;

    private get isListVisible() {
        return this.listState != ExpandableListState.Close;
    }

    private get previewItemCount() {
        return this.props.previewItemCount || 10;
    }

    toggleState() {
        this.listState = this.listState == ExpandableListState.Open ? ExpandableListState.Close : ExpandableListState.Open;
    }

    renderList() {
        var children = this.props.children as ExpandableListItem[];
        var isPreview = this.listState == ExpandableListState.Preview;
        if (isPreview) {
            children = children.slice(0, this.previewItemCount);
        }

        return (
            <ul className={this.props.className}>
                {children}
                {!isPreview ? null : (
                    <ExpandableListItem onClick={this.toggleState.bind(this)}>
                        Show more ...
                    </ExpandableListItem>
                )}
            </ul>
        );
    }

    render() {
        return (
            <div>
                <div onClick={this.toggleState.bind(this)}>{this.props.title} {this.isListVisible ? "close" : "open"}</div>
                {this.isListVisible ? this.renderList() : null}
            </div>
        );
    }
}