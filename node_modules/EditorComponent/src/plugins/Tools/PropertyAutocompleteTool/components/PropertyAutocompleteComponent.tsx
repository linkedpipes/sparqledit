import { EditorSettingsStore } from '../../../../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { JsonFormatter } from "../../../../components/utils/JsonFormatter"
import { List, ListItem, Divider, RaisedButton, Paper, Card, CardHeader, CardText } from "material-ui"
import { observable } from "mobx";
import { SparqlLanguageServer, OntologyAutocompleteSubProvider, OntologyConcept, OntologyProperty, OntologyHiearchy } from "SparqlAutocompletion";
import { CleanOntologyClassTextFormatter } from "SparqlAutocompletion";
import { IOntologyClass } from "SparqlAutocompletion";
import { TreeComponent } from "./NodeComponents/TreeComponent";
import { ConceptNodeInput, createConceptNodeInput } from "./NodeComponents/DataModel";
import { PropertyAutocompleteOptions } from "../PropertyAutocompleteOptions";
import { SparqlLanguageService } from "EditorComponent/src/service/SparqlLanguageService";

export interface PropertyAutocompleteComponentProps {
    getEditorContentAndCursorPosition(): { content: string, position: number };
    propertyAutocompleteOptions: PropertyAutocompleteOptions;
    sparqlLanguageService: SparqlLanguageService;
    monacoEditor: monaco.editor.IStandaloneCodeEditor;
}

@observer
export class PropertyAutocompleteComponent extends React.Component<PropertyAutocompleteComponentProps, any> {
    private ontologyHiearchy: OntologyHiearchy;
    private ontologyClassTextFormatter = new CleanOntologyClassTextFormatter();
    @observable
    private intelisenseResult: { concept: OntologyConcept, properties: OntologyProperty[] }[] = null;

    constructor() {
        super();
        this.refreshAutocomplete = this.refreshAutocomplete.bind(this);
    }

    componentDidMount() {

    }

    refreshAutocomplete() {
        var editorContentAndPosition = this.props.getEditorContentAndCursorPosition();
        this.ontologyHiearchy = this.props.sparqlLanguageService.getLanguageServer().ontologyHiearchy;
        this.intelisenseResult = (new OntologyAutocompleteSubProvider(this.ontologyHiearchy)).providePropertyAutocompletion(editorContentAndPosition.content, editorContentAndPosition.position);
    }

    renderIntelisenseResult() {
        if (this.intelisenseResult == null) {
            return null
        }

        var conceptNodeInput: ConceptNodeInput = createConceptNodeInput(this.ontologyHiearchy, this.intelisenseResult.map(x => x.concept));

        return <TreeComponent
            monacoEditor={this.props.monacoEditor}
            conceptNodeInput={conceptNodeInput}
            propertyAutocompleteOptions={this.props.propertyAutocompleteOptions} />
    }

    render() {
        return (
            <div>
                <RaisedButton onClick={this.refreshAutocomplete}>Refresh</RaisedButton>
                <div className="intelisenseTree">
                    {this.renderIntelisenseResult()}
                </div>
            </div>
        );
    }
}
