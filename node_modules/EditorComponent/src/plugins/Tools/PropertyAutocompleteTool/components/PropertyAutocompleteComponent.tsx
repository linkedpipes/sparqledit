import { EditorSettingsStore } from '../../../../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { JsonFormatter } from "../../../../components/utils/JsonFormatter"
import { List, ListItem, Divider, RaisedButton, Paper, Card, CardHeader, CardText } from "material-ui"
import { observable } from "mobx";
import { SparqlLanguageServer, OntologyAutocompleteSubProvider, OntologyConcept, OntologyProperty, OntologyHiearchy } from "SparqlAutocompletion";
import { CleanOntologyClassTextFormatter } from "SparqlAutocompletion";
import { IOntologyClass } from "SparqlAutocompletion";
import { TreeComponent } from "./NodeComponents/TreeComponent";
import { ConceptNodeInput } from "./NodeComponents/DataModel";
import { PropertyAutocompleteOptions } from "../PropertyAutocompleteOptions";

export interface PropertyAutocompleteComponentProps {
    getEditorContentAndCursorPosition(): { content: string, position: number };
    propertyAutocompleteOptions: PropertyAutocompleteOptions;
    sparqlLanguageServer: SparqlLanguageServer;
}

@observer
export class PropertyAutocompleteComponent extends React.Component<PropertyAutocompleteComponentProps, any> {
    private ontologyHiearchy: OntologyHiearchy;
    private ontologyClassTextFormatter = new CleanOntologyClassTextFormatter();
    @observable
    private intelisenseResult: { concept: OntologyConcept, properties: OntologyProperty[] }[] = null;

    constructor() {
        super();
        this.showIntelisense = this.showIntelisense.bind(this);
    }

    componentDidMount() {

    }

    showIntelisense() {
        var editorContentAndPosition = this.props.getEditorContentAndCursorPosition();
        this.ontologyHiearchy = this.props.sparqlLanguageServer.ontologyHiearchy;
        this.intelisenseResult = (new OntologyAutocompleteSubProvider(this.ontologyHiearchy)).providePropertyAutocompletion(editorContentAndPosition.content, editorContentAndPosition.position);
    }

    renderIntelisenseResult() {
        if (this.intelisenseResult == null) {
            return null
        }

        var conceptNodeInput: ConceptNodeInput = {
            ontologyHiearchy: this.ontologyHiearchy,
            concepts: this.intelisenseResult.map(x => x.concept)
        };

        return <TreeComponent conceptNodeInput={conceptNodeInput} propertyAutocompleteOptions={this.props.propertyAutocompleteOptions} />
    }

    render() {
        return (
            <Paper>
                <Card>
                    <CardHeader title="Intelisense demonstration" subtitle={null} />
                    <CardText>
                        <RaisedButton onClick={this.showIntelisense}>Show intelisense</RaisedButton>
                        <Paper className="intelisenseTree">
                            {this.renderIntelisenseResult()}
                        </Paper>
                    </CardText>
                </Card>
            </Paper>
        );
    }
}
