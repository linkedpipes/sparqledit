import { EditorSettingsStore } from '../../../../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { observable } from "mobx";
import { TreeComponent } from "./NodeComponents/TreeComponent";
import { ConceptNodeInput, createConceptNodeInput } from "./NodeComponents/DataModel";
import { PropertyAutocompleteOptions } from "../PropertyAutocompleteOptions";
import { SparqlLanguageServer, OntologyHierarchy, OntologyConcept, OntologyProperty } from 'SparqlAutocompletion';

export interface PropertyAutocompleteComponentProps {
    getEditorContentAndCursorPosition(): { content: string, position: number };
    propertyAutocompleteOptions: PropertyAutocompleteOptions;
    sparqlLanguageServer: SparqlLanguageServer;
    monacoEditor: monaco.editor.IStandaloneCodeEditor;
}

@observer
export class PropertyAutocompleteComponent extends React.Component<PropertyAutocompleteComponentProps, any> {
    private ontologyHierarchy: OntologyHierarchy;

    @observable.ref
    private intelisenseResult: { concept: OntologyConcept, properties: OntologyProperty[] }[] = null;

    constructor() {
        super();
    }

    componentDidMount() {
        this.props.monacoEditor.onDidChangeCursorPosition((e) => {
            this.refreshAutocomplete();
        });
    }

    refreshAutocomplete() {
        var editorContentAndPosition = this.props.getEditorContentAndCursorPosition();
        this.ontologyHierarchy = this.props.sparqlLanguageServer.ontologyHierarchy;
        this.intelisenseResult = this.props.sparqlLanguageServer.provideAutocompleteAdvice(editorContentAndPosition.content, editorContentAndPosition.position);
    }

    renderIntelisenseResult() {
        if (this.intelisenseResult == null) {
            return null;
        }
        var conceptNodeInput: ConceptNodeInput = createConceptNodeInput(this.ontologyHierarchy, this.intelisenseResult.map(x => x.concept));

        return <TreeComponent
            monacoEditor={this.props.monacoEditor}
            conceptNodeInput={conceptNodeInput}
            propertyAutocompleteOptions={this.props.propertyAutocompleteOptions} />
    }

    render() {
        return (
            <div>
                <div className="intelisenseTree">
                    {this.renderIntelisenseResult()}
                </div>
            </div>
        );
    }
}
