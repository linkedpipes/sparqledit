import { EditorSettingsStore } from '../../../../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { JsonFormatter } from "../../../../components/utils/JsonFormatter"
import { List, ListItem, Divider, RaisedButton, Paper, Card, CardHeader, CardText } from "material-ui"
import { observable } from "mobx";
import { SparqlLanguageServer, OntologyAutocompleteSubProvider, OntologyConcept, OntologyProperty } from "SparqlAutocompletion";

export interface PropertyAutocompleteComponentProps {
    getEditorContentAndCursorPosition(): { content: string, position: number };
    editorSettingsStore: EditorSettingsStore;
    sparqlLanguageServer: SparqlLanguageServer;
}

@observer
export class PropertyAutocompleteComponent extends React.Component<PropertyAutocompleteComponentProps, any> {
    private ontologyAutocompleteSubProvider: OntologyAutocompleteSubProvider;

    @observable
    private intelisenseResult: { concept: OntologyConcept, properties: OntologyProperty[] }[] = null;

    constructor() {
        super();
        this.showIntelisense = this.showIntelisense.bind(this);
    }

    componentDidMount() {
        this.ontologyAutocompleteSubProvider = new OntologyAutocompleteSubProvider(this.props.sparqlLanguageServer.ontologyHiearchy);
    }

    showIntelisense() {
        var editorContentAndPosition = this.props.getEditorContentAndCursorPosition();
        this.intelisenseResult = this.ontologyAutocompleteSubProvider.providePropertyAutocompletion(editorContentAndPosition.content, editorContentAndPosition.position);
    }

    renderIntelisenseResult() {
        if (this.intelisenseResult == null) {
            return null
        }
        return (
            <List>
                {
                    this.intelisenseResult.map((x, i) =>
                        <ListItem key={i}>
                            <div style={{ backgroundColor: "#c5cae9" }}>{x.concept.ontologyClasses.map(c => c.getText()).join('\r\n')}</div>
                            <List>
                                {x.properties.map((property, propertyIndex) =>
                                    <ListItem key={propertyIndex}>{property.name}</ListItem>
                                )}
                            </List>
                        </ListItem>
                    )
                }
            </List>
        )
    }

    render() {
        if (!this.props.editorSettingsStore.getSettings("showIntelisenseDemonstration")) {
            return null;
        }
        return (
            <Paper>
                <Card>
                    <CardHeader title="Intelisense demonstration" subtitle={null} />
                    <CardText>
                        <RaisedButton onClick={this.showIntelisense}>Show intelisense</RaisedButton>
                        <Paper>
                            {this.renderIntelisenseResult()}
                        </Paper>
                    </CardText>
                </Card>
            </Paper >

        );
    }
}
