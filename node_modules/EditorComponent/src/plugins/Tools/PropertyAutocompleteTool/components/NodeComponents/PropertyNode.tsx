import * as React from "react";
import { PrefixProcessor } from "SparqlAutocompletion";
import { INodeFactoryContext, BaseNodeFactory } from "./NodeFactory";
import { ExpandableList, ExpandableListItem } from "../ExpandableList";
import { PropertyNodeInput } from "./DataModel";
import * as _ from "lodash";

export interface PropertyNodeProps {
    ontologyProperties: string[];
    searchText: string;
    insertPropertyIntoEditor(propertyName: string): void
}

export class PropertyNodeComponent extends React.Component<PropertyNodeProps, any> {

    renderPropertyName(searchText: string, propertyName: string) {
        if (searchText == null) {
            return propertyName;
        }

        var searchTextIndex = propertyName.toLowerCase().indexOf(searchText);
        if (searchTextIndex == -1) {
            return propertyName;
        }

        return <span>
            {propertyName.substr(0, searchTextIndex)}
            <b>{propertyName.substr(searchTextIndex, searchText.length)}</b>
            {propertyName.substr(searchTextIndex + searchText.length)}
        </span>
    }

    propertyClick(propertyName: string) {
        this.props.insertPropertyIntoEditor(propertyName);
    }

    render() {
        var searchText = this.props.searchText;
        var properties = _(this.props.ontologyProperties).orderBy(x => x).value();

        if (properties.length == 0) {
            return <div className="autocompleteNoProperties">No properties</div>
        }
        return (
            <ExpandableList className="autocompletePropertyList" showMoreClassName="autocompleteProperty">
                {properties.map((property, propertyIndex) => {
                    return (
                        <ExpandableListItem key={propertyIndex} className="autocompleteProperty">
                            <div onClick={() => this.propertyClick.call(this, property)}>{this.renderPropertyName(searchText, property)}</div>
                        </ExpandableListItem>
                    );
                })
                }
            </ExpandableList>
        );
    }
}

export class PropertyNodeFactory extends BaseNodeFactory<PropertyNodeInput, any> {

    dataSelector(data: PropertyNodeInput, nodeFactoryContext: INodeFactoryContext) {
        throw new Error('Final node factory do not select data!');
    }

    getListElement(data: PropertyNodeInput, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        return <PropertyNodeComponent
            searchText={nodeFactoryContext.propertyAutocompleteOptions.searchText.toLowerCase()}
            ontologyProperties={data.ontologyProperties}
            insertPropertyIntoEditor={(propertyName) => nodeFactoryContext.getNodeApi().insertPropertyIntoEditor(propertyName)} />
    }
}