import { OntologyHiearchy, IOntologyClass, OntologyConcept, OntologyProperty, CleanOntologyClassTextFormatter } from "SparqlAutocompletion";

export interface AutocompleteClass {
    name: string;
    properties: OntologyProperty[];
}

export interface AutocompleteConcept {
    classes: AutocompleteClass[];
}

export interface ClassNodeInput {
    classes: AutocompleteClass[];
}

export interface ConceptNodeInput {
    concepts: AutocompleteConcept[];
}

export interface PropertyNodeInput {
    ontologyProperties: OntologyProperty[];
}


function ontologyConverter() {

}

// var ontologyAssertions = data.ontologyHiearchy.ontologyAssertions;
// var properties = _(data.ontologyClasses)
//     .map(x => ontologyAssertions.findPropertiesByDomain(x))
//     .flatten<OntologyProperty>()
//     .value();

// return {
//     ontologyProperties: this.filterProperties(nodeFactoryContext.propertyAutocompleteOptions.searchText, properties)
// }


// ontologyClassToClassNodeInput(classNodeInput: ClassNodeInput, searchText: string, ontologyClass: IOntologyClass): PropertyNodeInput {
// var properties = classNodeInput.ontologyHiearchy.ontologyAssertions.findPropertiesByDomain(ontologyClass);
// return {
// ontologyProperties: this.filterProperties(searchText, properties)
// }
// }


// ontologyConceptToClassNodeInput(conceptNodeInput: ConceptNodeInput, ontologyConcept: OntologyConcept): ClassNodeInput {
//     return {
//         ontologyHiearchy: conceptNodeInput.ontologyHiearchy,
//         ontologyClasses: ontologyConcept.ontologyClasses
//     }
// }

//     return {
//     ontologyHiearchy: data.ontologyHiearchy,
//     ontologyClasses: _(data.concepts)
//         .map(x => x.ontologyClasses)
//         .flatten<IOntologyClass>()
//         .value()
// }

export function createConceptNodeInput(ontologyHiearchy: OntologyHiearchy, ontologyConcepts: OntologyConcept[]): ConceptNodeInput {
    var ontologyClassTextFormatter = new CleanOntologyClassTextFormatter();
    var ontologyAssertions = ontologyHiearchy.ontologyAssertions;
    var autocompleteConcepts = ontologyConcepts.map(ontologyConcept => {
        var autocompleteClasses = ontologyConcept.ontologyClasses.map(ontologyClass => {
            var properties = ontologyAssertions.findPropertiesByDomain(ontologyClass)
            return {
                name: ontologyClass.getText(),
                properties: properties
            }
        })

        return {
            classes: autocompleteClasses
        }
    });


    return {
        concepts: autocompleteConcepts
    };
}