import * as React from "react";
import { INodeFactoryContext, BaseNodeFactory } from "./NodeFactory";
import { ConceptNodeInput, ClassNodeInput, AutocompleteClass } from "./DataModel";
import * as _ from "lodash";

export interface ConceptNodeProps {
    data: ConceptNodeInput;
    renderListUnder(autocompleteClasses: AutocompleteClass[]): JSX.Element;
}

export class ConceptNodeComponent extends React.Component<ConceptNodeProps, any> {

    render() {
        return (
            <ul className="autocompleteConceptList">
                {
                    this.props.data.concepts.map((autocompleteConcept, conceptIndex) => (
                        <li key={conceptIndex}>
                            <div className="autocompleteConceptName">
                                {autocompleteConcept.classes.map((autocompleteClass, classIndex) => <div key={classIndex}>{autocompleteClass.name}</div>)}
                            </div>
                            <div className="autocompleteConceptListUnder">
                                {this.props.renderListUnder(autocompleteConcept.classes)}
                            </div>
                        </li>
                    ))
                }
            </ul>
        );
    }
}

export class ConceptNodeFactory extends BaseNodeFactory<ConceptNodeInput, ClassNodeInput> {

    dataSelector(data: ConceptNodeInput, nodeFactoryContext: INodeFactoryContext): ClassNodeInput {
        var autocompleteClasses = _(data.concepts)
            .map(autocompleteConcept => autocompleteConcept.classes)
            .flatten<AutocompleteClass>()
            .value();
        return { classes: autocompleteClasses };
    }

    getListElement(data: ConceptNodeInput, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        return (
            <ConceptNodeComponent
                data={data}
                renderListUnder={(autocompleteClasses) => nodeFactoryContext.renderListUnder({ classes: autocompleteClasses })} />
        );
    }
}