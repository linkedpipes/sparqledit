import * as React from "react";
import { PropertyAutocompleteOptions } from "../../PropertyAutocompleteOptions";

export class NodeApi {

    constructor(private monacoEditor: monaco.editor.IStandaloneCodeEditor) {
        // empty
    }

    insertPropertyIntoEditor(propertyName: string): void {
        var editorModel = this.monacoEditor.getModel();
        var editorValue = editorModel.getValue();
        var editorCursorIndex = editorModel.getOffsetAt(this.monacoEditor.getPosition());
        var newEditorValue = editorValue.substr(0, editorCursorIndex) + "<" + propertyName + ">" + editorValue.substr(editorCursorIndex);
        editorModel.setValue(newEditorValue);
        var newEditorCursorIndex = editorModel.getPositionAt(editorCursorIndex + propertyName.length + 2);
        this.monacoEditor.setPosition(newEditorCursorIndex);
        this.monacoEditor.focus();
    }
}

export interface INodeFactoryContext {
    renderListUnder(data: any): JSX.Element;
    propertyAutocompleteOptions: PropertyAutocompleteOptions;
    getNodeApi(): NodeApi;
}

export interface INodeFactoryCommon {
    dataSelectorCommon(data: any, nodeFactoryContext: INodeFactoryContext): any;
    getListElementCommon(data: any, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}

export interface INodeFactory<TFrom, TTo> extends INodeFactoryCommon {
    dataSelector(data: TFrom, nodeFactoryContext: INodeFactoryContext): TTo;
    getListElement(data: TFrom, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}

export abstract class BaseNodeFactory<TFrom, TTo> implements INodeFactory<TFrom, TTo> {
    public dataSelectorCommon(data: any, nodeFactoryContext: INodeFactoryContext): any {
        return this.dataSelector(data, nodeFactoryContext);
    }

    public getListElementCommon(data: any, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        return this.getListElement(data, nodeFactoryContext);
    }

    abstract dataSelector(data: TFrom, nodeFactoryContext: INodeFactoryContext): TTo;

    abstract getListElement(data: TFrom, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}