import * as React from "react";

export interface INodeFactoryContext {
    renderListUnder(data: any): JSX.Element;
}

export interface INodeFactoryCommon {
    dataSelectorCommon(data: any): any;
    getListElementCommon(data: any, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}

export interface INodeFactory<TFrom, TTo> extends INodeFactoryCommon {
    dataSelector<TFrom, TTo>(data: TFrom): TTo;
    getListElement(data: TFrom, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}

export abstract class BaseNodeFactory<TFrom, TTo> implements INodeFactory<TFrom, TTo> {
    public dataSelectorCommon(data: any): any {
        return this.dataSelector(data);
    }

    public getListElementCommon(data: any, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        return this.getListElement(data, nodeFactoryContext);
    }

    abstract dataSelector(data: TFrom): TTo;

    abstract getListElement(data: TFrom, nodeFactoryContext: INodeFactoryContext): JSX.Element;
}