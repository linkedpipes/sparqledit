import * as React from "react";
import { observer } from "mobx-react";
import { List, ListItem, Divider, RaisedButton, Paper, Card, CardHeader, CardText } from "material-ui"
import { observable } from "mobx";
import { SparqlLanguageServer, OntologyAutocompleteSubProvider, OntologyConcept, OntologyProperty, OntologyHiearchy } from "SparqlAutocompletion";
import { CleanOntologyClassTextFormatter } from "SparqlAutocompletion";
import { IOntologyClass } from "SparqlAutocompletion";
import { INodeFactoryContext, BaseNodeFactory } from "./NodeFactory";
import { ExpandableList, ExpandableListItem } from "../ExpandableList";
import { ClassNodeInput, PropertyNodeInput } from "./DataModel";
import * as _ from "lodash";

export interface ClassNodeProps {
    data: ClassNodeInput
    isClassWithoutPropertiesShown: boolean
    renderListUnder(ontologyProperties: OntologyProperty[]): JSX.Element;
}

export class ClassNodeComponent extends React.Component<ClassNodeProps, any> {
    render() {
        return (
            <ul className="classList">
                {this.props.data.classes.map((autocompleteClass, classIndex) => {
                    var classProperties = autocompleteClass.properties;
                    if (!this.props.isClassWithoutPropertiesShown && classProperties.length == 0) {
                        return null;
                    }
                    return (
                        <li key={classIndex}>
                            <div>{autocompleteClass.name}</div>
                            {this.props.renderListUnder(classProperties)}
                        </li>)
                })}
            </ul>
        );
    }
}

export class ClassNodeFactory extends BaseNodeFactory<ClassNodeInput, PropertyNodeInput> {
    dataSelector(data: ClassNodeInput, nodeFactoryContext: INodeFactoryContext): PropertyNodeInput {
        var properties = _(data.classes)
            .map(x => x.properties)
            .flatten<OntologyProperty>()
            .value();

        return {
            ontologyProperties: properties
        }
    }

    getListElement(data: ClassNodeInput, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        var searchText = nodeFactoryContext.propertyAutocompleteOptions.searchText;
        return <ClassNodeComponent
            data={data}
            isClassWithoutPropertiesShown={nodeFactoryContext.propertyAutocompleteOptions.isClassWithoutPropertiesShown}
            renderListUnder={(ontologyProperties) => nodeFactoryContext.renderListUnder(
                {
                    ontologyProperties: ontologyProperties
                })}
        />
    }
}