import * as React from "react";
import { observer } from "mobx-react";
import { List, ListItem, Divider, RaisedButton, Paper, Card, CardHeader, CardText } from "material-ui"
import { observable } from "mobx";
import { SparqlLanguageServer, OntologyAutocompleteSubProvider, OntologyConcept, OntologyProperty, OntologyHiearchy } from "SparqlAutocompletion";
import { CleanOntologyClassTextFormatter } from "SparqlAutocompletion";
import { IOntologyClass } from "SparqlAutocompletion";
import { INodeFactoryContext, BaseNodeFactory } from "./NodeFactory";
import { ExpandableList, ExpandableListItem } from "../ExpandableList";
import { ClassNodeInput, PropertyNodeInput } from "./DataModel";
import * as _ from "lodash";

export interface ClassNodeProps {
    ontologyClasses: IOntologyClass[];
    renderListUnder(ontologyClass: IOntologyClass): JSX.Element;
}

export class ClassNodeComponent extends React.Component<ClassNodeProps, any> {
    private ontologyClassTextFormatter = new CleanOntologyClassTextFormatter();
    render() {
        if (this.props.ontologyClasses == null) {
            return <div>Prol</div>
        }
        return (
            <ul className="classList">
                {this.props.ontologyClasses.map((ontologyClass, classIndex) => (
                    <li key={classIndex}>
                        <div style={{ background: "#FF0" }}>{ontologyClass.getText(this.ontologyClassTextFormatter)}</div>
                        {this.props.renderListUnder(ontologyClass)}
                    </li>
                ))}
            </ul>
        );
    }
}

export class ClassNodeFactory extends BaseNodeFactory<ClassNodeInput, PropertyNodeInput> {
    dataSelector(data: ClassNodeInput): PropertyNodeInput {
        
        var ontologyAssertions = data.ontologyHiearchy.ontologyAssertions;
        var properties = _(data.ontologyClasses)
            .map(x => ontologyAssertions.findPropertiesByDomain(x))
            .flatten<OntologyProperty>()
            .value();

        return {
            ontologyProperties: properties
        }
    }

    ontologyClassToClassNodeInput(classNodeInput: ClassNodeInput, ontologyClass: IOntologyClass): PropertyNodeInput {
        return {
            ontologyProperties: classNodeInput.ontologyHiearchy.ontologyAssertions.findPropertiesByDomain(ontologyClass)
        }
    }

    getListElement(data: ClassNodeInput, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        if (data.ontologyClasses == null) {
            var end = ";";
        }
        return <ClassNodeComponent
            ontologyClasses={data.ontologyClasses}
            renderListUnder={(ontologyClass) => nodeFactoryContext.renderListUnder(this.ontologyClassToClassNodeInput(data, ontologyClass))} />
    }
}