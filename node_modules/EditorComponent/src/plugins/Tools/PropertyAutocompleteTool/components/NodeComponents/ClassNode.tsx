import * as React from "react";
import { INodeFactoryContext, BaseNodeFactory, NodeApi } from "./NodeFactory";
import { ClassNodeInput, PropertyNodeInput } from "./DataModel";
import * as _ from "lodash";

export interface ClassNodeProps {
    data: ClassNodeInput;
    renderListUnder(ontologyProperties: string[]): JSX.Element;
}

export class ClassNodeComponent extends React.Component<ClassNodeProps, any> {
    render() {
        return (
            <ul className="autocompleteClassList">
                {this.props.data.classes.map((autocompleteClass, classIndex) => {
                    var classProperties = autocompleteClass.properties;
                    return (
                        <li key={classIndex} className="autoCompleteClass">
                            <div className="autocompleteClassName">{autocompleteClass.name}</div>
                            {this.props.renderListUnder(classProperties)}
                        </li>)
                })}
            </ul>
        );
    }
}

export class ClassNodeFactory extends BaseNodeFactory<ClassNodeInput, PropertyNodeInput> {
    dataSelector(data: ClassNodeInput, nodeFactoryContext: INodeFactoryContext): PropertyNodeInput {
        var properties = _(data.classes)
            .map(x => x.properties)
            .flatten<string>()
            .value();

        return {
            ontologyProperties: properties
        }
    }

    getListElement(data: ClassNodeInput, nodeFactoryContext: INodeFactoryContext): JSX.Element {
        return <ClassNodeComponent
            data={data}
            renderListUnder={(ontologyProperties) => nodeFactoryContext.renderListUnder(
                {
                    ontologyProperties: ontologyProperties
                })} />
    }
}