import * as React from "react";
import { IEditorPluginApi } from '../../EditorPluginApi';
import { IPlugin } from '../../IPlugin';
import { Tool } from "../../../store/ToolStore";
import { PropertyAutocompleteComponent } from "./components/PropertyAutocompleteComponent";
import { PropertyAutocompleteOptionsComponent } from "./components/PropertyAutocompleteOptionsComponent";
import { defaultPropertyAutocompleteOptions } from "./PropertyAutocompleteOptions";
import { IntelisenseResult } from "./IntelisenseResult";
import { SparqlLanguageServer } from "SparqlAutocompletion";
import { createConceptNodeInput } from "./components/NodeComponents/DataModel";
import { NodeApi } from "./components/NodeComponents/NodeFactory";

// Utils function 
function getEditorContentAndCursorPosition(monacoEditor: monaco.editor.IStandaloneCodeEditor) {
    var model = monacoEditor.getModel();
    return {
        content: model.getValue(),
        position: model.getOffsetAt(monacoEditor.getPosition())
    }
}

export class PropertyAutocompleteTool implements IPlugin {

    registerIntelisenseChange(
        monacoEditor: monaco.editor.IStandaloneCodeEditor,
        sparqlLanguageServer: SparqlLanguageServer,
        origintelisenseResult: IntelisenseResult) {

        monacoEditor.onDidChangeCursorPosition((e) => {
            var editorContentAndPosition = getEditorContentAndCursorPosition(monacoEditor);
            var autocompleteAdvices = sparqlLanguageServer.provideAutocompleteAdvice(editorContentAndPosition.content, editorContentAndPosition.position);

            if (autocompleteAdvices == null) {
                origintelisenseResult.conceptNodeInput = null;
            }
            else {
                var ontologyAssertions = sparqlLanguageServer.getOntologyAssertions();
                origintelisenseResult.conceptNodeInput = createConceptNodeInput(ontologyAssertions, autocompleteAdvices.map(x => x.concept));
            }
        });
    }

    init(editorPluginApi: IEditorPluginApi): void {
        var monacoEditor = editorPluginApi.getMonacoEditor();
        var sparqlLanguageServer = editorPluginApi.getSparqlLanguageServer();
        var intelisenseResult = new IntelisenseResult();
        this.registerIntelisenseChange(monacoEditor, editorPluginApi.getSparqlLanguageServer(), intelisenseResult);
        var nodeApi = new NodeApi(monacoEditor);

        editorPluginApi.getToolStore().tools.push(
            new Tool(
                <div className="propertyAutocompleteTool">
                    <div className="propertyAutocompleteCaption">Property autocompletion</div>
                    <PropertyAutocompleteOptionsComponent
                        propertyAutocompleteOptions={defaultPropertyAutocompleteOptions} />
                    <PropertyAutocompleteComponent
                        nodeApi={nodeApi}
                        propertyAutocompleteOptions={defaultPropertyAutocompleteOptions}
                        intelisenseResult={intelisenseResult} />
                </div>
                , 'Property autocomplete'));
    }
}