import { IPlugin } from '../IPlugin';
import { MonacoSparqlCompletionItemProvider } from './MonacoSparqlCompletionItemProvider';
import { SparqlSignatureHelpProvider } from "SparqlAutocompletion";

export class signatureprovider implements monaco.languages.SignatureHelpProvider {
    signatureHelpTriggerCharacters: string[] = [' '];

    private sparqlAutocompleteProvider: SparqlSignatureHelpProvider;

    constructor() {
        var ontologyContent = require('raw-loader!../../resources/dbpedia.ttl');
        this.sparqlAutocompleteProvider = new SparqlSignatureHelpProvider(ontologyContent);
    }

    createHackSignatureHelp(label: string, documentation: string): monaco.languages.SignatureHelp {
        return {
            signatures: [{
                label: "Expected",
                parameters: [{
                    documentation: label,
                    label: "label"
                }]
            }],
            activeParameter: 0,
            activeSignature: 0
        }
    }

    provideSignatureHelp(model: monaco.editor.IReadOnlyModel, position: monaco.Position, token: monaco.CancellationToken): monaco.languages.SignatureHelp {
        var signatureHelp = this.sparqlAutocompleteProvider.provideSignatureHelp(model.getValue(), model.getOffsetAt(position));
        if (signatureHelp == null) {
            return null;
        }
        return this.createHackSignatureHelp(signatureHelp.label, signatureHelp.documentation);
    }
}

export class AutocompletitionPlugin implements IPlugin {
    init(monacoEditor: monaco.editor.IStandaloneCodeEditor): void {
        monaco.languages.registerCompletionItemProvider('sparql', new MonacoSparqlCompletionItemProvider());
        // monaco.languages.registerSignatureHelpProvider('sparql', new signatureprovider())
    }
}