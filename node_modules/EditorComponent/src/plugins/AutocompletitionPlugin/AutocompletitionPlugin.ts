import { IEditorPluginApi } from '../EditorPluginApi';
import { IPlugin } from '../IPlugin';
import { MonacoSparqlCompletionItemProvider } from './MonacoSparqlCompletionItemProvider';
import { SparqlSignatureHelpProvider, SparqlLanguageServer } from "SparqlAutocompletion";
import { SparqlLanguageService } from "EditorComponent/src/service/SparqlLanguageService";
import * as  _ from "lodash";

export class signatureprovider implements monaco.languages.SignatureHelpProvider {
    signatureHelpTriggerCharacters: string[] = [' '];
    sparqlLanguageService: SparqlLanguageService;

    constructor(sparqlLanguageServer: SparqlLanguageService) {
        this.sparqlLanguageService = sparqlLanguageServer;
    }

    createHackSignatureHelp(label: string, documentation: string): monaco.languages.SignatureHelp {
        return {
            signatures: [{
                label: "Expected",
                parameters: [{
                    documentation: label,
                    label: "label"
                }]
            }],
            activeParameter: 0,
            activeSignature: 0
        }
    }

    provideSignatureHelp(model: monaco.editor.IReadOnlyModel, position: monaco.Position, token: monaco.CancellationToken): monaco.languages.SignatureHelp {
        var signatureHelpProvider = this.sparqlLanguageService.getLanguageServer().sparqlSignatureHelpProvider;
        var text = model.getValue();
        var offset = model.getOffsetAt(position);
        var signatureHelp = signatureHelpProvider.provideSignatureHelp(text, offset);
        if (signatureHelp == null) {
            return null;
        }
        return this.createHackSignatureHelp(signatureHelp.label, signatureHelp.documentation);
    }
}

export class HoverProvider implements monaco.languages.HoverProvider {
    constructor(private sparqlLanguageServer: SparqlLanguageService) {
    }

    yylocToOffset(text: string, line: number, column: number) {
        var lines = text.split('\n');
        return _(lines).take(line - 1).map(x => x.length + 1).sum() + column;
    }

    provideHover(model: monaco.editor.IReadOnlyModel, position: monaco.Position, token: monaco.CancellationToken): monaco.languages.Hover {
        var query = model.getValue();

        var res = this.sparqlLanguageServer.getLanguageServer().sparqlHoverProvider.provideHover(query, model.getOffsetAt(position));
        if (res == null) {
            return null;
        }
        var result: monaco.languages.Hover = {
            contents: res.contents,
            range: {
                startLineNumber: res.range.startLineNumber,
                startColumn: res.range.startColumn,
                endLineNumber: res.range.endLineNumber,
                endColumn: res.range.endColumn
            }
        };

        return result;
    }
}

export class AutocompletitionPlugin implements IPlugin {
    init(editorPluginApi: IEditorPluginApi): void {
        var sparqlLanguageService = editorPluginApi.getSparqlLanguageService();
        monaco.languages.registerCompletionItemProvider('sparql', new MonacoSparqlCompletionItemProvider(sparqlLanguageService));
        monaco.languages.registerSignatureHelpProvider('sparql', new signatureprovider(sparqlLanguageService));
        monaco.languages.registerHoverProvider('sparql', new HoverProvider(sparqlLanguageService));
    }
}