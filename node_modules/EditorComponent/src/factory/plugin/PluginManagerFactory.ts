import { ErrorCheckPlugin } from '../../plugins/ErrorCheckPlugin/ErrorCheckPlugin';
import { PluginManager } from '../../plugins/PluginManager';
import { AutocompletitionPlugin } from '../../plugins/AutocompletitionPlugin/AutocompletitionPlugin';
import { EditorChangePlugin } from "../../plugins/EditorChangePlugin/EditorChangePlugin";
import { SyntaxHighlightPlugin } from "../../plugins/SyntaxHighlightPlugin/SyntaxHighlightPlugin";
import { CursorInjectionPlugin } from "../../plugins/CursorInjectionPlugin/CursorInjectionPlugin";
import { PropertyAutocompleteTool } from "../../plugins/Tools/PropertyAutocompleteTool/PropertyAutocompleteTool";
import { EditorSettingsTool } from "../../plugins/Tools/EditorSettingsTool/EditorSettingsTool";

export interface IPluginManagerFactory {
    createPluginManager(): PluginManager;
}

export abstract class BasePluginManagerFactory {
    createPluginManager() {
        var pluginMangager = new PluginManager();

        //inject all plugins
        pluginMangager.registerPlugin(new EditorChangePlugin());
        pluginMangager.registerPlugin(new SyntaxHighlightPlugin());
        pluginMangager.registerPlugin(new ErrorCheckPlugin());
        pluginMangager.registerPlugin(new AutocompletitionPlugin());
        pluginMangager.registerPlugin(new CursorInjectionPlugin());

        pluginMangager.registerPlugin(new EditorSettingsTool());
        pluginMangager.registerPlugin(new PropertyAutocompleteTool());
        this.registerAdditionalPlugins(pluginMangager);
        return pluginMangager;
    }

    abstract registerAdditionalPlugins(pluginMangager: PluginManager): void;
}