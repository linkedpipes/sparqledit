import { EditorSettingsStore } from '../store/EditorSettingsStore';
import { iresult, ParserResultStore } from "../service/ParsingService";
import { JsonFormatter } from "./utils/JsonFormatter";
import * as React from "react";
import { observer } from "mobx-react";
import { ParserLoggerStackView } from "./ParserLoggerStackView";
import { ParserLoggerStateStackView } from "./ParserLoggerStateStackView";

export interface ParserLoggerStateProps {
    parserResultStore: ParserResultStore;
    editorSettingsStore: EditorSettingsStore;
}

@observer
export class ParserLoggerStates extends React.Component<ParserLoggerStateProps, any> {
    createStateCard(color: string, headerElement: JSX.Element, bodyElement: JSX.Element) {
        return <div>
            <div className={"lighten-4 " + color}>
                {headerElement}
            </div>
            <div>
                {bodyElement}
            </div>
        </div>;
    }

    shiftStep(step: any) {
        return this.createStateCard('red',
            <span><b>Shift</b>:[{step.terminal}] {step.stat}</span>,
            <ul className="collection">
                <li className="collection-item">Value: {step.text}</li>
                <li className="collection-item">Lookahead: Normal ({step.symbol}) Error({step.preErrorSymbol})</li>
                <ParserLoggerStackView stack={step.stack} />
                {/*<li className="collection-item" ng-if="settings.items.showStack" ng-init="stateStack=step.allstack" ng-include="'./views/debugger/stateStackView.html'"></li>*/}
            </ul>
        )


    }

    reduceStep(step: any) {
        return this.createStateCard('indigo',
            <span><b>Reduce</b>: [ {step.nontermina}} ] {step.state}</span>,
            <ul className="collection">
                <li className="collection-item">Prereduce: <JsonFormatter objectToJson={step.prereduce} /></li>
                <li className="collection-item">Lookahead: Normal ({step.symbol}) Error ({step.preErrorSymbol})</li>
                <li className="collection-item">Prereduce loc: <JsonFormatter objectToJson={step.prereduceLoc} /> </li>
                <li className="collection-item">Productions: <JsonFormatter objectToJson={step.productions} /> </li>
                <li className="collection-item">Result: <JsonFormatter objectToJson={step.result} /> </li>
                <li><ParserLoggerStackView stack={step.stack} /></li>
                <li><ParserLoggerStateStackView stateStack={step.allstack} /></li>
                {/*<li className="collection-item" ng-if="settings.items.showStack" ng-init="stateStack=step.allstack" ng-include="'./views/debugger/stateStackView.html'"></li>*/}
            </ul>
        )
    }

    popStep(step: any) {
        return this.createStateCard('yellow',
            <span><b>Pop stack {step.state}</b></span>,
            <ul className="collection">
                <li className="collection-item">Depth: {step.depth}</li>
                <li className="collection-item">Lookahead: Normal ({step.symbol}) Error({step.preErrorSymbol})</li>
                <li className="collection-item">Error: <JsonFormatter objectToJson="step.error" />) </li>
                <li className="collection-item">Unwind symbols number: <JsonFormatter objectToJson="step.stack" />)</li>
                <li className="collection-item">Unwind symbols: <JsonFormatter objectToJson="step.stackNamed" />)</li>
                <li className="collection-item">Unwind values: <JsonFormatter objectToJson="step.vstack" />)</li>
            </ul>);
    }

    renderStep(step: any) {
        switch (step.action) {
            case 'shift':
                return this.shiftStep(step);
            case 'reduce':
                return this.reduceStep(step);
            case 'popStack':
                return this.popStep(step);
            default:
                throw new Error('Unknow step action ' + step.action + '.');
        }
    }

    parserLogView() {
        return <ul className="collapsible" data-collapsible="expandable">
            {this.props.parserResultStore.result.parserLog.map((step: any) =>
                <li>
                    {this.renderStep(step)}
                </li>)
            }
        </ul>
    }

    render() {
        if (this.props.parserResultStore.result.parserLog == null ||
            !this.props.editorSettingsStore.getSettings('showParserLog')) {
            return null;
        }

        return (<div className="card green lighten-3">
            <div className="card-content">
                <span className="card-title">Parser log</span>
                <div>
                    {this.parserLogView()}
                </div>
            </div>
        </div>);
    }
}
