import { EditorSettingsStore } from '../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { iresult, ParserResultStore } from "../service/ParsingService";
import { ParserLoggerStates } from "./ParserLoggerState";
import { JsonFormatter } from "./utils/JsonFormatter";

export interface ParserLoggerProps {
    parserResultStore: ParserResultStore;
    editorSettingsStore: EditorSettingsStore;
}

@observer
export class ParserLogger extends React.Component<ParserLoggerProps, any> {
    createCard(color: string, title: string, child: JSX.Element) {
        return <div className={'card ' + color}>
            <div className="card-content white-text">
                <span className="card-title">{title}</span>
                {child}
            </div>
        </div>;
    }

    parserErrorOutputCard() {
        return this.createCard("Red", "Parser error", <ul className="collection black-text">
            <li className="collection-item">
                Message {this.props.parserResultStore.result.parserErrorOutput.message}
            </li>
            <li className="collection-item">
                Trace messages:
                    <ul className="collection">
                    <li className="collection-item black-text">
                        {
                            this.props.parserResultStore.result.parserErrorOutput.tracedParserErrors.map((parserError: any) =>
                                <div>Unexpected token {parserError.problemToken}, expected one of
                                    {parserError.expected.map((expectedToken: any) =>
                                        <span>
                                            '{expectedToken}',
                                        </span>)
                                    }
                                </div>)
                        }
                    </li>
                </ul>
            </li>
        </ul>);
    }

    lexerErrorOutputCard() {
        return this.createCard('red', 'Lexer error', <JsonFormatter objectToJson={this.props.parserResultStore.result.lexerErrorOutput}/>)
    }

    parserOutputCard() {
        return this.createCard('blue', 'Parser result', <div>
            <JsonFormatter objectToJson={this.props.parserResultStore.result.parserOutput} />
            <span className="card-title">Parser errors</span>
            <div>
                <ul className="collection black-text">
                    {
                        this.props.parserResultStore.result.parserErrors.map((parserError: any) => <li className="collection-item">
                            <ul>
                                <li>Type: {parserError.type}</li>
                                <li>
                                    Start from {parserError.yylocStart.first_line}:{parserError.yylocStart.first_column} TO {parserError.yylocStart.last_line}:{parserError.yylocStart.last_column}
                                </li>
                                <li>
                                    End from {parserError.yylocEnd.first_line}:{parserError.yylocEnd.first_column} TO {parserError.yylocEnd.last_line}:{parserError.yylocEnd.last_column}
                                </li>
                            </ul>
                        </li>)
                    }
                </ul>
            </div>
        </div>)

    }
    lexerOutputCard() {
        return this.createCard('blue', 'Lexer output', <p>{this.props.parserResultStore.result.lexerOutput}</p>);
    }
    render() {
        if (this.props.parserResultStore.result == null) {
            return null;
        }
        var res = this.props.parserResultStore.result;
        return (<div>
            {res.parserErrorOutput == null ? null : this.parserErrorOutputCard()}
            {res.lexerErrorOutput == null ? null : this.lexerErrorOutputCard()}
            {res.parserOutput == null || !this.props.editorSettingsStore.getSettings('showParserOutput') ? null : this.parserOutputCard()}
            {res.lexerOutput == null || !this.props.editorSettingsStore.getSettings('showLexerOutput') ? null : this.lexerOutputCard()}
            <ParserLoggerStates parserResultStore={this.props.parserResultStore} editorSettingsStore={this.props.editorSettingsStore} />
        </div>);
    }
}
