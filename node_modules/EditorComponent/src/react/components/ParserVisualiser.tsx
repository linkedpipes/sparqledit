import * as React from "react";
import { observer } from "EditorComponent/node_modules/mobx-react";

export interface item {
    id: number
    rules: string[]
}

export interface IparserVisualiser {
    itemSets: item[]
}

export interface ParserVisualiserProps {
    parserVisualiser: IparserVisualiser;
}

@observer
export class ParserVisualiser extends React.Component<ParserVisualiserProps, any> {

    references(itemSet: item) {
        /*<li className="collection-item" ng-repeat="referenceId in ::getItemSetReferences(parserVisualiser.itemSets, itemSet.Id) track by $index">
            <a href="#itemSet{{referenceId}}" target="_self">{{::referenceId}}</a>
        </li>*/
        return <li>nic</li>;
    }

    rules(itemSet: item) {
        return itemSet.rules.map(rule => <li className="collection-item">{rule}</li>)
    }

    transitions(itemSet: item) {
        /*<li className="collection-item" ng-repeat="(transitionSymbol, transitionState) in ::itemSet.Transitions track by $index">
            <a href="#itemSet{{transitionState}}" target="_self">{{::transitionSymbol}} - {{::transitionState}}</a>
        </li>*/
        return <li>nic</li>;
    }
    table(itemSet: item) {
        {/*<li className="collection-item" ng-repeat="action in ::parserVisualiser.table[itemSet.Id]">
                                <div ng-if="action.actionType == 'goto'">
                                    {{::action.symbol}} Goto {{::action.state}}
                                        </div>
                                <div ng-if="action.actionType == 'shift'">
                                    {{::action.symbol}} Shift {{::action.state}}
                                        </div>
                                <div ng-if="action.actionType == 'reduce'">
                                    {{::action.symbol}} Reduce {{::action.production}}
                                        </div>
                            </li>*/}
        return <li>Nic</li>
    }

    repeat1() {
        return this.props.parserVisualiser.itemSets.map((itemSet) => <li>
            <div className="collapsible-header" key={itemSet.id}>{itemSet.id}</div>
            <div className="collapsible-body">
                <ul className="collection">
                    <li className="collection-item">
                        Rules:
                        <ul className="collection">
                            {this.rules(itemSet)}
                        </ul>
                    </li>
                    <li className="collection-item">
                        References:
                        <ul className="collection">
                            {this.references(itemSet)}
                        </ul>
                    </li>
                    <li className="collection-item">
                        Transitions:
                        <ul className="collection">
                            {this.transitions(itemSet)}
                        </ul>
                    </li>
                    <li className="collection-item">
                        Table:
                        <ul className="collection">
                            {this.table(itemSet)}
                        </ul>
                    </li>
                </ul>
            </div>
        </li >)
    }

    render() {
        return (
            <div className="card blue">
                <div className="card-content">
                    <span className="card-title">Parser states</span>
                    <p>
                        <ul className="collapsible" data-collapsible="expandable">
                            {this.repeat1()}
                        </ul>
                    </p>
                </div>
            </div>
        );
    }
}
