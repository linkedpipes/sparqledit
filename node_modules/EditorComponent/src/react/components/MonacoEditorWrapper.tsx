import * as React from "react";
import { observer } from "EditorComponent/node_modules/mobx-react";

export interface MonacoEditorWrapperProps {
    setMonacoEditor(monacoEditor: monaco.editor.IStandaloneCodeEditor): void
}

@observer
export class MonacoEditorWrapper extends React.Component<MonacoEditorWrapperProps, any> {

    constructor() {
        super();
    }

    componentDidMount() {
        this.initMonacoEditor();
    }

    createMonacoEditor() {
        var editor = monaco.editor.create(document.getElementById('queryEditorContainer'), {
            value: [
                'select * where {',
                '?a ?b ?c',
                '}'
            ].join('\n'),
            language: 'sparql'
        });
        return editor;
    }

    initMonacoEditor() {
        var fn = this.createMonacoEditor;
        var callback = this.props.setMonacoEditor;
        (window as any).requirejs.config({ paths: { vs: '../node_modules/monaco-editor/min/vs' } });
        (window as any).requirejs(['vs/editor/editor.main'], function () {
            var editor = fn.call(this);
            callback(editor);
        });
    }

    render() {
        var style = { height: "300px", border: "1px solid grey" };
        return (<div id="queryEditorContainer" style={style}></div>);
    }
}