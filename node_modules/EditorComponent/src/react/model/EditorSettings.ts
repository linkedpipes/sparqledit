import { TypedRecord, makeTypedFactory } from 'typed-immutable-record';
import * as immutable from 'immutable';

export class EditorSettingItem {
    constructor(public name: string, public title: string) {

    }
}

var defaultSettings: IEditorSettings = {
    itemsDefinitions: [],
    items: immutable.Map<string, boolean>(),

    registerItem: function (settingsItem: EditorSettingItem) {
        this.itemsDefinitions.push(settingsItem);
        this.items[settingsItem.name] = false;
        return this;
    },

    setSettings: function (settingsName: string, settingsValue: boolean) {
        return this.update('items',
            (items: immutable.Map<string, boolean>) => items.set(settingsName, settingsValue));
    }
};

export interface IEditorSettings {
    itemsDefinitions: EditorSettingItem[];
    items: immutable.Map<string, boolean>;

    registerItem(settingsItem: EditorSettingItem): IEditorSettings
    setSettings(settingsName: string, settingsValue: boolean): IEditorSettings
}

export interface IEditorSettingsRecord extends TypedRecord<IEditorSettingsRecord>, IEditorSettings { }

export const EditorSettingsFactory = makeTypedFactory<IEditorSettings, IEditorSettingsRecord>(defaultSettings);