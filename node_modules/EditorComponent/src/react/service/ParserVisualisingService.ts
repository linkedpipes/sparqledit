import * as _ from 'lodash';

export interface IParserVisualisingServiceResult {
    itemSets: any;
    table: any;
}

export class ParserVisualisingService {

    run(parser: any): IParserVisualisingServiceResult {
        var result: IParserVisualisingServiceResult = {
            itemSets: parser.itemSets,
            table: this.mapTable(parser)
        };
        return result;
    }

    getItemSetReferences(itemSets: any, id: any) {
        var result = itemSets
            .filter(function (x: any) {
                return _.includes(x.Transitions, id);
            })
            .map(function (x: any) {
                return x.Id;
            });
        return result;
    }

    createSymbolTable(parser: any) {
        var oldSymbols = parser.symbols_;
        var newSymbols: any = [];
        Object.keys(oldSymbols).forEach(
            function (x) {
                newSymbols[oldSymbols[x]] = x;
            }
        );
        return newSymbols;
    }

    mapTable(parser: any) {
        var table = parser.table;
        var symbolTable = this.createSymbolTable(parser);
        var newTable: any = {};
        Object.keys(table).forEach(function (rowId) {
            var row = table[rowId];
            var newRow = Object.keys(row).map(function (key) {
                var action = row[key];
                var symbol = symbolTable[key];
                if (typeof action == 'number') {
                    return {
                        actionType: 'goto',
                        symbol: symbol,
                        state: action,
                    };
                }

                if (action[0] == 1) {
                    return {
                        actionType: 'shift',
                        symbol: symbol,
                        state: action[1]
                    };
                }
                else if (action == 3) {
                    return {
                        actionType: 'shift',
                        symbol: symbol,
                        state: 'accept'
                    };
                }

                var productionId = action[1];
                var production = parser.productions_[productionId];
                return {
                    actionType: 'reduce',
                    symbol: symbol,
                    production: productionId == 0 ? 'accept' : symbolTable[production[0]]
                };
            });
            newTable[rowId] = newRow;
        });
        return newTable;
    }
}
