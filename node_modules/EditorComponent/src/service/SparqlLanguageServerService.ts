import { SparqlLanguageServer, TurtleGraphWrapper, OntologyHiearchyBuilder, OntologyAssertionsBuilder, SparqlAutocompleteProvider, SparqlSignatureHelpProvider } from "SparqlAutocompletion";


export class SparqlLanguageServerService {
    private sparqlLanguageServer: SparqlLanguageServer;

    constructor() {
        var ontologyContent = require('raw-loader!../resources/schema.ttl');
        this.sparqlLanguageServer = new SparqlLanguageServer([ontologyContent]);

        // var ontologyContent1 = require('raw-loader!../resources/dbpedia.ttl');
        // var ontologyContent2 = require('raw-loader!../resources/schemaorg.owl.ttl');
        // this.sparqlLanguageServer = new SparqlLanguageServer([ontologyContent1, ontologyContent2]);

        // var ontologyContent = require('raw-loader!../resources/schema.ttl');
        // this.sparqlLanguageServer = new SparqlLanguageServer([ontologyContent]);

        this.getOntologyFromServer('./ontologies/dbpedia.ttl', (ontologyCon) => {
             var ontologyHiearchyBuilder = new OntologyHiearchyBuilder();
             var ontologyAssertionsBuilder = new OntologyAssertionsBuilder();
             console.log("Graph creation start")
             var graph = new TurtleGraphWrapper(ontologyCon);
             console.log("Graph created")
             
             console.log("Building assertion start")
             var ontologyAssertions = ontologyAssertionsBuilder.buildOntologyAsertions(graph);
             console.log("Building hiearchy start")
             var ontologyHiearchy = ontologyHiearchyBuilder.createOntologyHiearchy(ontologyAssertions);
             this.sparqlLanguageServer._ontologyHiearchy = ontologyHiearchy;
             this.sparqlLanguageServer._sparqlAutocompleteProvider = new SparqlAutocompleteProvider(ontologyHiearchy);
             this.sparqlLanguageServer._sparqlSignatureHelpProvider = new SparqlSignatureHelpProvider(ontologyHiearchy);
             console.log("Ontology is prepared")
        });
    }

    getOntologyFromServer(url: string, done: (ontologyContent: string) => void) {
        console.log("Ontology download start")
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.send(null);
        xhr.onreadystatechange = function () {
            var DONE = 4; // readyState 4 means the request is done.
            var OK = 200; // status 200 is a successful return.
            if (xhr.readyState === DONE) {
                if (xhr.status === OK) {
                    console.log("!!!!!! Ontology download completed !!!!!!!!!")
                    done(xhr.responseText);
                }
            } 
        };
    }


    getLanguageServer() {
        return this.sparqlLanguageServer;
    }
}