import { SparqlLanguageServer, Serializer, TurtleGraphWrapper, OntologyHiearchyBuilder, OntologyAssertionsBuilder, SparqlAutocompleteProvider, SparqlSignatureHelpProvider, SparqlLanguageServerFactory } from "SparqlAutocompletion";

export class SparqlLanguageService {
    private sparqlLanguageServer: SparqlLanguageServer;

    constructor() {
        // var source = './ontologies/dbpedia.ttl';
        var source = './ontologies/lov3.nq';

        var sparqlLanguageServerFactory = new SparqlLanguageServerFactory();
        // this.getOntologyFromServer(source, (ontologyContent) => {
        //     this.sparqlLanguageServer = sparqlLanguageServerFactory.createFromTurtle(ontologyContent);
        // });
        this.getOntologyFromServer('./ontologies/precomputednow.json', (ontologyContent) => {
            this.sparqlLanguageServer = sparqlLanguageServerFactory.createFromSerializedOntologyAssertions(ontologyContent);
        });
    }

    getOntologyFromServer(url: string, done: (ontologyContent: string) => void) {
        console.log("Ontology download start")
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.send(null);
        xhr.onreadystatechange = function () {
            var DONE = 4; // readyState 4 means the request is done.
            var OK = 200; // status 200 is a successful return.
            if (xhr.readyState === DONE) {
                if (xhr.status === OK) {
                    console.log("!!!!!! Ontology download completed !!!!!!!!!")
                    done(xhr.responseText);
                }
            }
        };
    }

    getLanguageServer() {
        return this.sparqlLanguageServer;
    }
}