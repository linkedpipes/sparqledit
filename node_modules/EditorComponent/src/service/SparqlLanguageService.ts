import { AlgorithmErrorLogger, SparqlLanguageServerFactory, SparqlLanguageServer } from "SparqlAutocompletion";
import { SparqlEditorSettings } from "EditorComponent/src/editor/SparqlEditorSettings";
import { createHttpRequest } from "EditorComponent/src/utils/HttpRequest";

function createSparqlLanguageServerBasedOnSourceType(ontologyContext: string, sparqlEditorSettings: SparqlEditorSettings) {
    var sparqlLanguageServerFactory = new SparqlLanguageServerFactory();
    var sparqlLanguageServerSettings = {
        parentOntologyClassTracking: sparqlEditorSettings.parentOntologyClassTracking,
        adviseAtomicClassFromComplexClass: sparqlEditorSettings.adviseAtomicClassFromComplexClass,
        isLoggingEnabled: sparqlEditorSettings.isLoggingEnabled,
        languageTag: sparqlEditorSettings.languageTag
    };

    var ontologySourceType = sparqlEditorSettings.ontologySourceType || "custom";

    switch (ontologySourceType) {
        case "custom":
            return sparqlLanguageServerFactory.createFromEditorFormat(ontologyContext, sparqlLanguageServerSettings);
        case "precomputed":
            return sparqlLanguageServerFactory.createFromSerializedOntologyAssertions(ontologyContext, sparqlLanguageServerSettings);
        case "raw":
            return sparqlLanguageServerFactory.createFromTurtle(ontologyContext, sparqlLanguageServerSettings);
        default:
            throw new Error("Unknown ontologySourceType.");
    }
}

function logOntologyBuildErrors(sparqlEditorSettings: SparqlEditorSettings, buildOntologyAlgorithmErrorLogger: AlgorithmErrorLogger) {
    if (sparqlEditorSettings.logOntologyBuildError === true) {
        buildOntologyAlgorithmErrorLogger.Errors.forEach(error => {
            console.log("Ontology creation error:" + error.getMessage())
        })
    }
}

export function createSparqlLanguageServer(
    sparqlEditorSettings: SparqlEditorSettings,
    resolve: (sparqlLanguageServer: SparqlLanguageServer) => void,
    reject: (errorMessage: string) => void) {
    try {
        createHttpRequest(sparqlEditorSettings.ontologySourceUrl,
            (responseContent) => {
                try {
                    var sparqlLanguageServerFactoryResult = createSparqlLanguageServerBasedOnSourceType(responseContent, sparqlEditorSettings);
                    logOntologyBuildErrors(sparqlEditorSettings, sparqlLanguageServerFactoryResult.buildOntologyAlgorithmErrorLogger);
                    resolve(sparqlLanguageServerFactoryResult.sparqlLanguageServer);
                }
                catch (error) {
                    reject(error.toString());
                }
            },
            () => {
                reject('Can not acess given url.');
            }
        );
    }
    catch (error) {
        reject(error.toString());
    }
}