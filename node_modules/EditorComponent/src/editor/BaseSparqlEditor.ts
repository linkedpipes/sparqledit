/// <reference path="../../node_modules/monaco-editor/monaco.d.ts" />
import { IPluginManagerFactory } from '../factory/plugin/PluginManagerFactory';
import { EditorApp, EditorAppProps } from "../components/EditorApp";
import { SparqlEditorSettings } from 'EditorComponent/src/editor/SparqlEditorSettings';

import * as React from "react";
import * as ReactDOM from "react-dom";

export abstract class BaseSparqlEditor {
    constructor(public container: HTMLElement,
        private sparqlEditorSettings: SparqlEditorSettings,
        private pluginManagerFactory: IPluginManagerFactory) {

        if (!(container instanceof Element)) {
            throw new Error("Sparql editor given container is not instance of Element (DOM).");
        }
        this.validateSparqlEditorSettings();
    }

    private validateSparqlEditorSettings() {
        if (this.sparqlEditorSettings == null) {
            throw new Error("Sparql editor settings can not be null.");
        }

        if (this.sparqlEditorSettings.monacoEditorUrl == null) {
            throw new Error("Monaco editor url setting is compulsory.");
        }

        if (this.sparqlEditorSettings.ontologySourceUrl == null) {
            throw new Error("Ontology source url setting is compulsory.");
        }
    }

    private createEditorAppProps(): EditorAppProps {
        var pluginManager = this.pluginManagerFactory.createPluginManager();

        return {
            pluginManager: pluginManager,
            sparqlEditorSettings: this.sparqlEditorSettings
        }
    }

    protected abstract decorateRenderElement(editorAppElement: React.ComponentElement<any, any>): React.ComponentElement<any, any>;

    public init() {
        var editorAppElement = React.createElement(EditorApp, this.createEditorAppProps());
        var renderElement = this.decorateRenderElement(editorAppElement);
        ReactDOM.render(renderElement, this.container);
    }
}