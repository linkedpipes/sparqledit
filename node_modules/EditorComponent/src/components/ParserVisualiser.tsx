import * as React from "react";
import { observer } from "mobx-react";
import { ParserVisualisingService, IParserVisualisingServiceResult, Action, GotoAction, ShiftAction, ReduceAction } from '../service/ParserVisualisingService';
import { Card, CardHeader, CardText, List, ListItem, Paper } from "material-ui"
import { EditorSettingsStore } from "../store/EditorSettingsStore";
import { ItemSet, ERSParserDebuggable } from "ERSParser";

export interface ParserVisualiserProps {
    ediorSettingsStore: EditorSettingsStore;
}

@observer
export class ParserVisualiser extends React.Component<ParserVisualiserProps, any> {

    private parserVisualiser: IParserVisualisingServiceResult;
    private parserVisualisingService = new ParserVisualisingService();

    constructor() {
        super();
        this.parserVisualiser = this.parserVisualisingService.run(new ERSParserDebuggable());
    }

    references(itemSet: ItemSet) {
        return this.parserVisualisingService.getItemSetReferences(this.parserVisualiser.itemSets, itemSet.Id)
            .map((referenceId, index) => (
                <ListItem key={index}>
                    <a href={'#itemSet' + referenceId} target="_self">{referenceId}</a>
                </ListItem>
            ));

    }

    rules(itemSet: ItemSet) {
        return itemSet.Rules.map((rule, index) => <ListItem key={index}>{rule}</ListItem>)
    }

    transitions(itemSet: ItemSet) {
        return Object.keys(itemSet.Transitions).map((transitionSymbol, index) => (
            <ListItem key={index}>
                <a href={'#itemSet' + itemSet.Transitions[transitionSymbol]} target="_self">{transitionSymbol} - {itemSet.Transitions[transitionSymbol]}</a>
            </ListItem>
        ));
    }

    renderAction(action: Action) {
        switch (action.actionType) {
            case 'goto':
                return <div>{action.symbol} Goto {(action as GotoAction).state}</div>;
            case 'shift':
                return <div>{action.symbol} Shift {(action as ShiftAction).state}</div>;
            case 'reduce':
                return <div>{action.symbol} Reduce {(action as ReduceAction).production}</div>;
            default:
                throw new Error('Unknonw action type.');
        }
    }

    table(itemSet: ItemSet) {
        return this.parserVisualiser.table[itemSet.Id].map((action, index) => (
            <ListItem key={index}>
                {this.renderAction(action)}
            </ListItem>
        ));
    }

    renderItemSet(itemSet: ItemSet, index: number) {
        return (
            <div id={'itemSet' + itemSet.Id} key={index}>
                <Card>
                    <CardHeader title={itemSet.Id} actAsExpander={true} />
                    <CardText expandable={true}>

                        <List>
                            <ListItem>
                                Rules:
                            <List>
                                    {this.rules(itemSet)}
                                </List>
                            </ListItem>
                            <ListItem>
                                References:
                            <List>
                                    {this.references(itemSet)}
                                </List>
                            </ListItem>
                            <ListItem>
                                Transitions:
                            <List>
                                    {this.transitions(itemSet)}
                                </List>
                            </ListItem>
                            <ListItem>
                                Table:
                            <List>
                                    {this.table(itemSet)}
                                </List>
                            </ListItem>
                        </List>
                    </CardText>
                </Card>
            </div >
        );
    }

    render() {
        if (!this.props.ediorSettingsStore.getSettings('showParserStates')) {
            return null;
        }
        return (
            <Card>
                <CardHeader title="Parser states" />
                <CardText>
                    {
                        this.parserVisualiser.itemSets.map((itemSet, index) => this.renderItemSet(itemSet, index))
                    }
                </CardText>
            </Card>
        );
    }
}
