import * as React from "react";
import { observer } from "mobx-react";

var Split = require("./utils/split");

export interface SplitterComponentProps {
    direction: ("horizontal" | "vertical");
    isSecondPaneVisible: boolean;
    onLayoutChanged(): void;
}

@observer
export class SplitterComponent extends React.Component<SplitterComponentProps, any> {
    splitter: any;

    initSplitter() {
        if (!this.props.isSecondPaneVisible) {
            return;
        }

        var firstPane = this.refs.firstPane;
        var secondPane = this.refs.secondPane;
        var onLayoutChanged = this.props.onLayoutChanged;

        this.splitter = Split([firstPane, secondPane], {
            direction: this.props.direction,
            sizes: [50, 50],
            onDrag: function () {
                onLayoutChanged();
            }
        });
    }

    componentDidMount() {
        this.initSplitter();
    }

    componentDidUpdate() {
        if (this.splitter != null) {
            this.splitter.destroy();
            this.splitter = null;
        }
        this.initSplitter();
        this.props.onLayoutChanged();
    }

    render() {
        var children = React.Children.toArray(this.props.children);
        return (
            <div style={{ width: "100%", height: "100%" }}>
                <div ref="firstPane" className="split">
                    {children[0]}
                </div>
                {!this.props.isSecondPaneVisible ? null :
                    <div ref="secondPane" className="split">
                        {children[1]}
                    </div>}
            </div>
        );
    }
}
