import { PluginManager } from '../plugins/PluginManager';
import { EditorSettingsStore } from '../store/EditorSettingsStore';
import { MonacoEditorWrapper } from "../components/MonacoEditorWrapper"
import { observable } from "EditorComponent/node_modules/mobx/lib/mobx";
import { ErrorConsole } from "../components/ErrorConsole";
import { ParserErrorStore } from "../store/ParserErrorsStore";
import { ToolRenderer } from "../components/ToolRenderer";
import { ToolStore } from "../store/ToolStore";
import { EditorPluginApi } from "../plugins/EditorPluginApi";
import * as React from "react";
import { observer } from "mobx-react";
import DevTools from 'mobx-react-devtools';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import { EditorSettingsFactory } from "EditorComponent/src/factory/EditorSettingsFactory";
import { SplitterComponent } from 'EditorComponent/src/components/SplitterComponent';
var injectTapEventPlugin = require("react-tap-event-plugin");
require("../css/editor.css");

export interface EditorAppProps {
    pluginManager: PluginManager;
}

@observer
export class EditorApp extends React.Component<any, any> {
    private toolStore = new ToolStore();
    private parserErrorStore: ParserErrorStore = new ParserErrorStore();
    private editorSettingsStore: EditorSettingsStore;
    private editor: monaco.editor.IStandaloneCodeEditor;
    constructor() {
        super();
        injectTapEventPlugin();

        var editorSettingsFactory = new EditorSettingsFactory();
        this.editorSettingsStore = editorSettingsFactory.createEditorSettings();
    }

    setMonacoEditor(monacoEditor: monaco.editor.IStandaloneCodeEditor) {
        var editorPluginApi = new EditorPluginApi(
            monacoEditor,
            this.editorSettingsStore,
            this.toolStore,
            this.parserErrorStore);
        this.editor = monacoEditor;
        this.props.pluginManager.initPlugins(editorPluginApi);
    }

    resetEditorLayout() {
        this.editor.layout();
    }

    render() {
        return (
            <MuiThemeProvider>
                <ToolRenderer toolStore={this.toolStore} resetEditorLayout={this.resetEditorLayout.bind(this)}>
                    <SplitterComponent direction={"vertical"} isSecondPaneVisible={true} onLayoutChanged={this.resetEditorLayout.bind(this)}>
                        <div> <MonacoEditorWrapper setMonacoEditor={this.setMonacoEditor.bind(this)} /></div>
                        <ErrorConsole parserErrorStore={this.parserErrorStore} />
                    </SplitterComponent>
                    <DevTools />
                </ToolRenderer>
            </MuiThemeProvider>
        );
    }
}