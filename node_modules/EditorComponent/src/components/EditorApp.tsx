import { PluginManager } from '../plugins/PluginManager';
import { EditorSettingsStore } from '../store/EditorSettingsStore';
import { MonacoEditorWrapper } from "../components/MonacoEditorWrapper"
import { ErrorConsole } from "../components/ErrorConsole";
import { ParserErrorStore } from "../store/ParserErrorsStore";
import { ToolRenderer } from "../components/ToolRenderer";
import { ToolStore } from "../store/ToolStore";
import { EditorPluginApi } from "../plugins/EditorPluginApi";
import * as React from "react";
import { observer } from "mobx-react";
import DevTools from 'mobx-react-devtools';
import { EditorSettingsFactory } from "EditorComponent/src/factory/EditorSettingsFactory";
import { SplitterComponent } from 'EditorComponent/src/components/SplitterComponent';
import { EditorStatusStore, EditorStatus } from 'EditorComponent/src/store/EditorStatusStore';
import { SparqlEditorSettings } from 'EditorComponent/src/editor/SparqlEditorSettings';
import { createSparqlLanguageServer } from 'EditorComponent/src/service/SparqlLanguageService';
import { SparqlLanguageServer } from 'SparqlAutocompletion';
import { registerSparqlProviders } from '../service/SparqlProvidersRegistration/SparqlProvidersRegistrationService';
import { SparqlLanguageServerProvider } from '../service/SparqlProvidersRegistration/SparqlLanguageServerProvider';

var injectTapEventPlugin = require("react-tap-event-plugin");
import "semantic-ui-checkbox/checkbox.min.css";
import "semantic-ui-input/input.min.css";

require("../css/editor.css");

export interface EditorAppProps {
    pluginManager: PluginManager;
    sparqlEditorSettings: SparqlEditorSettings;
}

@observer
export class EditorApp extends React.Component<EditorAppProps, any> {
    private toolStore = new ToolStore();
    private parserErrorStore: ParserErrorStore = new ParserErrorStore();
    private editorSettingsStore: EditorSettingsStore;
    private editor: monaco.editor.IStandaloneCodeEditor;
    private editorStatusStore: EditorStatusStore;
    private sparqlLanguageServerProvider: SparqlLanguageServerProvider;
    private editorPluginApi: EditorPluginApi;

    private areMonacoProvidersRegistrated: boolean = false;

    constructor(props: EditorAppProps) {
        super(props);
        injectTapEventPlugin();

        var editorSettingsFactory = new EditorSettingsFactory();
        this.editorSettingsStore = editorSettingsFactory.createEditorSettings();
        this.editorStatusStore = new EditorStatusStore();
        this.sparqlLanguageServerProvider = new SparqlLanguageServerProvider();

        this.downloadAndUpdateSparqlLanguageServer(props);
    }

    downloadAndUpdateSparqlLanguageServer(props: EditorAppProps) {
        createSparqlLanguageServer(props.sparqlEditorSettings,
            (sparqlLanguageServer) => {
                this.editorStatusStore.setActive();
                this.sparqlLanguageServerProvider.setSparqlLanguageServer(sparqlLanguageServer);
            }, (errorMessage) => {
                this.editorStatusStore.setError(errorMessage);
            });
    }

    changeOntologySourceUrl(ontologySourceUrl: string, ontologySourceType?: "custom" | "raw" | "precomputed") {
        this.toolStore.flush();
        this.props.sparqlEditorSettings.ontologySourceUrl = ontologySourceUrl;
        if (ontologySourceType != null) {
            this.props.sparqlEditorSettings.ontologySourceType = ontologySourceType;
        }
        this.editorStatusStore.setLoading();
        this.downloadAndUpdateSparqlLanguageServer(this.props);
    }

    setMonacoEditor(monacoEditor: monaco.editor.IStandaloneCodeEditor) {
        if (!this.areMonacoProvidersRegistrated) {
            registerSparqlProviders(this.sparqlLanguageServerProvider);
            this.areMonacoProvidersRegistrated = true;
        }
        if (this.editor != null) {
            this.editor.dispose();
        }

        this.editorPluginApi = new EditorPluginApi(
            monacoEditor,
            this.sparqlLanguageServerProvider.getSparqlLanguageServer(),
            this.editorSettingsStore,
            this.toolStore,
            this.parserErrorStore);

        this.editor = monacoEditor;
        this.props.pluginManager.initPlugins(this.editorPluginApi);
    }

    resetEditorLayout() {
        this.editor.layout();
    }

    renderActive() {
        var isErrorConsoleVisible = this.parserErrorStore.errors.length > 0;

        return (
            <ToolRenderer toolStore={this.toolStore} resetEditorLayout={this.resetEditorLayout.bind(this)}>
                <SplitterComponent direction={"vertical"} isSecondPaneVisible={isErrorConsoleVisible} onLayoutChanged={this.resetEditorLayout.bind(this)}>
                    <MonacoEditorWrapper
                        monacoEditorUrl={this.props.sparqlEditorSettings.monacoEditorUrl}
                        defaultEditorValue={this.props.sparqlEditorSettings.defaultEditorValue}
                        setMonacoEditor={this.setMonacoEditor.bind(this)} />
                    <ErrorConsole parserErrorStore={this.parserErrorStore} />
                </SplitterComponent>
            </ToolRenderer>);
    }

    renderLoading() {
        return <div className="loadingBar"><div>Editor is loading ontologies ...</div></div>;
    }

    renderError() {
        return <div className="errorBar">
            <div>
                <h1>Can not load ontology error message because:</h1>
                <br />
                <div className="errorMessage">
                    {this.editorStatusStore.getErrorMessage()}
                </div>
            </div>
        </div>;
    }

    renderBody() {
        switch (this.editorStatusStore.getEditorStatus()) {
            case EditorStatus.Active:
                return this.renderActive();
            case EditorStatus.Loading:
                return this.renderLoading();
            case EditorStatus.Error:
                return this.renderError();
            default:
                throw new Error("Unknown editor status.");
        }
    }

    render() {
        return (
            <div className="sparqlEditor">
                {this.renderBody()}
                <DevTools />
            </div>
        );
    }
}