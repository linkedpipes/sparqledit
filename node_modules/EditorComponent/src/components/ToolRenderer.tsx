import * as React from "react";
import { observer } from "mobx-react";
import { ToolStore, ToolType } from "../store/ToolStore";
import { observable } from "mobx";
import { SplitterComponent } from "EditorComponent/src/components/SplitterComponent";
var Split = require("./utils/split");

export interface ToolRendererProps {
    toolStore: ToolStore;
    resetEditorLayout(): void;
}

@observer
export class ToolRenderer extends React.Component<ToolRendererProps, any> {
    constructor() {
        super();
        this.renderToolsOfType = this.renderToolsOfType.bind(this);
    }

    @observable isSidebarVisible = true;
    @observable choosenToolIndex = 0;

    renderToolsOfType(toolType: ToolType) {
        return this.props.toolStore.tools
            .filter(tool => tool.type == toolType)
            .map((tool, index) =>
                <div key={index}>
                    {tool.content}
                </div>
            );
    }

    renderClasic() {
        return (
            <div>
                {this.choosenToolIndex < this.props.toolStore.tools.length ? this.props.toolStore.tools[this.choosenToolIndex].content : ""}
            </div>
        );
    }

    chooseTool(toolIndex: number) {
        this.choosenToolIndex = toolIndex;
    }

    renderToolNames() {
        if (this.props.toolStore.tools.length < 2) {
            return null;
        }
        var toolNames = this.props.toolStore.tools.map(x => x.toolName);
        return toolNames.map((toolName, index) => <button key={index} onClick={this.chooseTool.bind(this, index)}>{toolName}</button>);
    }

    toggleSidebar() {
        this.isSidebarVisible = !this.isSidebarVisible;
    }

    render() {
        return (
            <div className="stretchHeight">
                <SplitterComponent direction={"horizontal"} isSecondPaneVisible={this.isSidebarVisible} onLayoutChanged={this.props.resetEditorLayout}>
                    <div className="stretchHeight">
                        {/* <div>
                            {this.renderToolNames()}
                        </div> */}
                        <div className="toggleBar iconSidebar" onClick={this.toggleSidebar.bind(this)}></div>
                        <div style={{ height: "calc(100% - 25px)" }}>
                            {this.props.children}
                        </div>
                    </div>
                    <div>
                        {this.renderClasic()}
                    </div>
                </SplitterComponent>
            </div>
        );
    }
}