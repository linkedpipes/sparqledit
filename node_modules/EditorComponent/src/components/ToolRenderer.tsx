import * as React from "react";
import { observer } from "mobx-react";
import { ToolStore, ToolType } from "../store/ToolStore";
import { observable } from "mobx";
var SplitPane = require("react-split-pane");
import "jquery-ui";
var Split = require('./utils/split');

export interface ToolRendererProps {
    toolStore: ToolStore
    resetEditorLayout(): void
}

@observer
export class ToolRenderer extends React.Component<ToolRendererProps, any> {
    constructor() {
        super();
        this.renderToolsOfType = this.renderToolsOfType.bind(this);
    }

    @observable isClasic = true;
    
    renderToolsOfType(toolType: ToolType) {
        return this.props.toolStore.tools
            .filter(tool => tool.type == toolType)
            .map((tool, index) =>
                <div key={index}>
                    {tool.content}
                </div>
            )
    }

    splitter: any;
    componentDidMount() {
        this.init();
    }

    init() {
        var leftPane = document.getElementById("left_pane");
        var rightPane = document.getElementById("right_pane");
        var resetLayout = this.props.resetEditorLayout;

        this.splitter = Split([leftPane, rightPane], {
            direction: 'horizontal',
            sizes: [50, 50],
            onDrag: function () {
                resetLayout();
            }
        });
    }
    renderClasic() {
        return (
            <div>
                {this.renderToolsOfType(ToolType.SideBar)}
            </div>
        );
    }

    renderJinak(): any {
        return null;
    }

    toggle() {
        if (this.isClasic) {
            this.splitter.setSizes([100, 0]);
            this.splitter.destroy();
        }
        else {
            this.init();
        }
        this.isClasic = !this.isClasic;
        this.props.resetEditorLayout();
    }

    render() {
        return (
            <div style={{ width: "100%", height: "100%" }}>
                <div id="container" style={{ width: "100%", height: "100%" }}>
                    <div id="left_pane" className="split">
                        <button onClick={this.toggle.bind(this)}>Toggle sidebar</button>
                        {this.props.children}
                        {this.renderToolsOfType(ToolType.Bottom)}
                    </div>
                    <div id="right_pane" className="split" style={{ width: "0px" }}>
                        {
                            this.isClasic ? this.renderClasic() : this.renderJinak()
                        }
                    </div>
                </div>
            </div>
        );
    }
}