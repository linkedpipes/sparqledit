import { EditorSettingsStore } from '../store/EditorSettingsStore';
import * as React from "react";
import { observer } from "mobx-react";
import { iresult, ParserResultStore } from "../service/ParsingService";
import { ParserLoggerStates } from "./ParserLoggerState";
import { JsonFormatter } from "./utils/JsonFormatter";
import { Card, CardHeader, CardTitle, CardText } from "material-ui/Card"
import { List, ListItem } from "material-ui"
import { Paper } from "material-ui"
export interface ParserLoggerProps {
    parserResultStore: ParserResultStore;
    editorSettingsStore: EditorSettingsStore;
}

@observer
export class ParserLogger extends React.Component<ParserLoggerProps, any> {
    private warningColor = "FFAB91";
    private classicColor = "81D4FA";

    createCard(color: string, title: string, child: JSX.Element) {
        return <Paper><Card>
            <CardHeader title={title} subtitle={null} />
            <CardText>
                {child}
            </CardText>
        </Card></Paper>
    }

    parserErrorOutputCard() {
        return this.createCard(this.warningColor, "Parser error",
            <Paper><List>
                <ListItem>
                    Message {this.props.parserResultStore.result.parserErrorOutput.message}
                </ListItem>
                <ListItem>
                    Trace messages:
                    <Paper><List>
                        <ListItem>
                            {
                                this.props.parserResultStore.result.parserErrorOutput.tracedParserErrors.map((parserError: any) =>
                                    <div>Unexpected token {parserError.problemToken}, expected one of
                                    {parserError.expected.map((expectedToken: any) =>
                                            <span>
                                                '{expectedToken}',
                                        </span>)
                                        }
                                    </div>)
                            }
                        </ListItem>
                    </List></Paper>
                </ListItem>
            </List></Paper>);
    }

    lexerErrorOutputCard() {
        return this.createCard(this.warningColor, 'Lexer error', <JsonFormatter objectToJson={this.props.parserResultStore.result.lexerErrorOutput} />)
    }

    parserOutputCard() {
        return this.createCard(this.classicColor, 'Parser result', <div>
            <JsonFormatter objectToJson={this.props.parserResultStore.result.parserOutput} multiLine={true} />
            <span className="card-title">Parser errors</span>
            <div>
                <Paper><List>
                    {
                        this.props.parserResultStore.result.parserErrors.map((parserError: any) => <ListItem>
                            <Paper><List>
                                <ListItem>Type: {parserError.type}</ListItem>
                                <ListItem>
                                    Start from {parserError.yylocStart.first_line}:{parserError.yylocStart.first_column} TO {parserError.yylocStart.last_line}:{parserError.yylocStart.last_column}
                                </ListItem>
                                <ListItem>
                                    End from {parserError.yylocEnd.first_line}:{parserError.yylocEnd.first_column} TO {parserError.yylocEnd.last_line}:{parserError.yylocEnd.last_column}
                                </ListItem>
                            </List></Paper>
                        </ListItem>)
                    }
                </List></Paper>
            </div>
        </div>)
    }

    lexerOutputCard() {
        return this.createCard(this.classicColor, 'Lexer output', <div>{this.props.parserResultStore.result.lexerOutput}</div>);
    }

    render() {
        if (this.props.parserResultStore.result == null) {
            return null;
        }
        var res = this.props.parserResultStore.result;
        return (<div>
            {res.parserErrorOutput == null ? null : this.parserErrorOutputCard()}
            {res.lexerErrorOutput == null ? null : this.lexerErrorOutputCard()}
            {res.parserOutput == null || !this.props.editorSettingsStore.getSettings('showParserOutput') ? null : this.parserOutputCard()}
            {res.lexerOutput == null || !this.props.editorSettingsStore.getSettings('showLexerOutput') ? null : this.lexerOutputCard()}
            <ParserLoggerStates parserResultStore={this.props.parserResultStore} editorSettingsStore={this.props.editorSettingsStore} />
        </div>);
    }
}
