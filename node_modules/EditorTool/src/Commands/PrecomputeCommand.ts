import { ICommand } from "EditorTool/src/Commander/ICommand";
import { readFileFromArgument, writeIntoFileArgument } from "EditorTool/src/Utils/FileUtils";
import { TurtleGraphWrapper, buildOntologyAssertions, Serializer } from "SparqlAutocompletion";

export class PrecomputeCommand implements ICommand {
    getDescription(): string {
        return "Precomputes ontology";
    }

    getCommandDefinition(): string {
        return "precompute <sourceFile> <destinationFile>";
    }

    createAssertions(ontologyContent: string) {
        var serializer = new Serializer();

        var graph = new TurtleGraphWrapper(ontologyContent);
        var ontologyAssertions = buildOntologyAssertions(graph);
        var errors = ontologyAssertions.algorithmErrorLogger.Errors;
        
        if (errors.length > 0) {
            ontologyAssertions.algorithmErrorLogger.Errors.forEach(x => console.log(x.getMessage()));
        }

        var serializedOntologyAssertions = serializer.serializeOntologyAssertions(ontologyAssertions.ontologyAssertions);
        return serializedOntologyAssertions;
    }

    getAction() {
        return (sourceFile: string, destinationFile: string, cmd: any) => {
            var sourceFileContent = readFileFromArgument(sourceFile);
            var serializeOntologyAssertions = this.createAssertions(sourceFileContent);
            writeIntoFileArgument(destinationFile, serializeOntologyAssertions);

            console.log("done");
        };
    }
}