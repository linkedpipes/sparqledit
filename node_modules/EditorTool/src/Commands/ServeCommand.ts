import { ICommand } from "EditorTool/src/Commander/ICommand";
import { readFileFromArgument } from "EditorTool/src/Utils/FileUtils";
import { createStaticServerOnPort } from "EditorTool/src/Utils/HttpUtils";
import { error } from "util";
import { CommanderWrapperError } from "EditorTool/src/Commander/CommanderWrapper";

export class ServeCommand implements ICommand {
    getDescription(): string {
        return "Creates simple http server that returns given ontology on given port."
    }

    getCommandDefinition(): string {
        return "serve <port> <ontologyFormat> <ontologyFile>"
    }

    getAction(): (...args: any[]) => void {
        return (port: string, ontologyFormat, ontologyFile: string) => {
            var portNumeber = parseInt(port);
            var ontologyContent = readFileFromArgument(ontologyFile);
            var serveContent;

            switch (ontologyFormat) {
                case 'raw':
                    serveContent = {
                        type: 'raw',
                        value: ontologyContent
                    }
                    break;
                case 'precomputed':
                    serveContent = {
                        type: 'precomputed',
                        value: ontologyContent
                    }
                    break;
                default:
                    throw new CommanderWrapperError("Unknown ontology format. Only 'raw' and 'precomputed' are possible.");
            }

            createStaticServerOnPort(portNumeber, JSON.stringify(serveContent));
        }
    }
}