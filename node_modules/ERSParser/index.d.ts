export declare class ERSParser {
    /**
     * List of parser itemSets
     */
    itemSets: ItemSet[];

    /**
     * Map of parser symbols (terminals and nonterminals) in format (symbolName, symbolId)
     */
    symbols_: { [key: string]: number }

    /**
    * Set of productions, all items are number[2], only on index 0 is only number. 
    */
    productions_: Production[];

    /**
     * Parser table
     */
    table: ParserTable;

    /**
     * Parse sparql query.
     * @param sparql query 
     */
    parse(query: string): IParserResult;

    /**
     * Returns text with list of terminals which parser uses. 
     * @param sparql query
     */
    showTerminals(query: string): string;


    parserDebugger: any;

    tracedParserErrors: any;
}

/**
 * Production is number[2]
 */
type Production = number[];

type ParserTableAction = (number | number[]);

type ParserTableRow = { [index: number]: ParserTableAction };

type ParserTable = ParserTableRow[];

/**
 * Parser itemSet
 */
declare interface ItemSet {
    Id: number;
    Rules: string[];
    Transitions: { [key: string]: number };
}

export declare interface IParserResult {
    query: any;
    errors: any;
}