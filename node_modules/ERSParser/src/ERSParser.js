var ReleaseParser = require('../generatedParser/releaseParserModule').Parser;
var DebugParser = require('../generatedParser/debugParserModule').Parser;
var ParserErrorPreprocessor = require('../src/errors/ParserErrorsProcessor').ParserErrorPreprocessor;
var PreParser = require('./PreParser').PreParser;

function showTerminals(parser, input) {
  var lexer = Object.create(parser.lexer);
  lexer.setInput(input);
  var token = lexer.lex();
  var result = "";
  while (token != 1) {
    var terminal = parser.terminals_[token];
    result += " " + (terminal === undefined ? "undefined" : terminal.toString());
    token = lexer.lex();
  }
  return result;
}

function ERSParserError(message, hash) {
  var hashLoc = hash.loc;
  this.originalMessage = message;
  this.loc = {
    first_line: hashLoc.first_line,
    first_column: hashLoc.first_column,
    last_line: hashLoc.last_line,
    last_column: hashLoc.last_column
  };

  this.expected = hash.reallyExpected;
  this.problemToken = hash.token;
}

function BaseERSParser(prefixes, baseIRI, parserType) {
  var prefixesCopy = {};
  for (var prefix in prefixes || {}) {
    prefixesCopy[prefix] = prefixes[prefix];
  }
  var preParser = new PreParser();
  var parser = new parserType();
  var parserErrorPreprocessor = new ParserErrorPreprocessor();

  parser.tracedParserErrors = [];
  parser.trace = function (message, hash) {
    this.tracedParserErrors.push(new ERSParserError(message, hash));
  }

  parser.parse = function () {
    parserType.resetParserErrors();
    parserType.base = baseIRI || '';
    parserType.prefixes = Object.create(prefixesCopy);

    var query = arguments[0];

    var preParserResult = preParser.run(this.getLexerCopy(query), parser.terminals_);
    if (preParserResult.haltingError != null) {
      parserErrorPreprocessor.preprocessError(query, preParserResult.haltingError);
      return {
        query: null,
        recoverableErrors: [],
        haltingError: preParserResult.haltingError
      };
    }

    var preParserRecoverableErrors = preParserResult.recoverableErrors;

    if (preParserResult.recoverableErrors.length > 0) {
      query = preParserResult.fixedQuery;
    }

    var result;
    try {
      result = parserType.prototype.parse.call(parser, query);
      result.tracedParserErrors = parser.tracedParserErrors;
    }
    catch (e) {
      var lines = arguments[0].split(/\r?\n/gm);
      var lastError = parser.tracedParserErrors[parser.tracedParserErrors.length - 1];
      if (lastError === undefined) {
        throw e;
      }
      var lastErrorLoc = lastError.loc;
      result = {
        query: null,
        tracedParserErrors: parser.tracedParserErrors,
        recoverableErrors: [],
        haltingError: {
          type: "ClassicHaltingError",
          options: {
            originalMessage: lastError.originalMessage,
            expectedTokens: lastError.expected,
            unexpectedToken: lastError.problemToken
          },
          range: {
            first_line: lastErrorLoc.last_line,
            first_column: lastErrorLoc.last_column,
            last_line: lines.length,
            last_column: lines[lines.length - 1].length + 1,
          }
        }
      };
    }

    result.recoverableErrors = result.recoverableErrors.concat(preParserRecoverableErrors);
    parserErrorPreprocessor.preprocessParserResult(query, result);
    return result;
  };

  parser._resetBlanks = parserType._resetBlanks;

  parser.getLexerCopy = function (query) {
    var lexer = Object.create(parser.lexer);
    lexer.setInput(query);
    return lexer;
  }

  parser.showTerminals = function (input) {
    return showTerminals(parser, input)
  }
  return parser;
}

function ERSParser(prefixes, baseIRI) {
  return BaseERSParser(prefixes, baseIRI, ReleaseParser);
}

function ERSParserDebuggable(prefixes, baseIRI) {
  return BaseERSParser(prefixes, baseIRI, DebugParser);
}

module.exports = {}
module.exports.ERSParser = ERSParser;
module.exports.ERSParserDebuggable = ERSParserDebuggable