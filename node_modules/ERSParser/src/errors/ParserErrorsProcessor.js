var ParserError = require('./ParserError').ParserError;

/**
 * Process all errors before they goes from parser. Can resolve error message
 * or range from option fields. 
 */
function ParserErrorPreprocessor() {
}

/**
 * Preprocess errors in parser result
 * @param {Object} result
 */
ParserErrorPreprocessor.prototype.preprocessParserResult = function (result) {
    if (result.haltingError != null) {
        this.preprocessError(result.haltingError)
    }

    result.recoverableErrors.forEach(function (error) {
        return this.preprocessError(error);
    }, this);
}

/**
 * Preprocess one parser error
 * @param {ParserError} error 
 */
ParserErrorPreprocessor.prototype.preprocessError = function (error) {
    switch (error.type) {
        case "GraphNode":
            error.message = "Current object graph node contains error.";
            break;

        case "TriplesSameSubject":
            error.message = "Current triple contains error.";
            break;

        case "VerbObjectList":
            error.message = "Current verb object list contains error.";
            break;
        case "ClassicHaltingError":
            error.message = "Unexpected token '"
                + error.options.unexpectedToken
                + "' expected one of these "
                + error.options.expectedTokens.join(", ")
                + ".";
            break;

        default:
        // Anything
    }
}
module.exports.ParserErrorPreprocessor = ParserErrorPreprocessor;