var ParserError = require('./ParserError').ParserError;
var getPositionFromOffset = require('../utils/positionOffsetConvert').getPositionFromOffset;

/**
 * Process all errors before they goes from parser. Can resolve error message
 * or range from option fields. 
 */
function ParserErrorPreprocessor() {
}

/**
 * Preprocess errors in parser result
 * @param {string} query
 * @param {Object} result
 */
ParserErrorPreprocessor.prototype.preprocessParserResult = function (query, result) {
    if (result.haltingError != null) {
        this.preprocessError(query, result.haltingError)
    }

    result.recoverableErrors.forEach(function (error) {
        return this.preprocessError(query, error);
    }, this);
}

/**
 * Preprocess one parser error
 * @param {string} query 
 * @param {ParserError} error 
 */
ParserErrorPreprocessor.prototype.preprocessError = function (query, error) {
    switch (error.type) {
        case "GraphNode":
            error.message = "Current object graph node contains error.";
            break;

        case "TriplesSameSubject":
            error.message = "Current triple contains error.";
            break;

        case "VerbObjectList":
            error.message = "Current verb object list contains error.";
            break;

        case "ClassicHaltingError":
            error.message = "Unexpected token '"
                + error.options.unexpectedToken
                + "' expected one of these "
                + error.options.expectedTokens.join(", ")
                + ".";
            break;

        case "MissingCloseQuotes":
            error.message = "Missing close quotes.";
            var startPosition = getPositionFromOffset(query, error.options.offset);
            var endPosition = getPositionFromOffset(query, query.length - 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;
            break;

        case "ExtraClosedParenthesis":
            error.message = "Extra closed parenthesis.";
            var startPosition = getPositionFromOffset(query, error.options.offset - 1);
            var endPosition = getPositionFromOffset(query, error.options.offset + 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;

            break;

        case "MissingClosedParenthesis":
            error.message = "Missing closed parenthesis.";

            var startPosition = getPositionFromOffset(query, query.length - 3);
            var endPosition = getPositionFromOffset(query, query.length - 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;
            break;
        case "PrefixOrBase":
            error.message = "Expected base or prefix statement."
            break;

        case "Prefix":
            error.message = "Expected prefix in format ns:IRI."
            break;

        case "Base":
            error.message = "Expected base IRI."
            break;

        case "PrefixAfter":
        case "BaseAfter":
            error.message = "Unexpected text."
            break;

        case "UnclosedBracket":
            error.message = "Unclosed bracket."
            error.range.first_line = error.options.position.first_line;
            error.range.first_column = error.options.position.first_column;
            error.range.last_line = error.options.position.last_line;
            error.range.last_column = error.options.position.last_column;
            break;

        case "BaseStatementMissing":
            error.message = "Base statement is missing.";
            break;

        case "BIND":
            error.message = "Bind statement contains error.";
            break;

        case "DatasetClause":
            error.message = "Dataset clause contains error.";
            break;

        case "DatasetClauseList":
            error.message = "Dataset clause list contains error.";
            break;

        case "Describe":
            error.message = "Describe construct contains error.";
            break;

        case "Expression":
            error.message = "Expression statement contains error.";
            break;

        case "ExpressionPlusMinus":
            error.message = "Expression plus/minus operation contains error.";
            break;

        case "ExpressionPlusMinusLiteral":
            error.message = "Expression plus/minus literal contains error.";
            break;

        case "ExpressionUnaryOperation":
            error.message = "Expression unary operation contains error.";
            break;

        case "filter":
            error.message = "Filter statement contains error.";
            break;

        case "GRAPH":
            error.message = "Graph statement contains error.";
            break;

        case "MalformedString":
            error.message = "Malformed string";
            break;

        case "OPTIONAL":
            error.message = "Optional statement contains error.";
            break;

        case "Prefix_PNAME_LN":
            error.message = "Usage of nonexisting prefix.";
            break;

        case "Prefix_PNAME_NS":
            error.message = "Usage of nonexisting prefix.";
            break;

        case "PrimaryExpressionTail":
            error.message = "Expression contains error.";
            break;

        case "Select":
            error.message = "Select statement contains error.";
            break;

        case "SERVICE":
            error.message = "Service statement contains error.";
            break;

        case "VALUES":
            error.message = "Values statement contains error.";
            break;

        default:
        // Anything
    }
}
module.exports.ParserErrorPreprocessor = ParserErrorPreprocessor;