var ParserErrorPreprocessor = require('../src/errors/ParserErrorsProcessor').ParserErrorPreprocessor;
var ParserError = require('../src/errors/ParserError').ParserError;
var chai = require('chai');

describe("ParserErrorPreprocessor should", function () {
    it('preprocess some error', function () {
        var query = "";
        var parserErrorPreprocessor = new ParserErrorPreprocessor();
        var parserError = new ParserError('GraphNode');

        chai.expect(parserError.message).equal('');
        parserErrorPreprocessor.preprocessError(query, parserError);
        chai.expect(parserError.message).not.equal('');
    });

    it('preprocess not existing error type', function () {
        var query = "";
        var parserErrorPreprocessor = new ParserErrorPreprocessor();
        var parserError = new ParserError('ThisTypeDoesNotExist');
        parserErrorPreprocessor.preprocessError(query, parserError);
        chai.expect(parserError.message).equal('');
    });

    it('preprocess some parser result', function () {
        var query = "";
        var parserResult = result = {
            query: null,
            recoverableErrors: [new ParserError('GraphNode'), new ParserError('GraphNode')],
            haltingError: new ParserError('GraphNode')
        };

        chai.expect(result.haltingError.message).equal('');
        result.recoverableErrors.forEach(function (error) {
            chai.expect(error.message).equal('');
        }, this);

        var parserErrorPreprocessor = new ParserErrorPreprocessor();
        parserErrorPreprocessor.preprocessParserResult(query, parserResult);

        chai.expect(result.haltingError.message).not.equal('');
        result.recoverableErrors.forEach(function (error) {
            chai.expect(error.message).not.equal('');
        }, this);

    });
});
