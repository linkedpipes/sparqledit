var chai = require('chai');
var PreParser = require('../src/PreParser').PreParser;
var ERSParser = require('../src/ERSParser').ERSParser;

function runPreParser(query) {
    var preParser = new PreParser();
    var parser = new ERSParser();
    var lexer = parser.getLexerCopy(query);
    return preParser.run(lexer);
}

describe("PreParser should", function () {
    it("run with empty query", function () {
        var query = '';
        var result = runPreParser(query);
        chai.expect(result.haltingError).to.be.null;
        chai.expect(result.recoverableErrors.length).equal(0);
        chai.expect(result.fixedQuery).equal(query);
    });

    it("not report error when query is ok.", function () {
        var query = 'a{{hsf_/šěf{}dsfg}fdd{dgdffsdfga}}';
        var result = runPreParser(query);
        chai.expect(result.haltingError).to.be.null;
        chai.expect(result.recoverableErrors.length).equal(0);
        chai.expect(result.fixedQuery).equal(query);
    });

    it("correctly report mixed parenthesis errors.", function () {
        var query = 's{ff}g}ss}d{d{';
        var result = runPreParser(query);
        chai.expect(result.haltingError).to.be.null;
        chai.expect(result.recoverableErrors.length).equal(1);
        chai.expect(result.recoverableErrors[0].type).equal('MissingClosedParenthesis');
        chai.expect(result.recoverableErrors[0].options.count).equal(2);
        chai.expect(result.fixedQuery).equal('s{ff}g}ss}d{d{}}');
    });

    describe("find missing closed parenthesis", function () {
        it("test case 1", function () {
            var query = '{';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(1);
            chai.expect(result.recoverableErrors[0].type).equal('MissingClosedParenthesis');
            chai.expect(result.recoverableErrors[0].options.count).equal(1);
            chai.expect(result.fixedQuery).equal('{}');
        });

        it("test case 2", function () {
            var query = '{{}{{}}{{';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(1);
            chai.expect(result.recoverableErrors[0].type).equal('MissingClosedParenthesis');
            chai.expect(result.recoverableErrors[0].options.count).equal(3);
            chai.expect(result.fixedQuery).equal('{{}{{}}{{}}}');
        });

        it("test case 3", function () {
            var query = 'sdaf{asdf{a}d{g{h}hj}{r{e';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(1);
            chai.expect(result.recoverableErrors[0].type).equal('MissingClosedParenthesis');
            chai.expect(result.recoverableErrors[0].options.count).equal(3);
            chai.expect(result.fixedQuery).equal('sdaf{asdf{a}d{g{h}hj}{r{e}}}');
        });
    });
    
    describe("correctly work with single quotes", function () {
        it("test case 1", function () {
            var query = "d{d{d'dss{'d}}ddsd";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 2", function () {
            var query = "{ssdas\\' { s'}";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 3", function () {
            var query = "{'ssdas\\' \\\"  { s'}";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 4", function () {
            var query = "{'ssda { }";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })

        it("test case 5", function () {
            var query = "{'ssda \\' { }";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })

        it("test case 6", function () {
            var query = "{'ssda \\";
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })
    });

    describe("correctly work with double quotes", function () {
        it("test case 1", function () {
            var query = 'd{d{d"dss{"d}}ddsd';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 2", function () {
            var query = '{"ssdas\\" { s"}';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 3", function () {
            var query = '{"ssdas\\" \\\' { s"}';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
            chai.expect(result.recoverableErrors.length).equal(0);
        })

        it("test case 4", function () {
            var query = '{"ssda { }';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })

        it("test case 5", function () {
            var query = '{"ssda \\" { }';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })

        it("test case 6", function () {
            var query = '{"ssda \\';
            var result = runPreParser(query);
            chai.expect(result.haltingError).to.be.null;
        })
    });
});
