var fs = require('fs');
var chai = require('chai');
var fileUtils = require('./fileUtils');
var ERSParser = require('../src/ERSParser').ERSParser;

var testfolder = __dirname + "/queries";



// Parses a JSON object, restoring `undefined`Â values
parseJSON = function parseJSON(string) {
    var object = JSON.parse(string);
    return /"\{undefined\}"/.test(string) ? restoreUndefined(object) : object;
}

// Recursively replace values of "{undefined}" by `undefined`
function restoreUndefined(object) {
    for (var key in object) {
        var item = object[key];
        if (typeof item === 'object')
            object[key] = restoreUndefined(item);
        else if (item === '{undefined}')
            object[key] = undefined;
    }
    return object;
}

function runParserAndReturnQuery(queryFilePath) {
    var input = fs.readFileSync(queryFilePath, "utf8");
    var parser = new ERSParser();
    parser._resetBlanks();
    var result = parser.parse(input);
    return result.query;
}

function transformToOldNode(node, property) {
    if (typeof node[property] === 'string') {
        return;
    }
    switch (node[property].type) {
        case "iri":
            node[property] = node[property].iri;
            break;
        case "var":
            node[property] = node[property].name;
            break;
        default:
            throw new Error("Unkown node type " + node[property].type + ".");
    }
}

function transformToOldresult(node) {
    if (typeof node !== 'object' || node == null) {
        return;
    }
    if (Array.isArray(node)) {
        node.forEach(arrayNode => transformToOldresult(arrayNode, context));
    }
    else {
        for (var property in node) {
            if (property == 'subject'
                || property == 'object'
                || property == 'predicate') {
                transformToOldNode(node, property);
            }
            else {
                transformToOldresult(node[property]);
            }
        }
    }
}

function testQuery(queryFolder, queryFileName) {
    var queryPath = queryFolder + "/" + queryFileName;
    if (!queryPath.match(/.sparql$/)) {
        return;
    }
    it(queryFileName, function () {
        var result = runParserAndReturnQuery(queryPath);
        var expectedResultFileName = queryFolder + "/" + queryFileName.replace('.sparql', '.json');
        if (fs.existsSync(expectedResultFileName)) {
            var expectedResultSerialized = fs.readFileSync(expectedResultFileName);
            var expectedResult = parseJSON(expectedResultSerialized);
            transformToOldresult(result);
            chai.expect(result).to.deep.equal(expectedResult);
        }
    });
}

function testFolder(folder) {
    folder.folders.forEach(function (subfolder) {
        describe("parse all queries in folder" + subfolder.path.relative, function () {
            testFolder(subfolder);
        });
    });

    folder.files.forEach(function (file) {
        testQuery(folder.path.getAbsolutePath(), file);
    });
}

describe("Parser should", function () {
    var filesTree = fileUtils.getFilesTree(testfolder);
    testFolder(filesTree);
});
