!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.ERSParser=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (process){
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[13,16,25,35,44,49,97,107,110,112,113,122,123,128,267,268,269,270,271],$V1=[97,107,110,112,113,122,123,128,267,268,269,270,271],$V2=[2,256],$V3=[1,24],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,30],$V8=[5,84],$V9=[39,40,52],$Va=[39,52],$Vb=[1,62],$Vc=[1,64],$Vd=[1,60],$Ve=[1,63],$Vf=[29,30,262],$Vg=[1,71],$Vh=[1,72],$Vi=[14,17,256],$Vj=[109,131,265,272],$Vk=[14,17,109,131,256],$Vl=[1,83],$Vm=[1,87],$Vn=[1,89],$Vo=[109,131,265,266,272],$Vp=[14,17,109,131,256,266],$Vq=[1,97],$Vr=[2,232],$Vs=[1,96],$Vt=[2,14,17,29,81,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$Vu=[5,39,40,52,62,69,72,80,82,84],$Vv=[5,14,17,29,39,40,52,62,69,72,80,82,84,256],$Vw=[5,14,17,29,30,32,33,39,40,42,52,62,69,72,80,81,82,84,91,106,109,122,123,125,130,154,155,156,157,159,163,175,185,189,191,192,200,216,236,238,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,275,276,277,278,279,280,281,282,283,284],$Vx=[1,112],$Vy=[1,113],$Vz=[2,5,14,17,29,40,42,81,84,109,154,155,156,157,159,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,273],$VA=[29,33],$VB=[2,287],$VC=[1,126],$VD=[1,124],$VE=[5,236],$VF=[2,304],$VG=[2,292],$VH=[39,125],$VI=[5,42,69,72,80,82,84],$VJ=[2,234],$VK=[1,141],$VL=[1,143],$VM=[1,152],$VN=[1,155],$VO=[1,162],$VP=[1,160],$VQ=[1,154],$VR=[1,158],$VS=[1,159],$VT=[1,163],$VU=[1,164],$VV=[1,167],$VW=[1,168],$VX=[1,169],$VY=[1,170],$VZ=[1,171],$V_=[1,172],$V$=[1,173],$V01=[1,174],$V11=[1,175],$V21=[1,176],$V31=[1,177],$V41=[1,178],$V51=[5,62,69,72,80,82,84],$V61=[29,30,39,40,52],$V71=[14,17,29,30,81,215,216,218,219,220,221,223,224,226,227,230,232,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,282,283,285,286,287,288,289],$V81=[2,344],$V91=[14,17,42,81,91,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$Va1=[5,106,236],$Vb1=[42,109],$Vc1=[5,42,72,80,82,84],$Vd1=[2,308],$Ve1=[40,42,84,109,154,155,156,157,159,273],$Vf1=[1,220],$Vg1=[1,219],$Vh1=[1,222],$Vi1=[14,17,29,40,42,84,109,154,155,156,157,159,175,185,189,236,256,273],$Vj1=[14,17,29,32,33,40,42,81,84,91,109,154,155,156,157,159,175,185,189,200,216,236,238,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,275,276,277,278,279,280,281,282,283,284],$Vk1=[14,17,29,32,33,40,42,81,84,91,109,154,155,156,157,159,175,185,189,200,216,236,238,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,275,276,277,278,279,280,281,282,283,284],$Vl1=[1,233],$Vm1=[40,42,84,109,154,155,156,157,159],$Vn1=[1,244],$Vo1=[5,42,80,82,84],$Vp1=[1,256],$Vq1=[1,258],$Vr1=[1,259],$Vs1=[1,260],$Vt1=[1,261],$Vu1=[1,263],$Vv1=[1,264],$Vw1=[2,375],$Vx1=[1,267],$Vy1=[1,268],$Vz1=[1,269],$VA1=[1,275],$VB1=[1,270],$VC1=[1,271],$VD1=[1,272],$VE1=[1,273],$VF1=[1,274],$VG1=[1,282],$VH1=[1,281],$VI1=[40,42,84,109,154,155,156,157,159,236,273],$VJ1=[1,292],$VK1=[14,17,29,81,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$VL1=[14,17,29,30,81,218,219,220,221,223,224,226,227,230,232,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,282,285,286,287,288,289],$VM1=[2,368],$VN1=[1,301],$VO1=[1,302],$VP1=[1,303],$VQ1=[14,17,33,42,81,91,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$VR1=[30,42],$VS1=[2,307],$VT1=[5,42,84],$VU1=[5,14,17,30,42,72,80,82,84,218,219,220,221,223,224,226,227,230,232,256,282,285,286,287,288,289],$VV1=[2,5,14,17,29,30,40,42,72,75,77,80,81,82,84,109,154,155,156,157,159,163,175,191,192,218,219,220,221,223,224,226,227,230,232,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,273,282,285,286,287,288,289],$VW1=[2,5,14,17,29,30,32,33,40,42,69,72,75,77,80,81,82,84,109,154,155,156,157,159,163,175,189,191,192,200,216,218,219,220,221,223,224,226,227,230,232,236,238,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],$VX1=[1,326],$VY1=[1,325],$VZ1=[1,332],$V_1=[1,331],$V$1=[30,163],$V02=[5,14,17,29,30,42,69,72,80,82,84,218,219,220,221,223,224,226,227,230,232,256,282,285,286,287,288,289],$V12=[2,5,14,17,29,30,32,33,40,42,62,69,72,75,77,80,81,82,84,109,154,155,156,157,159,163,175,189,191,192,200,216,218,219,220,221,223,224,226,227,230,232,236,238,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],$V22=[40,42,84,109,154,155,156,157,159,189,236,273],$V32=[32,33,189,236,275,276],$V42=[32,33,189,200,216,236,238,250,251,252,253,254,255,275,276,277,278,279,280,281,282,283],$V52=[32,33,189,200,216,236,238,250,251,252,253,254,255,262,275,276,277,278,279,280,281,282,283,284],$V62=[1,375],$V72=[1,393],$V82=[1,390],$V92=[1,391],$Va2=[14,17,29,30,81,215,216,218,219,220,221,223,224,226,227,230,232,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,282,283,285,286,287,288,289],$Vb2=[2,14,17,29,40,42,81,84,109,154,155,156,157,159,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$Vc2=[14,17,29,256],$Vd2=[2,14,17,29,40,42,81,84,109,154,155,156,157,159,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,273],$Ve2=[2,14,17,29,175,185,236,256],$Vf2=[1,448],$Vg2=[1,449],$Vh2=[14,17,33,81,91,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$Vi2=[5,14,17,29,30,42,75,77,80,82,84,218,219,220,221,223,224,226,227,230,232,256,282,285,286,287,288,289],$Vj2=[2,314],$Vk2=[2,14,17,29,42,81,109,163,175,191,192,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256],$Vl2=[2,302];
var parser = {trace: function trace() { },getSymbolName: function(id) {
    var symbols_ = this.symbols_;
    return Object.keys(symbols_).filter(
        function(x) {
            return symbols_[x] == id;
        }
    )[0];
},
yy: {},
symbols_: {"error":2,"StartNeterminal":3,"QueryOrUpdateUnit":4,"EOF":5,"QueryOrUpdateUnit_repetition0":6,"QueryOrUpdateUnit_group0":7,"QueryOrUpdateUnit_group1":8,"Query":9,"Query_group0":10,"Query_option0":11,"BaseDecl":12,"BASE":13,"IRIREF":14,"PrefixDecl":15,"PREFIX":16,"PNAME_NS":17,"SelectQuery":18,"SelectClause":19,"SelectQuery_repetition0":20,"WhereClause":21,"SolutionModifier":22,"SubSelect":23,"SubSelect_option0":24,"SELECT":25,"SelectClause_option0":26,"SelectClause_group0":27,"SelectClauseItem":28,"VAR":29,"(":30,"Expression":31,"AS":32,")":33,"ConstructQuery":34,"CONSTRUCT":35,"ConstructTemplate":36,"ConstructQuery_repetition0":37,"ConstructQuery_repetition1":38,"WHERE":39,"{":40,"ConstructQuery_option0":41,"}":42,"DescribeQuery":43,"DESCRIBE":44,"DescribeQuery_group0":45,"DescribeQuery_repetition0":46,"DescribeQuery_option0":47,"AskQuery":48,"ASK":49,"AskQuery_repetition0":50,"DatasetClause":51,"FROM":52,"DatasetClause_option0":53,"iri":54,"WhereClause_option0":55,"GroupGraphPattern":56,"SolutionModifier_option0":57,"SolutionModifier_option1":58,"SolutionModifier_option2":59,"SolutionModifier_option3":60,"GroupClause":61,"GROUP":62,"BY":63,"GroupClause_repetition_plus0":64,"GroupCondition":65,"BuiltInCall":66,"FunctionCall":67,"HavingClause":68,"HAVING":69,"HavingClause_repetition_plus0":70,"OrderClause":71,"ORDER":72,"OrderClause_repetition_plus0":73,"OrderCondition":74,"ASC":75,"BrackettedExpression":76,"DESC":77,"Constraint":78,"LimitOffsetClauses":79,"LIMIT":80,"INTEGER":81,"OFFSET":82,"ValuesClause":83,"VALUES":84,"InlineData":85,"InlineData_repetition0":86,"InlineData_repetition1":87,"InlineData_repetition2":88,"DataBlockValue":89,"Literal":90,"UNDEF":91,"DataBlockValueList":92,"DataBlockValueList_repetition0":93,"Update":94,"Update_repetition0":95,"Update1":96,"LOAD":97,"Update1_option0":98,"Update1_option1":99,"Update1_group0":100,"Update1_option2":101,"GraphRefAll":102,"Update1_group1":103,"Update1_option3":104,"GraphOrDefault":105,"TO":106,"CREATE":107,"Update1_option4":108,"GRAPH":109,"INSERTDATA":110,"QuadPattern":111,"DELETEDATA":112,"DELETEWHERE":113,"Update1_option5":114,"InsertClause":115,"Update1_option6":116,"Update1_repetition0":117,"Update1_option7":118,"DeleteClause":119,"Update1_option8":120,"Update1_repetition1":121,"DELETE":122,"INSERT":123,"UsingClause":124,"USING":125,"UsingClause_option0":126,"WithClause":127,"WITH":128,"IntoGraphClause":129,"INTO":130,"DEFAULT":131,"GraphOrDefault_option0":132,"GraphRefAll_group0":133,"QuadPattern_option0":134,"QuadPattern_repetition0":135,"QuadsNotTriples":136,"QuadsNotTriples_group0":137,"QuadsNotTriples_option0":138,"QuadsNotTriples_option1":139,"QuadsNotTriples_option2":140,"TriplesTemplate":141,"TriplesTemplate_repetition0":142,"TriplesSameSubjectError":143,"TriplesTemplate_option0":144,"GroupGraphPatternSub":145,"GroupGraphPatternSub_option0":146,"GroupGraphPatternSub_repetition0":147,"GroupGraphPatternSubTail":148,"GraphPatternNotTriples":149,"GroupGraphPatternSubTail_option0":150,"GroupGraphPatternSubTail_option1":151,"GraphPatternNotTriplesError":152,"TriplesBlock":153,"OPTIONAL":154,"SERVICE":155,"FILTER":156,"BIND":157,"GraphPatternNotTriples_repetition0":158,"MINUS":159,"GraphPatternNotTriples_group0":160,"GraphPatternNotTriples_option0":161,"GraphPatternNotTriples_group1":162,"NIL":163,"FunctionCall_option0":164,"FunctionCall_repetition0":165,"ExpressionList":166,"ExpressionList_repetition0":167,"ConstructTemplate_option0":168,"ConstructTriples":169,"ConstructTriples_repetition0":170,"ConstructTriples_option0":171,"TriplesSameSubject":172,"VarOrTerm":173,"PropertyListNotEmpty":174,"CURSOR":175,"PropertyList":176,"PropertyList_option0":177,"VerbObjectList":178,"PropertyListNotEmpty_repetition0":179,"SnadToChapu":180,"SnadToChapu_repetition_plus0":181,"VerbObjectListError":182,"Verb":183,"ObjectList":184,"a":185,"GraphNode":186,"ObjectList_repetition0":187,"Nechapu":188,",":189,"GraphNodeError":190,"BLANK_NODE_LABEL":191,"ANON":192,"Expression_repetition0":193,"ConditionalAndExpression":194,"ConditionalAndExpression_repetition0":195,"RelationalExpression":196,"AdditiveExpression":197,"RelationalExpression_group0":198,"RelationalExpression_option0":199,"IN":200,"MultiplicativeExpression":201,"AdditiveExpression_repetition0":202,"AdditiveExpressionTail":203,"AdditiveExpressionTail_group0":204,"NumericLiteralPositive":205,"AdditiveExpressionTail_repetition0":206,"NumericLiteralNegative":207,"AdditiveExpressionTail_repetition1":208,"UnaryExpression":209,"MultiplicativeExpression_repetition0":210,"MultiplicativeExpressionTail":211,"MultiplicativeExpressionTail_group0":212,"UnaryExpression_option0":213,"PrimaryExpression":214,"!":215,"-":216,"Aggregate":217,"FUNC_ARITY0":218,"FUNC_ARITY1":219,"FUNC_ARITY2":220,"IF":221,"BuiltInCall_group0":222,"BOUND":223,"BNODE":224,"BuiltInCall_option0":225,"EXISTS":226,"COUNT":227,"Aggregate_option0":228,"Aggregate_group0":229,"FUNC_AGGREGATE":230,"Aggregate_option1":231,"GROUP_CONCAT":232,"Aggregate_option2":233,"Aggregate_option3":234,"GroupConcatSeparator":235,";":236,"SEPARATOR":237,"=":238,"String":239,"LANGTAG":240,"^^":241,"DECIMAL":242,"DOUBLE":243,"true":244,"false":245,"STRING_LITERAL1":246,"STRING_LITERAL2":247,"STRING_LITERAL_LONG1":248,"STRING_LITERAL_LONG2":249,"INTEGER_POSITIVE":250,"DECIMAL_POSITIVE":251,"DOUBLE_POSITIVE":252,"INTEGER_NEGATIVE":253,"DECIMAL_NEGATIVE":254,"DOUBLE_NEGATIVE":255,"PNAME_LN":256,"QueryOrUpdateUnit_repetition0_group0":257,"SelectClause_option0_group0":258,"DISTINCT":259,"REDUCED":260,"SelectClause_group0_repetition_plus0":261,"*":262,"DescribeQuery_group0_repetition_plus0_group0":263,"DescribeQuery_group0_repetition_plus0":264,"NAMED":265,"SILENT":266,"CLEAR":267,"DROP":268,"ADD":269,"MOVE":270,"COPY":271,"ALL":272,".":273,"UNION":274,"||":275,"&&":276,"!=":277,"<":278,">":279,"<=":280,">=":281,"NOT":282,"+":283,"/":284,"CONCAT":285,"COALESCE":286,"SUBSTR":287,"REGEX":288,"REPLACE":289,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"BASE",14:"IRIREF",16:"PREFIX",17:"PNAME_NS",25:"SELECT",29:"VAR",30:"(",32:"AS",33:")",35:"CONSTRUCT",39:"WHERE",40:"{",42:"}",44:"DESCRIBE",49:"ASK",52:"FROM",62:"GROUP",63:"BY",69:"HAVING",72:"ORDER",75:"ASC",77:"DESC",80:"LIMIT",81:"INTEGER",82:"OFFSET",84:"VALUES",91:"UNDEF",97:"LOAD",106:"TO",107:"CREATE",109:"GRAPH",110:"INSERTDATA",112:"DELETEDATA",113:"DELETEWHERE",122:"DELETE",123:"INSERT",125:"USING",128:"WITH",130:"INTO",131:"DEFAULT",154:"OPTIONAL",155:"SERVICE",156:"FILTER",157:"BIND",159:"MINUS",163:"NIL",175:"CURSOR",185:"a",189:",",191:"BLANK_NODE_LABEL",192:"ANON",200:"IN",215:"!",216:"-",218:"FUNC_ARITY0",219:"FUNC_ARITY1",220:"FUNC_ARITY2",221:"IF",223:"BOUND",224:"BNODE",226:"EXISTS",227:"COUNT",230:"FUNC_AGGREGATE",232:"GROUP_CONCAT",236:";",237:"SEPARATOR",238:"=",240:"LANGTAG",241:"^^",242:"DECIMAL",243:"DOUBLE",244:"true",245:"false",246:"STRING_LITERAL1",247:"STRING_LITERAL2",248:"STRING_LITERAL_LONG1",249:"STRING_LITERAL_LONG2",250:"INTEGER_POSITIVE",251:"DECIMAL_POSITIVE",252:"DOUBLE_POSITIVE",253:"INTEGER_NEGATIVE",254:"DECIMAL_NEGATIVE",255:"DOUBLE_NEGATIVE",256:"PNAME_LN",259:"DISTINCT",260:"REDUCED",262:"*",265:"NAMED",266:"SILENT",267:"CLEAR",268:"DROP",269:"ADD",270:"MOVE",271:"COPY",272:"ALL",273:".",274:"UNION",275:"||",276:"&&",277:"!=",278:"<",279:">",280:"<=",281:">=",282:"NOT",283:"+",284:"/",285:"CONCAT",286:"COALESCE",287:"SUBSTR",288:"REGEX",289:"REPLACE"},
productions_: [0,[3,2],[4,2],[4,2],[9,2],[12,2],[12,3],[12,2],[15,3],[15,2],[15,4],[18,4],[23,4],[19,3],[28,1],[28,5],[34,5],[34,7],[43,5],[48,4],[51,3],[21,2],[22,4],[61,3],[61,3],[65,1],[65,1],[65,3],[65,5],[65,1],[68,2],[68,2],[71,3],[71,3],[74,2],[74,2],[74,1],[74,1],[79,2],[79,2],[79,4],[79,4],[79,2],[79,2],[83,2],[85,4],[85,6],[89,1],[89,1],[89,1],[92,3],[94,2],[96,4],[96,3],[96,5],[96,4],[96,2],[96,2],[96,2],[96,6],[96,6],[119,2],[115,2],[124,3],[127,2],[129,3],[105,1],[105,2],[102,2],[102,1],[111,4],[136,7],[141,3],[56,3],[56,3],[145,2],[148,3],[148,1],[153,1],[152,2],[152,2],[152,2],[152,2],[152,2],[152,2],[149,2],[149,2],[149,2],[149,3],[149,4],[149,2],[149,6],[149,1],[78,1],[78,1],[78,1],[67,2],[67,6],[166,1],[166,4],[36,3],[169,3],[143,1],[143,1],[172,2],[172,1],[176,1],[174,2],[180,2],[182,1],[182,1],[178,2],[178,1],[183,1],[183,1],[183,1],[184,2],[188,2],[190,1],[190,1],[186,1],[186,1],[173,1],[173,1],[173,1],[173,1],[173,1],[173,1],[31,2],[194,2],[196,1],[196,3],[196,4],[197,2],[203,2],[203,2],[203,2],[201,2],[211,2],[209,2],[209,2],[209,2],[214,1],[214,1],[214,1],[214,1],[214,1],[214,1],[76,3],[66,1],[66,2],[66,4],[66,6],[66,8],[66,2],[66,4],[66,2],[66,4],[66,3],[217,5],[217,5],[217,6],[235,4],[90,1],[90,2],[90,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[239,1],[239,1],[239,1],[239,1],[205,1],[205,1],[205,1],[207,1],[207,1],[207,1],[54,1],[54,1],[54,1],[257,1],[257,1],[6,0],[6,2],[7,1],[7,1],[8,1],[8,1],[10,1],[10,1],[10,1],[10,1],[11,0],[11,1],[20,0],[20,2],[24,0],[24,1],[258,1],[258,1],[26,0],[26,1],[261,1],[261,2],[27,1],[27,1],[37,0],[37,2],[38,0],[38,2],[41,0],[41,1],[263,1],[263,1],[264,1],[264,2],[45,1],[45,1],[46,0],[46,2],[47,0],[47,1],[50,0],[50,2],[53,0],[53,1],[55,0],[55,1],[57,0],[57,1],[58,0],[58,1],[59,0],[59,1],[60,0],[60,1],[64,1],[64,2],[70,1],[70,2],[73,1],[73,2],[86,0],[86,2],[87,0],[87,2],[88,0],[88,2],[93,0],[93,2],[95,0],[95,3],[98,0],[98,1],[99,0],[99,1],[100,1],[100,1],[101,0],[101,1],[103,1],[103,1],[103,1],[104,0],[104,1],[108,0],[108,1],[114,0],[114,1],[116,0],[116,1],[117,0],[117,2],[118,0],[118,1],[120,0],[120,1],[121,0],[121,2],[126,0],[126,1],[132,0],[132,1],[133,1],[133,1],[133,1],[134,0],[134,1],[135,0],[135,2],[137,1],[137,1],[138,0],[138,1],[139,0],[139,1],[140,0],[140,1],[142,0],[142,3],[144,0],[144,1],[146,0],[146,1],[147,0],[147,2],[150,0],[150,1],[151,0],[151,1],[158,0],[158,3],[160,1],[160,1],[161,0],[161,1],[162,1],[162,1],[164,0],[164,1],[165,0],[165,3],[167,0],[167,3],[168,0],[168,1],[170,0],[170,3],[171,0],[171,1],[177,0],[177,1],[179,0],[179,2],[181,1],[181,2],[187,0],[187,2],[193,0],[193,3],[195,0],[195,3],[198,1],[198,1],[198,1],[198,1],[198,1],[198,1],[199,0],[199,1],[202,0],[202,2],[204,1],[204,1],[206,0],[206,2],[208,0],[208,2],[210,0],[210,2],[212,1],[212,1],[213,0],[213,1],[222,1],[222,1],[222,1],[222,1],[222,1],[225,0],[225,1],[228,0],[228,1],[229,1],[229,1],[231,0],[231,1],[233,0],[233,1],[234,0],[234,1]],
itemSets:[{"Id":0,"Rules":["$accept -> .StartNeterminal $end #lookaheads= $end","StartNeterminal -> .QueryOrUpdateUnit EOF","QueryOrUpdateUnit -> .QueryOrUpdateUnit_repetition0 QueryOrUpdateUnit_group0","QueryOrUpdateUnit -> .error QueryOrUpdateUnit_group1","QueryOrUpdateUnit_repetition0 -> .","QueryOrUpdateUnit_repetition0 -> .QueryOrUpdateUnit_repetition0 QueryOrUpdateUnit_repetition0_group0"],"Transitions":{"StartNeterminal":1,"QueryOrUpdateUnit":2,"QueryOrUpdateUnit_repetition0":3,"error":4}},{"Id":1,"Rules":["$accept -> StartNeterminal .$end #lookaheads= $end"],"Transitions":{}},{"Id":2,"Rules":["StartNeterminal -> QueryOrUpdateUnit .EOF"],"Transitions":{"EOF":5}},{"Id":3,"Rules":["QueryOrUpdateUnit -> QueryOrUpdateUnit_repetition0 .QueryOrUpdateUnit_group0","QueryOrUpdateUnit_repetition0 -> QueryOrUpdateUnit_repetition0 .QueryOrUpdateUnit_repetition0_group0","QueryOrUpdateUnit_group0 -> .Query","QueryOrUpdateUnit_group0 -> .Update","QueryOrUpdateUnit_repetition0_group0 -> .BaseDecl","QueryOrUpdateUnit_repetition0_group0 -> .PrefixDecl","Query -> .Query_group0 Query_option0","Update -> .Update_repetition0 Update1","BaseDecl -> .BASE IRIREF","BaseDecl -> .BASE IRIREF error","BaseDecl -> .BASE error","PrefixDecl -> .PREFIX PNAME_NS IRIREF","PrefixDecl -> .PREFIX error","PrefixDecl -> .PREFIX PNAME_NS IRIREF error","Query_group0 -> .SelectQuery","Query_group0 -> .ConstructQuery","Query_group0 -> .DescribeQuery","Query_group0 -> .AskQuery","Update_repetition0 -> .","Update_repetition0 -> .Update_repetition0 Update1 ;","SelectQuery -> .SelectClause SelectQuery_repetition0 WhereClause SolutionModifier","ConstructQuery -> .CONSTRUCT ConstructTemplate ConstructQuery_repetition0 WhereClause SolutionModifier","ConstructQuery -> .CONSTRUCT ConstructQuery_repetition1 WHERE { ConstructQuery_option0 } SolutionModifier","DescribeQuery -> .DESCRIBE DescribeQuery_group0 DescribeQuery_repetition0 DescribeQuery_option0 SolutionModifier","AskQuery -> .ASK AskQuery_repetition0 WhereClause SolutionModifier","SelectClause -> .SELECT SelectClause_option0 SelectClause_group0"],"Transitions":{"QueryOrUpdateUnit_group0":6,"QueryOrUpdateUnit_repetition0_group0":7,"Query":8,"Update":9,"BaseDecl":10,"PrefixDecl":11,"Query_group0":12,"Update_repetition0":13,"BASE":14,"PREFIX":15,"SelectQuery":16,"ConstructQuery":17,"DescribeQuery":18,"AskQuery":19,"SelectClause":20,"CONSTRUCT":21,"DESCRIBE":22,"ASK":23,"SELECT":24}},{"Id":4,"Rules":["QueryOrUpdateUnit -> error .QueryOrUpdateUnit_group1","QueryOrUpdateUnit_group1 -> .Query","QueryOrUpdateUnit_group1 -> .Update","Query -> .Query_group0 Query_option0","Update -> .Update_repetition0 Update1","Query_group0 -> .SelectQuery","Query_group0 -> .ConstructQuery","Query_group0 -> .DescribeQuery","Query_group0 -> .AskQuery","Update_repetition0 -> .","Update_repetition0 -> .Update_repetition0 Update1 ;","SelectQuery -> .SelectClause SelectQuery_repetition0 WhereClause SolutionModifier","ConstructQuery -> .CONSTRUCT ConstructTemplate ConstructQuery_repetition0 WhereClause SolutionModifier","ConstructQuery -> .CONSTRUCT ConstructQuery_repetition1 WHERE { ConstructQuery_option0 } SolutionModifier","DescribeQuery -> .DESCRIBE DescribeQuery_group0 DescribeQuery_repetition0 DescribeQuery_option0 SolutionModifier","AskQuery -> .ASK AskQuery_repetition0 WhereClause SolutionModifier","SelectClause -> .SELECT SelectClause_option0 SelectClause_group0"],"Transitions":{"QueryOrUpdateUnit_group1":25,"Query":26,"Update":27,"Query_group0":12,"Update_repetition0":13,"SelectQuery":16,"ConstructQuery":17,"DescribeQuery":18,"AskQuery":19,"SelectClause":20,"CONSTRUCT":21,"DESCRIBE":22,"ASK":23,"SELECT":24}},{"Id":5,"Rules":["StartNeterminal -> QueryOrUpdateUnit EOF ."],"Transitions":{}},{"Id":6,"Rules":["QueryOrUpdateUnit -> QueryOrUpdateUnit_repetition0 QueryOrUpdateUnit_group0 ."],"Transitions":{}},{"Id":7,"Rules":["QueryOrUpdateUnit_repetition0 -> QueryOrUpdateUnit_repetition0 QueryOrUpdateUnit_repetition0_group0 ."],"Transitions":{}},{"Id":8,"Rules":["QueryOrUpdateUnit_group0 -> Query ."],"Transitions":{}},{"Id":9,"Rules":["QueryOrUpdateUnit_group0 -> Update ."],"Transitions":{}},{"Id":10,"Rules":["QueryOrUpdateUnit_repetition0_group0 -> BaseDecl ."],"Transitions":{}},{"Id":11,"Rules":["QueryOrUpdateUnit_repetition0_group0 -> PrefixDecl ."],"Transitions":{}},{"Id":12,"Rules":["Query -> Query_group0 .Query_option0","Query_option0 -> .","Query_option0 -> .ValuesClause","ValuesClause -> .VALUES InlineData"],"Transitions":{"Query_option0":28,"ValuesClause":29,"VALUES":30}},{"Id":13,"Rules":["Update -> Update_repetition0 .Update1","Update_repetition0 -> Update_repetition0 .Update1 ;","Update1 -> .LOAD Update1_option0 iri Update1_option1","Update1 -> .Update1_group0 Update1_option2 GraphRefAll","Update1 -> .Update1_group1 Update1_option3 GraphOrDefault TO GraphOrDefault","Update1 -> .CREATE Update1_option4 GRAPH iri","Update1 -> .INSERTDATA QuadPattern","Update1 -> .DELETEDATA QuadPattern","Update1 -> .DELETEWHERE QuadPattern","Update1 -> .Update1_option5 InsertClause Update1_option6 Update1_repetition0 WHERE GroupGraphPattern","Update1 -> .Update1_option7 DeleteClause Update1_option8 Update1_repetition1 WHERE GroupGraphPattern","Update1_group0 -> .CLEAR","Update1_group0 -> .DROP","Update1_group1 -> .ADD","Update1_group1 -> .MOVE","Update1_group1 -> .COPY","Update1_option5 -> .","Update1_option5 -> .WithClause","Update1_option7 -> .","Update1_option7 -> .WithClause","WithClause -> .WITH iri"],"Transitions":{"Update1":31,"LOAD":32,"Update1_group0":33,"Update1_group1":34,"CREATE":35,"INSERTDATA":36,"DELETEDATA":37,"DELETEWHERE":38,"Update1_option5":39,"Update1_option7":40,"CLEAR":41,"DROP":42,"ADD":43,"MOVE":44,"COPY":45,"WithClause":46,"WITH":47}},{"Id":14,"Rules":["BaseDecl -> BASE .IRIREF","BaseDecl -> BASE .IRIREF error","BaseDecl -> BASE .error"],"Transitions":{"IRIREF":48,"error":49}},{"Id":15,"Rules":["PrefixDecl -> PREFIX .PNAME_NS IRIREF","PrefixDecl -> PREFIX .error","PrefixDecl -> PREFIX .PNAME_NS IRIREF error"],"Transitions":{"PNAME_NS":50,"error":51}},{"Id":16,"Rules":["Query_group0 -> SelectQuery ."],"Transitions":{}},{"Id":17,"Rules":["Query_group0 -> ConstructQuery ."],"Transitions":{}},{"Id":18,"Rules":["Query_group0 -> DescribeQuery ."],"Transitions":{}},{"Id":19,"Rules":["Query_group0 -> AskQuery ."],"Transitions":{}},{"Id":20,"Rules":["SelectQuery -> SelectClause .SelectQuery_repetition0 WhereClause SolutionModifier","SelectQuery_repetition0 -> .","SelectQuery_repetition0 -> .SelectQuery_repetition0 DatasetClause"],"Transitions":{"SelectQuery_repetition0":52}},{"Id":21,"Rules":["ConstructQuery -> CONSTRUCT .ConstructTemplate ConstructQuery_repetition0 WhereClause SolutionModifier","ConstructQuery -> CONSTRUCT .ConstructQuery_repetition1 WHERE { ConstructQuery_option0 } SolutionModifier","ConstructTemplate -> .{ ConstructTemplate_option0 }","ConstructQuery_repetition1 -> .","ConstructQuery_repetition1 -> .ConstructQuery_repetition1 DatasetClause"],"Transitions":{"ConstructTemplate":53,"ConstructQuery_repetition1":54,"{":55}},{"Id":22,"Rules":["DescribeQuery -> DESCRIBE .DescribeQuery_group0 DescribeQuery_repetition0 DescribeQuery_option0 SolutionModifier","DescribeQuery_group0 -> .DescribeQuery_group0_repetition_plus0","DescribeQuery_group0 -> .*","DescribeQuery_group0_repetition_plus0 -> .DescribeQuery_group0_repetition_plus0_group0","DescribeQuery_group0_repetition_plus0 -> .DescribeQuery_group0_repetition_plus0 DescribeQuery_group0_repetition_plus0_group0","DescribeQuery_group0_repetition_plus0_group0 -> .VAR","DescribeQuery_group0_repetition_plus0_group0 -> .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"DescribeQuery_group0":56,"DescribeQuery_group0_repetition_plus0":57,"*":58,"DescribeQuery_group0_repetition_plus0_group0":59,"VAR":60,"iri":61,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":23,"Rules":["AskQuery -> ASK .AskQuery_repetition0 WhereClause SolutionModifier","AskQuery_repetition0 -> .","AskQuery_repetition0 -> .AskQuery_repetition0 DatasetClause"],"Transitions":{"AskQuery_repetition0":65}},{"Id":24,"Rules":["SelectClause -> SELECT .SelectClause_option0 SelectClause_group0","SelectClause_option0 -> .","SelectClause_option0 -> .SelectClause_option0_group0","SelectClause_option0_group0 -> .DISTINCT","SelectClause_option0_group0 -> .REDUCED"],"Transitions":{"SelectClause_option0":66,"SelectClause_option0_group0":67,"DISTINCT":68,"REDUCED":69}},{"Id":25,"Rules":["QueryOrUpdateUnit -> error QueryOrUpdateUnit_group1 ."],"Transitions":{}},{"Id":26,"Rules":["QueryOrUpdateUnit_group1 -> Query ."],"Transitions":{}},{"Id":27,"Rules":["QueryOrUpdateUnit_group1 -> Update ."],"Transitions":{}},{"Id":28,"Rules":["Query -> Query_group0 Query_option0 ."],"Transitions":{}},{"Id":29,"Rules":["Query_option0 -> ValuesClause ."],"Transitions":{}},{"Id":30,"Rules":["ValuesClause -> VALUES .InlineData","InlineData -> .VAR { InlineData_repetition0 }","InlineData -> .( InlineData_repetition1 ) { InlineData_repetition2 }"],"Transitions":{"InlineData":70,"VAR":71,"(":72}},{"Id":31,"Rules":["Update -> Update_repetition0 Update1 .","Update_repetition0 -> Update_repetition0 Update1 .;"],"Transitions":{";":73}},{"Id":32,"Rules":["Update1 -> LOAD .Update1_option0 iri Update1_option1","Update1_option0 -> .","Update1_option0 -> .SILENT"],"Transitions":{"Update1_option0":74,"SILENT":75}},{"Id":33,"Rules":["Update1 -> Update1_group0 .Update1_option2 GraphRefAll","Update1_option2 -> .","Update1_option2 -> .SILENT"],"Transitions":{"Update1_option2":76,"SILENT":77}},{"Id":34,"Rules":["Update1 -> Update1_group1 .Update1_option3 GraphOrDefault TO GraphOrDefault","Update1_option3 -> .","Update1_option3 -> .SILENT"],"Transitions":{"Update1_option3":78,"SILENT":79}},{"Id":35,"Rules":["Update1 -> CREATE .Update1_option4 GRAPH iri","Update1_option4 -> .","Update1_option4 -> .SILENT"],"Transitions":{"Update1_option4":80,"SILENT":81}},{"Id":36,"Rules":["Update1 -> INSERTDATA .QuadPattern","QuadPattern -> .{ QuadPattern_option0 QuadPattern_repetition0 }"],"Transitions":{"QuadPattern":82,"{":83}},{"Id":37,"Rules":["Update1 -> DELETEDATA .QuadPattern","QuadPattern -> .{ QuadPattern_option0 QuadPattern_repetition0 }"],"Transitions":{"QuadPattern":84,"{":83}},{"Id":38,"Rules":["Update1 -> DELETEWHERE .QuadPattern","QuadPattern -> .{ QuadPattern_option0 QuadPattern_repetition0 }"],"Transitions":{"QuadPattern":85,"{":83}},{"Id":39,"Rules":["Update1 -> Update1_option5 .InsertClause Update1_option6 Update1_repetition0 WHERE GroupGraphPattern","InsertClause -> .INSERT QuadPattern"],"Transitions":{"InsertClause":86,"INSERT":87}},{"Id":40,"Rules":["Update1 -> Update1_option7 .DeleteClause Update1_option8 Update1_repetition1 WHERE GroupGraphPattern","DeleteClause -> .DELETE QuadPattern"],"Transitions":{"DeleteClause":88,"DELETE":89}},{"Id":41,"Rules":["Update1_group0 -> CLEAR ."],"Transitions":{}},{"Id":42,"Rules":["Update1_group0 -> DROP ."],"Transitions":{}},{"Id":43,"Rules":["Update1_group1 -> ADD ."],"Transitions":{}},{"Id":44,"Rules":["Update1_group1 -> MOVE ."],"Transitions":{}},{"Id":45,"Rules":["Update1_group1 -> COPY ."],"Transitions":{}},{"Id":46,"Rules":["Update1_option5 -> WithClause .","Update1_option7 -> WithClause ."],"Transitions":{}},{"Id":47,"Rules":["WithClause -> WITH .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":90,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":48,"Rules":["BaseDecl -> BASE IRIREF .","BaseDecl -> BASE IRIREF .error"],"Transitions":{"error":91}},{"Id":49,"Rules":["BaseDecl -> BASE error ."],"Transitions":{}},{"Id":50,"Rules":["PrefixDecl -> PREFIX PNAME_NS .IRIREF","PrefixDecl -> PREFIX PNAME_NS .IRIREF error"],"Transitions":{"IRIREF":92}},{"Id":51,"Rules":["PrefixDecl -> PREFIX error ."],"Transitions":{}},{"Id":52,"Rules":["SelectQuery -> SelectClause SelectQuery_repetition0 .WhereClause SolutionModifier","SelectQuery_repetition0 -> SelectQuery_repetition0 .DatasetClause","WhereClause -> .WhereClause_option0 GroupGraphPattern","DatasetClause -> .FROM DatasetClause_option0 iri","WhereClause_option0 -> .","WhereClause_option0 -> .WHERE"],"Transitions":{"WhereClause":93,"DatasetClause":94,"WhereClause_option0":95,"FROM":96,"WHERE":97}},{"Id":53,"Rules":["ConstructQuery -> CONSTRUCT ConstructTemplate .ConstructQuery_repetition0 WhereClause SolutionModifier","ConstructQuery_repetition0 -> .","ConstructQuery_repetition0 -> .ConstructQuery_repetition0 DatasetClause"],"Transitions":{"ConstructQuery_repetition0":98}},{"Id":54,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 .WHERE { ConstructQuery_option0 } SolutionModifier","ConstructQuery_repetition1 -> ConstructQuery_repetition1 .DatasetClause","DatasetClause -> .FROM DatasetClause_option0 iri"],"Transitions":{"WHERE":99,"DatasetClause":100,"FROM":96}},{"Id":55,"Rules":["ConstructTemplate -> { .ConstructTemplate_option0 }","ConstructTemplate_option0 -> .","ConstructTemplate_option0 -> .ConstructTriples","ConstructTriples -> .ConstructTriples_repetition0 TriplesSameSubjectError ConstructTriples_option0","ConstructTriples_repetition0 -> .","ConstructTriples_repetition0 -> .ConstructTriples_repetition0 TriplesSameSubjectError ."],"Transitions":{"ConstructTemplate_option0":101,"ConstructTriples":102,"ConstructTriples_repetition0":103}},{"Id":56,"Rules":["DescribeQuery -> DESCRIBE DescribeQuery_group0 .DescribeQuery_repetition0 DescribeQuery_option0 SolutionModifier","DescribeQuery_repetition0 -> .","DescribeQuery_repetition0 -> .DescribeQuery_repetition0 DatasetClause"],"Transitions":{"DescribeQuery_repetition0":104}},{"Id":57,"Rules":["DescribeQuery_group0 -> DescribeQuery_group0_repetition_plus0 .","DescribeQuery_group0_repetition_plus0 -> DescribeQuery_group0_repetition_plus0 .DescribeQuery_group0_repetition_plus0_group0","DescribeQuery_group0_repetition_plus0_group0 -> .VAR","DescribeQuery_group0_repetition_plus0_group0 -> .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"DescribeQuery_group0_repetition_plus0_group0":105,"VAR":60,"iri":61,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":58,"Rules":["DescribeQuery_group0 -> * ."],"Transitions":{}},{"Id":59,"Rules":["DescribeQuery_group0_repetition_plus0 -> DescribeQuery_group0_repetition_plus0_group0 ."],"Transitions":{}},{"Id":60,"Rules":["DescribeQuery_group0_repetition_plus0_group0 -> VAR ."],"Transitions":{}},{"Id":61,"Rules":["DescribeQuery_group0_repetition_plus0_group0 -> iri ."],"Transitions":{}},{"Id":62,"Rules":["iri -> IRIREF ."],"Transitions":{}},{"Id":63,"Rules":["iri -> PNAME_LN ."],"Transitions":{}},{"Id":64,"Rules":["iri -> PNAME_NS ."],"Transitions":{}},{"Id":65,"Rules":["AskQuery -> ASK AskQuery_repetition0 .WhereClause SolutionModifier","AskQuery_repetition0 -> AskQuery_repetition0 .DatasetClause","WhereClause -> .WhereClause_option0 GroupGraphPattern","DatasetClause -> .FROM DatasetClause_option0 iri","WhereClause_option0 -> .","WhereClause_option0 -> .WHERE"],"Transitions":{"WhereClause":106,"DatasetClause":107,"WhereClause_option0":95,"FROM":96,"WHERE":97}},{"Id":66,"Rules":["SelectClause -> SELECT SelectClause_option0 .SelectClause_group0","SelectClause_group0 -> .SelectClause_group0_repetition_plus0","SelectClause_group0 -> .*","SelectClause_group0_repetition_plus0 -> .SelectClauseItem","SelectClause_group0_repetition_plus0 -> .SelectClause_group0_repetition_plus0 SelectClauseItem","SelectClauseItem -> .VAR","SelectClauseItem -> .( Expression AS VAR )"],"Transitions":{"SelectClause_group0":108,"SelectClause_group0_repetition_plus0":109,"*":110,"SelectClauseItem":111,"VAR":112,"(":113}},{"Id":67,"Rules":["SelectClause_option0 -> SelectClause_option0_group0 ."],"Transitions":{}},{"Id":68,"Rules":["SelectClause_option0_group0 -> DISTINCT ."],"Transitions":{}},{"Id":69,"Rules":["SelectClause_option0_group0 -> REDUCED ."],"Transitions":{}},{"Id":70,"Rules":["ValuesClause -> VALUES InlineData ."],"Transitions":{}},{"Id":71,"Rules":["InlineData -> VAR .{ InlineData_repetition0 }"],"Transitions":{"{":114}},{"Id":72,"Rules":["InlineData -> ( .InlineData_repetition1 ) { InlineData_repetition2 }","InlineData_repetition1 -> .","InlineData_repetition1 -> .InlineData_repetition1 VAR"],"Transitions":{"InlineData_repetition1":115}},{"Id":73,"Rules":["Update_repetition0 -> Update_repetition0 Update1 ; ."],"Transitions":{}},{"Id":74,"Rules":["Update1 -> LOAD Update1_option0 .iri Update1_option1","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":116,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":75,"Rules":["Update1_option0 -> SILENT ."],"Transitions":{}},{"Id":76,"Rules":["Update1 -> Update1_group0 Update1_option2 .GraphRefAll","GraphRefAll -> .GRAPH iri","GraphRefAll -> .GraphRefAll_group0","GraphRefAll_group0 -> .DEFAULT","GraphRefAll_group0 -> .NAMED","GraphRefAll_group0 -> .ALL"],"Transitions":{"GraphRefAll":117,"GRAPH":118,"GraphRefAll_group0":119,"DEFAULT":120,"NAMED":121,"ALL":122}},{"Id":77,"Rules":["Update1_option2 -> SILENT ."],"Transitions":{}},{"Id":78,"Rules":["Update1 -> Update1_group1 Update1_option3 .GraphOrDefault TO GraphOrDefault","GraphOrDefault -> .DEFAULT","GraphOrDefault -> .GraphOrDefault_option0 iri","GraphOrDefault_option0 -> .","GraphOrDefault_option0 -> .GRAPH"],"Transitions":{"GraphOrDefault":123,"DEFAULT":124,"GraphOrDefault_option0":125,"GRAPH":126}},{"Id":79,"Rules":["Update1_option3 -> SILENT ."],"Transitions":{}},{"Id":80,"Rules":["Update1 -> CREATE Update1_option4 .GRAPH iri"],"Transitions":{"GRAPH":127}},{"Id":81,"Rules":["Update1_option4 -> SILENT ."],"Transitions":{}},{"Id":82,"Rules":["Update1 -> INSERTDATA QuadPattern ."],"Transitions":{}},{"Id":83,"Rules":["QuadPattern -> { .QuadPattern_option0 QuadPattern_repetition0 }","QuadPattern_option0 -> .","QuadPattern_option0 -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"QuadPattern_option0":128,"TriplesTemplate":129,"TriplesTemplate_repetition0":130}},{"Id":84,"Rules":["Update1 -> DELETEDATA QuadPattern ."],"Transitions":{}},{"Id":85,"Rules":["Update1 -> DELETEWHERE QuadPattern ."],"Transitions":{}},{"Id":86,"Rules":["Update1 -> Update1_option5 InsertClause .Update1_option6 Update1_repetition0 WHERE GroupGraphPattern","Update1_option6 -> .","Update1_option6 -> .DeleteClause","DeleteClause -> .DELETE QuadPattern"],"Transitions":{"Update1_option6":131,"DeleteClause":132,"DELETE":89}},{"Id":87,"Rules":["InsertClause -> INSERT .QuadPattern","QuadPattern -> .{ QuadPattern_option0 QuadPattern_repetition0 }"],"Transitions":{"QuadPattern":133,"{":83}},{"Id":88,"Rules":["Update1 -> Update1_option7 DeleteClause .Update1_option8 Update1_repetition1 WHERE GroupGraphPattern","Update1_option8 -> .","Update1_option8 -> .InsertClause","InsertClause -> .INSERT QuadPattern"],"Transitions":{"Update1_option8":134,"InsertClause":135,"INSERT":87}},{"Id":89,"Rules":["DeleteClause -> DELETE .QuadPattern","QuadPattern -> .{ QuadPattern_option0 QuadPattern_repetition0 }"],"Transitions":{"QuadPattern":136,"{":83}},{"Id":90,"Rules":["WithClause -> WITH iri ."],"Transitions":{}},{"Id":91,"Rules":["BaseDecl -> BASE IRIREF error ."],"Transitions":{}},{"Id":92,"Rules":["PrefixDecl -> PREFIX PNAME_NS IRIREF .","PrefixDecl -> PREFIX PNAME_NS IRIREF .error"],"Transitions":{"error":137}},{"Id":93,"Rules":["SelectQuery -> SelectClause SelectQuery_repetition0 WhereClause .SolutionModifier","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":138,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":94,"Rules":["SelectQuery_repetition0 -> SelectQuery_repetition0 DatasetClause ."],"Transitions":{}},{"Id":95,"Rules":["WhereClause -> WhereClause_option0 .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":142,"{":143}},{"Id":96,"Rules":["DatasetClause -> FROM .DatasetClause_option0 iri","DatasetClause_option0 -> .","DatasetClause_option0 -> .NAMED"],"Transitions":{"DatasetClause_option0":144,"NAMED":145}},{"Id":97,"Rules":["WhereClause_option0 -> WHERE ."],"Transitions":{}},{"Id":98,"Rules":["ConstructQuery -> CONSTRUCT ConstructTemplate ConstructQuery_repetition0 .WhereClause SolutionModifier","ConstructQuery_repetition0 -> ConstructQuery_repetition0 .DatasetClause","WhereClause -> .WhereClause_option0 GroupGraphPattern","DatasetClause -> .FROM DatasetClause_option0 iri","WhereClause_option0 -> .","WhereClause_option0 -> .WHERE"],"Transitions":{"WhereClause":146,"DatasetClause":147,"WhereClause_option0":95,"FROM":96,"WHERE":97}},{"Id":99,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 WHERE .{ ConstructQuery_option0 } SolutionModifier"],"Transitions":{"{":148}},{"Id":100,"Rules":["ConstructQuery_repetition1 -> ConstructQuery_repetition1 DatasetClause ."],"Transitions":{}},{"Id":101,"Rules":["ConstructTemplate -> { ConstructTemplate_option0 .}"],"Transitions":{"}":149}},{"Id":102,"Rules":["ConstructTemplate_option0 -> ConstructTriples ."],"Transitions":{}},{"Id":103,"Rules":["ConstructTriples -> ConstructTriples_repetition0 .TriplesSameSubjectError ConstructTriples_option0","ConstructTriples_repetition0 -> ConstructTriples_repetition0 .TriplesSameSubjectError .","TriplesSameSubjectError -> .TriplesSameSubject","TriplesSameSubjectError -> .error","TriplesSameSubject -> .VarOrTerm PropertyListNotEmpty","TriplesSameSubject -> .CURSOR","VarOrTerm -> .VAR","VarOrTerm -> .iri","VarOrTerm -> .Literal","VarOrTerm -> .BLANK_NODE_LABEL","VarOrTerm -> .ANON","VarOrTerm -> .NIL","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"TriplesSameSubjectError":150,"TriplesSameSubject":151,"error":152,"VarOrTerm":153,"CURSOR":154,"VAR":155,"iri":156,"Literal":157,"BLANK_NODE_LABEL":158,"ANON":159,"NIL":160,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":104,"Rules":["DescribeQuery -> DESCRIBE DescribeQuery_group0 DescribeQuery_repetition0 .DescribeQuery_option0 SolutionModifier","DescribeQuery_repetition0 -> DescribeQuery_repetition0 .DatasetClause","DescribeQuery_option0 -> .","DescribeQuery_option0 -> .WhereClause","DatasetClause -> .FROM DatasetClause_option0 iri","WhereClause -> .WhereClause_option0 GroupGraphPattern","WhereClause_option0 -> .","WhereClause_option0 -> .WHERE"],"Transitions":{"DescribeQuery_option0":179,"DatasetClause":180,"WhereClause":181,"FROM":96,"WhereClause_option0":95,"WHERE":97}},{"Id":105,"Rules":["DescribeQuery_group0_repetition_plus0 -> DescribeQuery_group0_repetition_plus0 DescribeQuery_group0_repetition_plus0_group0 ."],"Transitions":{}},{"Id":106,"Rules":["AskQuery -> ASK AskQuery_repetition0 WhereClause .SolutionModifier","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":182,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":107,"Rules":["AskQuery_repetition0 -> AskQuery_repetition0 DatasetClause ."],"Transitions":{}},{"Id":108,"Rules":["SelectClause -> SELECT SelectClause_option0 SelectClause_group0 ."],"Transitions":{}},{"Id":109,"Rules":["SelectClause_group0 -> SelectClause_group0_repetition_plus0 .","SelectClause_group0_repetition_plus0 -> SelectClause_group0_repetition_plus0 .SelectClauseItem","SelectClauseItem -> .VAR","SelectClauseItem -> .( Expression AS VAR )"],"Transitions":{"SelectClauseItem":183,"VAR":112,"(":113}},{"Id":110,"Rules":["SelectClause_group0 -> * ."],"Transitions":{}},{"Id":111,"Rules":["SelectClause_group0_repetition_plus0 -> SelectClauseItem ."],"Transitions":{}},{"Id":112,"Rules":["SelectClauseItem -> VAR ."],"Transitions":{}},{"Id":113,"Rules":["SelectClauseItem -> ( .Expression AS VAR )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":184,"Expression_repetition0":185}},{"Id":114,"Rules":["InlineData -> VAR { .InlineData_repetition0 }","InlineData_repetition0 -> .","InlineData_repetition0 -> .InlineData_repetition0 DataBlockValue"],"Transitions":{"InlineData_repetition0":186}},{"Id":115,"Rules":["InlineData -> ( InlineData_repetition1 .) { InlineData_repetition2 }","InlineData_repetition1 -> InlineData_repetition1 .VAR"],"Transitions":{")":187,"VAR":188}},{"Id":116,"Rules":["Update1 -> LOAD Update1_option0 iri .Update1_option1","Update1_option1 -> .","Update1_option1 -> .IntoGraphClause","IntoGraphClause -> .INTO GRAPH iri"],"Transitions":{"Update1_option1":189,"IntoGraphClause":190,"INTO":191}},{"Id":117,"Rules":["Update1 -> Update1_group0 Update1_option2 GraphRefAll ."],"Transitions":{}},{"Id":118,"Rules":["GraphRefAll -> GRAPH .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":192,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":119,"Rules":["GraphRefAll -> GraphRefAll_group0 ."],"Transitions":{}},{"Id":120,"Rules":["GraphRefAll_group0 -> DEFAULT ."],"Transitions":{}},{"Id":121,"Rules":["GraphRefAll_group0 -> NAMED ."],"Transitions":{}},{"Id":122,"Rules":["GraphRefAll_group0 -> ALL ."],"Transitions":{}},{"Id":123,"Rules":["Update1 -> Update1_group1 Update1_option3 GraphOrDefault .TO GraphOrDefault"],"Transitions":{"TO":193}},{"Id":124,"Rules":["GraphOrDefault -> DEFAULT ."],"Transitions":{}},{"Id":125,"Rules":["GraphOrDefault -> GraphOrDefault_option0 .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":194,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":126,"Rules":["GraphOrDefault_option0 -> GRAPH ."],"Transitions":{}},{"Id":127,"Rules":["Update1 -> CREATE Update1_option4 GRAPH .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":195,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":128,"Rules":["QuadPattern -> { QuadPattern_option0 .QuadPattern_repetition0 }","QuadPattern_repetition0 -> .","QuadPattern_repetition0 -> .QuadPattern_repetition0 QuadsNotTriples"],"Transitions":{"QuadPattern_repetition0":196}},{"Id":129,"Rules":["QuadPattern_option0 -> TriplesTemplate ."],"Transitions":{}},{"Id":130,"Rules":["TriplesTemplate -> TriplesTemplate_repetition0 .TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> TriplesTemplate_repetition0 .TriplesSameSubjectError .","TriplesSameSubjectError -> .TriplesSameSubject","TriplesSameSubjectError -> .error","TriplesSameSubject -> .VarOrTerm PropertyListNotEmpty","TriplesSameSubject -> .CURSOR","VarOrTerm -> .VAR","VarOrTerm -> .iri","VarOrTerm -> .Literal","VarOrTerm -> .BLANK_NODE_LABEL","VarOrTerm -> .ANON","VarOrTerm -> .NIL","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"TriplesSameSubjectError":197,"TriplesSameSubject":151,"error":152,"VarOrTerm":153,"CURSOR":154,"VAR":155,"iri":156,"Literal":157,"BLANK_NODE_LABEL":158,"ANON":159,"NIL":160,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":131,"Rules":["Update1 -> Update1_option5 InsertClause Update1_option6 .Update1_repetition0 WHERE GroupGraphPattern","Update1_repetition0 -> .","Update1_repetition0 -> .Update1_repetition0 UsingClause"],"Transitions":{"Update1_repetition0":198}},{"Id":132,"Rules":["Update1_option6 -> DeleteClause ."],"Transitions":{}},{"Id":133,"Rules":["InsertClause -> INSERT QuadPattern ."],"Transitions":{}},{"Id":134,"Rules":["Update1 -> Update1_option7 DeleteClause Update1_option8 .Update1_repetition1 WHERE GroupGraphPattern","Update1_repetition1 -> .","Update1_repetition1 -> .Update1_repetition1 UsingClause"],"Transitions":{"Update1_repetition1":199}},{"Id":135,"Rules":["Update1_option8 -> InsertClause ."],"Transitions":{}},{"Id":136,"Rules":["DeleteClause -> DELETE QuadPattern ."],"Transitions":{}},{"Id":137,"Rules":["PrefixDecl -> PREFIX PNAME_NS IRIREF error ."],"Transitions":{}},{"Id":138,"Rules":["SelectQuery -> SelectClause SelectQuery_repetition0 WhereClause SolutionModifier ."],"Transitions":{}},{"Id":139,"Rules":["SolutionModifier -> SolutionModifier_option0 .SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option1 -> .","SolutionModifier_option1 -> .HavingClause","HavingClause -> .HAVING HavingClause_repetition_plus0","HavingClause -> .HAVING error"],"Transitions":{"SolutionModifier_option1":200,"HavingClause":201,"HAVING":202}},{"Id":140,"Rules":["SolutionModifier_option0 -> GroupClause ."],"Transitions":{}},{"Id":141,"Rules":["GroupClause -> GROUP .BY GroupClause_repetition_plus0","GroupClause -> GROUP .BY error"],"Transitions":{"BY":203}},{"Id":142,"Rules":["WhereClause -> WhereClause_option0 GroupGraphPattern ."],"Transitions":{}},{"Id":143,"Rules":["GroupGraphPattern -> { .SubSelect }","GroupGraphPattern -> { .GroupGraphPatternSub }","SubSelect -> .SelectClause WhereClause SolutionModifier SubSelect_option0","GroupGraphPatternSub -> .GroupGraphPatternSub_option0 GroupGraphPatternSub_repetition0","SelectClause -> .SELECT SelectClause_option0 SelectClause_group0","GroupGraphPatternSub_option0 -> .","GroupGraphPatternSub_option0 -> .TriplesBlock","TriplesBlock -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"SubSelect":204,"GroupGraphPatternSub":205,"SelectClause":206,"GroupGraphPatternSub_option0":207,"SELECT":24,"TriplesBlock":208,"TriplesTemplate":209,"TriplesTemplate_repetition0":130}},{"Id":144,"Rules":["DatasetClause -> FROM DatasetClause_option0 .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":210,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":145,"Rules":["DatasetClause_option0 -> NAMED ."],"Transitions":{}},{"Id":146,"Rules":["ConstructQuery -> CONSTRUCT ConstructTemplate ConstructQuery_repetition0 WhereClause .SolutionModifier","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":211,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":147,"Rules":["ConstructQuery_repetition0 -> ConstructQuery_repetition0 DatasetClause ."],"Transitions":{}},{"Id":148,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 WHERE { .ConstructQuery_option0 } SolutionModifier","ConstructQuery_option0 -> .","ConstructQuery_option0 -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"ConstructQuery_option0":212,"TriplesTemplate":213,"TriplesTemplate_repetition0":130}},{"Id":149,"Rules":["ConstructTemplate -> { ConstructTemplate_option0 } ."],"Transitions":{}},{"Id":150,"Rules":["ConstructTriples -> ConstructTriples_repetition0 TriplesSameSubjectError .ConstructTriples_option0","ConstructTriples_repetition0 -> ConstructTriples_repetition0 TriplesSameSubjectError ..","ConstructTriples_option0 -> .","ConstructTriples_option0 -> .."],"Transitions":{"ConstructTriples_option0":214,".":215}},{"Id":151,"Rules":["TriplesSameSubjectError -> TriplesSameSubject ."],"Transitions":{}},{"Id":152,"Rules":["TriplesSameSubjectError -> error ."],"Transitions":{}},{"Id":153,"Rules":["TriplesSameSubject -> VarOrTerm .PropertyListNotEmpty","PropertyListNotEmpty -> .VerbObjectList PropertyListNotEmpty_repetition0","VerbObjectList -> .Verb ObjectList","VerbObjectList -> .CURSOR","Verb -> .VAR","Verb -> .iri","Verb -> .a","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"PropertyListNotEmpty":216,"VerbObjectList":217,"Verb":218,"CURSOR":219,"VAR":220,"iri":221,"a":222,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":154,"Rules":["TriplesSameSubject -> CURSOR ."],"Transitions":{}},{"Id":155,"Rules":["VarOrTerm -> VAR ."],"Transitions":{}},{"Id":156,"Rules":["VarOrTerm -> iri ."],"Transitions":{}},{"Id":157,"Rules":["VarOrTerm -> Literal ."],"Transitions":{}},{"Id":158,"Rules":["VarOrTerm -> BLANK_NODE_LABEL ."],"Transitions":{}},{"Id":159,"Rules":["VarOrTerm -> ANON ."],"Transitions":{}},{"Id":160,"Rules":["VarOrTerm -> NIL ."],"Transitions":{}},{"Id":161,"Rules":["Literal -> String .","Literal -> String .LANGTAG","Literal -> String .^^ iri"],"Transitions":{"LANGTAG":223,"^^":224}},{"Id":162,"Rules":["Literal -> INTEGER ."],"Transitions":{}},{"Id":163,"Rules":["Literal -> DECIMAL ."],"Transitions":{}},{"Id":164,"Rules":["Literal -> DOUBLE ."],"Transitions":{}},{"Id":165,"Rules":["Literal -> NumericLiteralPositive ."],"Transitions":{}},{"Id":166,"Rules":["Literal -> NumericLiteralNegative ."],"Transitions":{}},{"Id":167,"Rules":["Literal -> true ."],"Transitions":{}},{"Id":168,"Rules":["Literal -> false ."],"Transitions":{}},{"Id":169,"Rules":["String -> STRING_LITERAL1 ."],"Transitions":{}},{"Id":170,"Rules":["String -> STRING_LITERAL2 ."],"Transitions":{}},{"Id":171,"Rules":["String -> STRING_LITERAL_LONG1 ."],"Transitions":{}},{"Id":172,"Rules":["String -> STRING_LITERAL_LONG2 ."],"Transitions":{}},{"Id":173,"Rules":["NumericLiteralPositive -> INTEGER_POSITIVE ."],"Transitions":{}},{"Id":174,"Rules":["NumericLiteralPositive -> DECIMAL_POSITIVE ."],"Transitions":{}},{"Id":175,"Rules":["NumericLiteralPositive -> DOUBLE_POSITIVE ."],"Transitions":{}},{"Id":176,"Rules":["NumericLiteralNegative -> INTEGER_NEGATIVE ."],"Transitions":{}},{"Id":177,"Rules":["NumericLiteralNegative -> DECIMAL_NEGATIVE ."],"Transitions":{}},{"Id":178,"Rules":["NumericLiteralNegative -> DOUBLE_NEGATIVE ."],"Transitions":{}},{"Id":179,"Rules":["DescribeQuery -> DESCRIBE DescribeQuery_group0 DescribeQuery_repetition0 DescribeQuery_option0 .SolutionModifier","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":225,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":180,"Rules":["DescribeQuery_repetition0 -> DescribeQuery_repetition0 DatasetClause ."],"Transitions":{}},{"Id":181,"Rules":["DescribeQuery_option0 -> WhereClause ."],"Transitions":{}},{"Id":182,"Rules":["AskQuery -> ASK AskQuery_repetition0 WhereClause SolutionModifier ."],"Transitions":{}},{"Id":183,"Rules":["SelectClause_group0_repetition_plus0 -> SelectClause_group0_repetition_plus0 SelectClauseItem ."],"Transitions":{}},{"Id":184,"Rules":["SelectClauseItem -> ( Expression .AS VAR )"],"Transitions":{"AS":226}},{"Id":185,"Rules":["Expression -> Expression_repetition0 .ConditionalAndExpression","Expression_repetition0 -> Expression_repetition0 .ConditionalAndExpression ||","ConditionalAndExpression -> .ConditionalAndExpression_repetition0 RelationalExpression","ConditionalAndExpression_repetition0 -> .","ConditionalAndExpression_repetition0 -> .ConditionalAndExpression_repetition0 RelationalExpression &&"],"Transitions":{"ConditionalAndExpression":227,"ConditionalAndExpression_repetition0":228}},{"Id":186,"Rules":["InlineData -> VAR { InlineData_repetition0 .}","InlineData_repetition0 -> InlineData_repetition0 .DataBlockValue","DataBlockValue -> .iri","DataBlockValue -> .Literal","DataBlockValue -> .UNDEF","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"}":229,"DataBlockValue":230,"iri":231,"Literal":232,"UNDEF":233,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":187,"Rules":["InlineData -> ( InlineData_repetition1 ) .{ InlineData_repetition2 }"],"Transitions":{"{":234}},{"Id":188,"Rules":["InlineData_repetition1 -> InlineData_repetition1 VAR ."],"Transitions":{}},{"Id":189,"Rules":["Update1 -> LOAD Update1_option0 iri Update1_option1 ."],"Transitions":{}},{"Id":190,"Rules":["Update1_option1 -> IntoGraphClause ."],"Transitions":{}},{"Id":191,"Rules":["IntoGraphClause -> INTO .GRAPH iri"],"Transitions":{"GRAPH":235}},{"Id":192,"Rules":["GraphRefAll -> GRAPH iri ."],"Transitions":{}},{"Id":193,"Rules":["Update1 -> Update1_group1 Update1_option3 GraphOrDefault TO .GraphOrDefault","GraphOrDefault -> .DEFAULT","GraphOrDefault -> .GraphOrDefault_option0 iri","GraphOrDefault_option0 -> .","GraphOrDefault_option0 -> .GRAPH"],"Transitions":{"GraphOrDefault":236,"DEFAULT":124,"GraphOrDefault_option0":125,"GRAPH":126}},{"Id":194,"Rules":["GraphOrDefault -> GraphOrDefault_option0 iri ."],"Transitions":{}},{"Id":195,"Rules":["Update1 -> CREATE Update1_option4 GRAPH iri ."],"Transitions":{}},{"Id":196,"Rules":["QuadPattern -> { QuadPattern_option0 QuadPattern_repetition0 .}","QuadPattern_repetition0 -> QuadPattern_repetition0 .QuadsNotTriples","QuadsNotTriples -> .GRAPH QuadsNotTriples_group0 { QuadsNotTriples_option0 } QuadsNotTriples_option1 QuadsNotTriples_option2"],"Transitions":{"}":237,"QuadsNotTriples":238,"GRAPH":239}},{"Id":197,"Rules":["TriplesTemplate -> TriplesTemplate_repetition0 TriplesSameSubjectError .TriplesTemplate_option0","TriplesTemplate_repetition0 -> TriplesTemplate_repetition0 TriplesSameSubjectError ..","TriplesTemplate_option0 -> .","TriplesTemplate_option0 -> .."],"Transitions":{"TriplesTemplate_option0":240,".":241}},{"Id":198,"Rules":["Update1 -> Update1_option5 InsertClause Update1_option6 Update1_repetition0 .WHERE GroupGraphPattern","Update1_repetition0 -> Update1_repetition0 .UsingClause","UsingClause -> .USING UsingClause_option0 iri"],"Transitions":{"WHERE":242,"UsingClause":243,"USING":244}},{"Id":199,"Rules":["Update1 -> Update1_option7 DeleteClause Update1_option8 Update1_repetition1 .WHERE GroupGraphPattern","Update1_repetition1 -> Update1_repetition1 .UsingClause","UsingClause -> .USING UsingClause_option0 iri"],"Transitions":{"WHERE":245,"UsingClause":246,"USING":244}},{"Id":200,"Rules":["SolutionModifier -> SolutionModifier_option0 SolutionModifier_option1 .SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option2 -> .","SolutionModifier_option2 -> .OrderClause","OrderClause -> .ORDER BY OrderClause_repetition_plus0","OrderClause -> .ORDER BY error"],"Transitions":{"SolutionModifier_option2":247,"OrderClause":248,"ORDER":249}},{"Id":201,"Rules":["SolutionModifier_option1 -> HavingClause ."],"Transitions":{}},{"Id":202,"Rules":["HavingClause -> HAVING .HavingClause_repetition_plus0","HavingClause -> HAVING .error","HavingClause_repetition_plus0 -> .Constraint","HavingClause_repetition_plus0 -> .HavingClause_repetition_plus0 Constraint","Constraint -> .BrackettedExpression","Constraint -> .BuiltInCall","Constraint -> .FunctionCall","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"HavingClause_repetition_plus0":250,"error":251,"Constraint":252,"BrackettedExpression":253,"BuiltInCall":254,"FunctionCall":255,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":203,"Rules":["GroupClause -> GROUP BY .GroupClause_repetition_plus0","GroupClause -> GROUP BY .error","GroupClause_repetition_plus0 -> .GroupCondition","GroupClause_repetition_plus0 -> .GroupClause_repetition_plus0 GroupCondition","GroupCondition -> .BuiltInCall","GroupCondition -> .FunctionCall","GroupCondition -> .( Expression )","GroupCondition -> .( Expression AS VAR )","GroupCondition -> .VAR","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"GroupClause_repetition_plus0":276,"error":277,"GroupCondition":278,"BuiltInCall":279,"FunctionCall":280,"(":281,"VAR":282,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":204,"Rules":["GroupGraphPattern -> { SubSelect .}"],"Transitions":{"}":283}},{"Id":205,"Rules":["GroupGraphPattern -> { GroupGraphPatternSub .}"],"Transitions":{"}":284}},{"Id":206,"Rules":["SubSelect -> SelectClause .WhereClause SolutionModifier SubSelect_option0","WhereClause -> .WhereClause_option0 GroupGraphPattern","WhereClause_option0 -> .","WhereClause_option0 -> .WHERE"],"Transitions":{"WhereClause":285,"WhereClause_option0":95,"WHERE":97}},{"Id":207,"Rules":["GroupGraphPatternSub -> GroupGraphPatternSub_option0 .GroupGraphPatternSub_repetition0","GroupGraphPatternSub_repetition0 -> .","GroupGraphPatternSub_repetition0 -> .GroupGraphPatternSub_repetition0 GroupGraphPatternSubTail"],"Transitions":{"GroupGraphPatternSub_repetition0":286}},{"Id":208,"Rules":["GroupGraphPatternSub_option0 -> TriplesBlock ."],"Transitions":{}},{"Id":209,"Rules":["TriplesBlock -> TriplesTemplate ."],"Transitions":{}},{"Id":210,"Rules":["DatasetClause -> FROM DatasetClause_option0 iri ."],"Transitions":{}},{"Id":211,"Rules":["ConstructQuery -> CONSTRUCT ConstructTemplate ConstructQuery_repetition0 WhereClause SolutionModifier ."],"Transitions":{}},{"Id":212,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 WHERE { ConstructQuery_option0 .} SolutionModifier"],"Transitions":{"}":287}},{"Id":213,"Rules":["ConstructQuery_option0 -> TriplesTemplate ."],"Transitions":{}},{"Id":214,"Rules":["ConstructTriples -> ConstructTriples_repetition0 TriplesSameSubjectError ConstructTriples_option0 ."],"Transitions":{}},{"Id":215,"Rules":["ConstructTriples_repetition0 -> ConstructTriples_repetition0 TriplesSameSubjectError . .","ConstructTriples_option0 -> . ."],"Transitions":{}},{"Id":216,"Rules":["TriplesSameSubject -> VarOrTerm PropertyListNotEmpty ."],"Transitions":{}},{"Id":217,"Rules":["PropertyListNotEmpty -> VerbObjectList .PropertyListNotEmpty_repetition0","PropertyListNotEmpty_repetition0 -> .","PropertyListNotEmpty_repetition0 -> .PropertyListNotEmpty_repetition0 SnadToChapu"],"Transitions":{"PropertyListNotEmpty_repetition0":288}},{"Id":218,"Rules":["VerbObjectList -> Verb .ObjectList","ObjectList -> .GraphNode ObjectList_repetition0","GraphNode -> .VarOrTerm","GraphNode -> .CURSOR","VarOrTerm -> .VAR","VarOrTerm -> .iri","VarOrTerm -> .Literal","VarOrTerm -> .BLANK_NODE_LABEL","VarOrTerm -> .ANON","VarOrTerm -> .NIL","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"ObjectList":289,"GraphNode":290,"VarOrTerm":291,"CURSOR":292,"VAR":155,"iri":156,"Literal":157,"BLANK_NODE_LABEL":158,"ANON":159,"NIL":160,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":219,"Rules":["VerbObjectList -> CURSOR ."],"Transitions":{}},{"Id":220,"Rules":["Verb -> VAR ."],"Transitions":{}},{"Id":221,"Rules":["Verb -> iri ."],"Transitions":{}},{"Id":222,"Rules":["Verb -> a ."],"Transitions":{}},{"Id":223,"Rules":["Literal -> String LANGTAG ."],"Transitions":{}},{"Id":224,"Rules":["Literal -> String ^^ .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":293,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":225,"Rules":["DescribeQuery -> DESCRIBE DescribeQuery_group0 DescribeQuery_repetition0 DescribeQuery_option0 SolutionModifier ."],"Transitions":{}},{"Id":226,"Rules":["SelectClauseItem -> ( Expression AS .VAR )"],"Transitions":{"VAR":294}},{"Id":227,"Rules":["Expression -> Expression_repetition0 ConditionalAndExpression .","Expression_repetition0 -> Expression_repetition0 ConditionalAndExpression .||"],"Transitions":{"||":295}},{"Id":228,"Rules":["ConditionalAndExpression -> ConditionalAndExpression_repetition0 .RelationalExpression","ConditionalAndExpression_repetition0 -> ConditionalAndExpression_repetition0 .RelationalExpression &&","RelationalExpression -> .AdditiveExpression","RelationalExpression -> .AdditiveExpression RelationalExpression_group0 AdditiveExpression","RelationalExpression -> .AdditiveExpression RelationalExpression_option0 IN ExpressionList","AdditiveExpression -> .MultiplicativeExpression AdditiveExpression_repetition0","MultiplicativeExpression -> .UnaryExpression MultiplicativeExpression_repetition0","UnaryExpression -> .UnaryExpression_option0 PrimaryExpression","UnaryExpression -> .! PrimaryExpression","UnaryExpression -> .- PrimaryExpression","UnaryExpression_option0 -> .","UnaryExpression_option0 -> .+"],"Transitions":{"RelationalExpression":296,"AdditiveExpression":297,"MultiplicativeExpression":298,"UnaryExpression":299,"UnaryExpression_option0":300,"!":301,"-":302,"+":303}},{"Id":229,"Rules":["InlineData -> VAR { InlineData_repetition0 } ."],"Transitions":{}},{"Id":230,"Rules":["InlineData_repetition0 -> InlineData_repetition0 DataBlockValue ."],"Transitions":{}},{"Id":231,"Rules":["DataBlockValue -> iri ."],"Transitions":{}},{"Id":232,"Rules":["DataBlockValue -> Literal ."],"Transitions":{}},{"Id":233,"Rules":["DataBlockValue -> UNDEF ."],"Transitions":{}},{"Id":234,"Rules":["InlineData -> ( InlineData_repetition1 ) { .InlineData_repetition2 }","InlineData_repetition2 -> .","InlineData_repetition2 -> .InlineData_repetition2 DataBlockValueList"],"Transitions":{"InlineData_repetition2":304}},{"Id":235,"Rules":["IntoGraphClause -> INTO GRAPH .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":305,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":236,"Rules":["Update1 -> Update1_group1 Update1_option3 GraphOrDefault TO GraphOrDefault ."],"Transitions":{}},{"Id":237,"Rules":["QuadPattern -> { QuadPattern_option0 QuadPattern_repetition0 } ."],"Transitions":{}},{"Id":238,"Rules":["QuadPattern_repetition0 -> QuadPattern_repetition0 QuadsNotTriples ."],"Transitions":{}},{"Id":239,"Rules":["QuadsNotTriples -> GRAPH .QuadsNotTriples_group0 { QuadsNotTriples_option0 } QuadsNotTriples_option1 QuadsNotTriples_option2","QuadsNotTriples_group0 -> .VAR","QuadsNotTriples_group0 -> .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"QuadsNotTriples_group0":306,"VAR":307,"iri":308,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":240,"Rules":["TriplesTemplate -> TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0 ."],"Transitions":{}},{"Id":241,"Rules":["TriplesTemplate_repetition0 -> TriplesTemplate_repetition0 TriplesSameSubjectError . .","TriplesTemplate_option0 -> . ."],"Transitions":{}},{"Id":242,"Rules":["Update1 -> Update1_option5 InsertClause Update1_option6 Update1_repetition0 WHERE .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":309,"{":143}},{"Id":243,"Rules":["Update1_repetition0 -> Update1_repetition0 UsingClause ."],"Transitions":{}},{"Id":244,"Rules":["UsingClause -> USING .UsingClause_option0 iri","UsingClause_option0 -> .","UsingClause_option0 -> .NAMED"],"Transitions":{"UsingClause_option0":310,"NAMED":311}},{"Id":245,"Rules":["Update1 -> Update1_option7 DeleteClause Update1_option8 Update1_repetition1 WHERE .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":312,"{":143}},{"Id":246,"Rules":["Update1_repetition1 -> Update1_repetition1 UsingClause ."],"Transitions":{}},{"Id":247,"Rules":["SolutionModifier -> SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 .SolutionModifier_option3","SolutionModifier_option3 -> .","SolutionModifier_option3 -> .LimitOffsetClauses","LimitOffsetClauses -> .LIMIT INTEGER","LimitOffsetClauses -> .OFFSET INTEGER","LimitOffsetClauses -> .LIMIT INTEGER OFFSET INTEGER","LimitOffsetClauses -> .OFFSET INTEGER LIMIT INTEGER","LimitOffsetClauses -> .LIMIT error","LimitOffsetClauses -> .OFFSET error"],"Transitions":{"SolutionModifier_option3":313,"LimitOffsetClauses":314,"LIMIT":315,"OFFSET":316}},{"Id":248,"Rules":["SolutionModifier_option2 -> OrderClause ."],"Transitions":{}},{"Id":249,"Rules":["OrderClause -> ORDER .BY OrderClause_repetition_plus0","OrderClause -> ORDER .BY error"],"Transitions":{"BY":317}},{"Id":250,"Rules":["HavingClause -> HAVING HavingClause_repetition_plus0 .","HavingClause_repetition_plus0 -> HavingClause_repetition_plus0 .Constraint","Constraint -> .BrackettedExpression","Constraint -> .BuiltInCall","Constraint -> .FunctionCall","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"Constraint":318,"BrackettedExpression":253,"BuiltInCall":254,"FunctionCall":255,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":251,"Rules":["HavingClause -> HAVING error ."],"Transitions":{}},{"Id":252,"Rules":["HavingClause_repetition_plus0 -> Constraint ."],"Transitions":{}},{"Id":253,"Rules":["Constraint -> BrackettedExpression ."],"Transitions":{}},{"Id":254,"Rules":["Constraint -> BuiltInCall ."],"Transitions":{}},{"Id":255,"Rules":["Constraint -> FunctionCall ."],"Transitions":{}},{"Id":256,"Rules":["BrackettedExpression -> ( .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":319,"Expression_repetition0":185}},{"Id":257,"Rules":["BuiltInCall -> Aggregate ."],"Transitions":{}},{"Id":258,"Rules":["BuiltInCall -> FUNC_ARITY0 .NIL"],"Transitions":{"NIL":320}},{"Id":259,"Rules":["BuiltInCall -> FUNC_ARITY1 .( Expression )"],"Transitions":{"(":321}},{"Id":260,"Rules":["BuiltInCall -> FUNC_ARITY2 .( Expression , Expression )"],"Transitions":{"(":322}},{"Id":261,"Rules":["BuiltInCall -> IF .( Expression , Expression , Expression )"],"Transitions":{"(":323}},{"Id":262,"Rules":["BuiltInCall -> BuiltInCall_group0 .ExpressionList","ExpressionList -> .NIL","ExpressionList -> .( ExpressionList_repetition0 Expression )"],"Transitions":{"ExpressionList":324,"NIL":325,"(":326}},{"Id":263,"Rules":["BuiltInCall -> BOUND .( VAR )"],"Transitions":{"(":327}},{"Id":264,"Rules":["BuiltInCall -> BNODE .NIL","BuiltInCall -> BNODE .( Expression )"],"Transitions":{"NIL":328,"(":329}},{"Id":265,"Rules":["BuiltInCall -> BuiltInCall_option0 .EXISTS GroupGraphPattern"],"Transitions":{"EXISTS":330}},{"Id":266,"Rules":["FunctionCall -> iri .NIL","FunctionCall -> iri .( FunctionCall_option0 FunctionCall_repetition0 Expression )"],"Transitions":{"NIL":331,"(":332}},{"Id":267,"Rules":["Aggregate -> COUNT .( Aggregate_option0 Aggregate_group0 )"],"Transitions":{"(":333}},{"Id":268,"Rules":["Aggregate -> FUNC_AGGREGATE .( Aggregate_option1 Expression )"],"Transitions":{"(":334}},{"Id":269,"Rules":["Aggregate -> GROUP_CONCAT .( Aggregate_option2 Expression Aggregate_option3 )"],"Transitions":{"(":335}},{"Id":270,"Rules":["BuiltInCall_group0 -> CONCAT ."],"Transitions":{}},{"Id":271,"Rules":["BuiltInCall_group0 -> COALESCE ."],"Transitions":{}},{"Id":272,"Rules":["BuiltInCall_group0 -> SUBSTR ."],"Transitions":{}},{"Id":273,"Rules":["BuiltInCall_group0 -> REGEX ."],"Transitions":{}},{"Id":274,"Rules":["BuiltInCall_group0 -> REPLACE ."],"Transitions":{}},{"Id":275,"Rules":["BuiltInCall_option0 -> NOT ."],"Transitions":{}},{"Id":276,"Rules":["GroupClause -> GROUP BY GroupClause_repetition_plus0 .","GroupClause_repetition_plus0 -> GroupClause_repetition_plus0 .GroupCondition","GroupCondition -> .BuiltInCall","GroupCondition -> .FunctionCall","GroupCondition -> .( Expression )","GroupCondition -> .( Expression AS VAR )","GroupCondition -> .VAR","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"GroupCondition":336,"BuiltInCall":279,"FunctionCall":280,"(":281,"VAR":282,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":277,"Rules":["GroupClause -> GROUP BY error ."],"Transitions":{}},{"Id":278,"Rules":["GroupClause_repetition_plus0 -> GroupCondition ."],"Transitions":{}},{"Id":279,"Rules":["GroupCondition -> BuiltInCall ."],"Transitions":{}},{"Id":280,"Rules":["GroupCondition -> FunctionCall ."],"Transitions":{}},{"Id":281,"Rules":["GroupCondition -> ( .Expression )","GroupCondition -> ( .Expression AS VAR )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":337,"Expression_repetition0":185}},{"Id":282,"Rules":["GroupCondition -> VAR ."],"Transitions":{}},{"Id":283,"Rules":["GroupGraphPattern -> { SubSelect } ."],"Transitions":{}},{"Id":284,"Rules":["GroupGraphPattern -> { GroupGraphPatternSub } ."],"Transitions":{}},{"Id":285,"Rules":["SubSelect -> SelectClause WhereClause .SolutionModifier SubSelect_option0","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":338,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":286,"Rules":["GroupGraphPatternSub -> GroupGraphPatternSub_option0 GroupGraphPatternSub_repetition0 .","GroupGraphPatternSub_repetition0 -> GroupGraphPatternSub_repetition0 .GroupGraphPatternSubTail","GroupGraphPatternSubTail -> .GraphPatternNotTriples GroupGraphPatternSubTail_option0 GroupGraphPatternSubTail_option1","GroupGraphPatternSubTail -> .GraphPatternNotTriplesError","GraphPatternNotTriples -> .GraphPatternNotTriples_repetition0 GroupGraphPattern","GraphPatternNotTriples -> .OPTIONAL GroupGraphPattern","GraphPatternNotTriples -> .MINUS GroupGraphPattern","GraphPatternNotTriples -> .GRAPH GraphPatternNotTriples_group0 GroupGraphPattern","GraphPatternNotTriples -> .SERVICE GraphPatternNotTriples_option0 GraphPatternNotTriples_group1 GroupGraphPattern","GraphPatternNotTriples -> .FILTER Constraint","GraphPatternNotTriples -> .BIND ( Expression AS VAR )","GraphPatternNotTriples -> .ValuesClause","GraphPatternNotTriplesError -> .OPTIONAL error","GraphPatternNotTriplesError -> .GRAPH error","GraphPatternNotTriplesError -> .SERVICE error","GraphPatternNotTriplesError -> .FILTER error","GraphPatternNotTriplesError -> .BIND error","GraphPatternNotTriplesError -> .VALUES error","GraphPatternNotTriples_repetition0 -> .","GraphPatternNotTriples_repetition0 -> .GraphPatternNotTriples_repetition0 GroupGraphPattern UNION","ValuesClause -> .VALUES InlineData"],"Transitions":{"GroupGraphPatternSubTail":339,"GraphPatternNotTriples":340,"GraphPatternNotTriplesError":341,"GraphPatternNotTriples_repetition0":342,"OPTIONAL":343,"MINUS":344,"GRAPH":345,"SERVICE":346,"FILTER":347,"BIND":348,"ValuesClause":349,"VALUES":350}},{"Id":287,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 WHERE { ConstructQuery_option0 } .SolutionModifier","SolutionModifier -> .SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3","SolutionModifier_option0 -> .","SolutionModifier_option0 -> .GroupClause","GroupClause -> .GROUP BY GroupClause_repetition_plus0","GroupClause -> .GROUP BY error"],"Transitions":{"SolutionModifier":351,"SolutionModifier_option0":139,"GroupClause":140,"GROUP":141}},{"Id":288,"Rules":["PropertyListNotEmpty -> VerbObjectList PropertyListNotEmpty_repetition0 .","PropertyListNotEmpty_repetition0 -> PropertyListNotEmpty_repetition0 .SnadToChapu","SnadToChapu -> .SnadToChapu_repetition_plus0 VerbObjectListError","SnadToChapu_repetition_plus0 -> .;","SnadToChapu_repetition_plus0 -> .SnadToChapu_repetition_plus0 ;"],"Transitions":{"SnadToChapu":352,"SnadToChapu_repetition_plus0":353,";":354}},{"Id":289,"Rules":["VerbObjectList -> Verb ObjectList ."],"Transitions":{}},{"Id":290,"Rules":["ObjectList -> GraphNode .ObjectList_repetition0","ObjectList_repetition0 -> .","ObjectList_repetition0 -> .ObjectList_repetition0 Nechapu"],"Transitions":{"ObjectList_repetition0":355}},{"Id":291,"Rules":["GraphNode -> VarOrTerm ."],"Transitions":{}},{"Id":292,"Rules":["GraphNode -> CURSOR ."],"Transitions":{}},{"Id":293,"Rules":["Literal -> String ^^ iri ."],"Transitions":{}},{"Id":294,"Rules":["SelectClauseItem -> ( Expression AS VAR .)"],"Transitions":{")":356}},{"Id":295,"Rules":["Expression_repetition0 -> Expression_repetition0 ConditionalAndExpression || ."],"Transitions":{}},{"Id":296,"Rules":["ConditionalAndExpression -> ConditionalAndExpression_repetition0 RelationalExpression .","ConditionalAndExpression_repetition0 -> ConditionalAndExpression_repetition0 RelationalExpression .&&"],"Transitions":{"&&":357}},{"Id":297,"Rules":["RelationalExpression -> AdditiveExpression .","RelationalExpression -> AdditiveExpression .RelationalExpression_group0 AdditiveExpression","RelationalExpression -> AdditiveExpression .RelationalExpression_option0 IN ExpressionList","RelationalExpression_group0 -> .=","RelationalExpression_group0 -> .!=","RelationalExpression_group0 -> .<","RelationalExpression_group0 -> .>","RelationalExpression_group0 -> .<=","RelationalExpression_group0 -> .>=","RelationalExpression_option0 -> .","RelationalExpression_option0 -> .NOT"],"Transitions":{"RelationalExpression_group0":358,"RelationalExpression_option0":359,"=":360,"!=":361,"<":362,">":363,"<=":364,">=":365,"NOT":366}},{"Id":298,"Rules":["AdditiveExpression -> MultiplicativeExpression .AdditiveExpression_repetition0","AdditiveExpression_repetition0 -> .","AdditiveExpression_repetition0 -> .AdditiveExpression_repetition0 AdditiveExpressionTail"],"Transitions":{"AdditiveExpression_repetition0":367}},{"Id":299,"Rules":["MultiplicativeExpression -> UnaryExpression .MultiplicativeExpression_repetition0","MultiplicativeExpression_repetition0 -> .","MultiplicativeExpression_repetition0 -> .MultiplicativeExpression_repetition0 MultiplicativeExpressionTail"],"Transitions":{"MultiplicativeExpression_repetition0":368}},{"Id":300,"Rules":["UnaryExpression -> UnaryExpression_option0 .PrimaryExpression","PrimaryExpression -> .BrackettedExpression","PrimaryExpression -> .BuiltInCall","PrimaryExpression -> .iri","PrimaryExpression -> .FunctionCall","PrimaryExpression -> .Literal","PrimaryExpression -> .VAR","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"PrimaryExpression":369,"BrackettedExpression":370,"BuiltInCall":371,"iri":372,"FunctionCall":373,"Literal":374,"VAR":375,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":301,"Rules":["UnaryExpression -> ! .PrimaryExpression","PrimaryExpression -> .BrackettedExpression","PrimaryExpression -> .BuiltInCall","PrimaryExpression -> .iri","PrimaryExpression -> .FunctionCall","PrimaryExpression -> .Literal","PrimaryExpression -> .VAR","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"PrimaryExpression":376,"BrackettedExpression":370,"BuiltInCall":371,"iri":372,"FunctionCall":373,"Literal":374,"VAR":375,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":302,"Rules":["UnaryExpression -> - .PrimaryExpression","PrimaryExpression -> .BrackettedExpression","PrimaryExpression -> .BuiltInCall","PrimaryExpression -> .iri","PrimaryExpression -> .FunctionCall","PrimaryExpression -> .Literal","PrimaryExpression -> .VAR","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"PrimaryExpression":377,"BrackettedExpression":370,"BuiltInCall":371,"iri":372,"FunctionCall":373,"Literal":374,"VAR":375,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":303,"Rules":["UnaryExpression_option0 -> + ."],"Transitions":{}},{"Id":304,"Rules":["InlineData -> ( InlineData_repetition1 ) { InlineData_repetition2 .}","InlineData_repetition2 -> InlineData_repetition2 .DataBlockValueList","DataBlockValueList -> .( DataBlockValueList_repetition0 )"],"Transitions":{"}":378,"DataBlockValueList":379,"(":380}},{"Id":305,"Rules":["IntoGraphClause -> INTO GRAPH iri ."],"Transitions":{}},{"Id":306,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 .{ QuadsNotTriples_option0 } QuadsNotTriples_option1 QuadsNotTriples_option2"],"Transitions":{"{":381}},{"Id":307,"Rules":["QuadsNotTriples_group0 -> VAR ."],"Transitions":{}},{"Id":308,"Rules":["QuadsNotTriples_group0 -> iri ."],"Transitions":{}},{"Id":309,"Rules":["Update1 -> Update1_option5 InsertClause Update1_option6 Update1_repetition0 WHERE GroupGraphPattern ."],"Transitions":{}},{"Id":310,"Rules":["UsingClause -> USING UsingClause_option0 .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"iri":382,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":311,"Rules":["UsingClause_option0 -> NAMED ."],"Transitions":{}},{"Id":312,"Rules":["Update1 -> Update1_option7 DeleteClause Update1_option8 Update1_repetition1 WHERE GroupGraphPattern ."],"Transitions":{}},{"Id":313,"Rules":["SolutionModifier -> SolutionModifier_option0 SolutionModifier_option1 SolutionModifier_option2 SolutionModifier_option3 ."],"Transitions":{}},{"Id":314,"Rules":["SolutionModifier_option3 -> LimitOffsetClauses ."],"Transitions":{}},{"Id":315,"Rules":["LimitOffsetClauses -> LIMIT .INTEGER","LimitOffsetClauses -> LIMIT .INTEGER OFFSET INTEGER","LimitOffsetClauses -> LIMIT .error"],"Transitions":{"INTEGER":383,"error":384}},{"Id":316,"Rules":["LimitOffsetClauses -> OFFSET .INTEGER","LimitOffsetClauses -> OFFSET .INTEGER LIMIT INTEGER","LimitOffsetClauses -> OFFSET .error"],"Transitions":{"INTEGER":385,"error":386}},{"Id":317,"Rules":["OrderClause -> ORDER BY .OrderClause_repetition_plus0","OrderClause -> ORDER BY .error","OrderClause_repetition_plus0 -> .OrderCondition","OrderClause_repetition_plus0 -> .OrderClause_repetition_plus0 OrderCondition","OrderCondition -> .ASC BrackettedExpression","OrderCondition -> .DESC BrackettedExpression","OrderCondition -> .Constraint","OrderCondition -> .VAR","Constraint -> .BrackettedExpression","Constraint -> .BuiltInCall","Constraint -> .FunctionCall","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"OrderClause_repetition_plus0":387,"error":388,"OrderCondition":389,"ASC":390,"DESC":391,"Constraint":392,"VAR":393,"BrackettedExpression":253,"BuiltInCall":254,"FunctionCall":255,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":318,"Rules":["HavingClause_repetition_plus0 -> HavingClause_repetition_plus0 Constraint ."],"Transitions":{}},{"Id":319,"Rules":["BrackettedExpression -> ( Expression .)"],"Transitions":{")":394}},{"Id":320,"Rules":["BuiltInCall -> FUNC_ARITY0 NIL ."],"Transitions":{}},{"Id":321,"Rules":["BuiltInCall -> FUNC_ARITY1 ( .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":395,"Expression_repetition0":185}},{"Id":322,"Rules":["BuiltInCall -> FUNC_ARITY2 ( .Expression , Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":396,"Expression_repetition0":185}},{"Id":323,"Rules":["BuiltInCall -> IF ( .Expression , Expression , Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":397,"Expression_repetition0":185}},{"Id":324,"Rules":["BuiltInCall -> BuiltInCall_group0 ExpressionList ."],"Transitions":{}},{"Id":325,"Rules":["ExpressionList -> NIL ."],"Transitions":{}},{"Id":326,"Rules":["ExpressionList -> ( .ExpressionList_repetition0 Expression )","ExpressionList_repetition0 -> .","ExpressionList_repetition0 -> .ExpressionList_repetition0 Expression ,"],"Transitions":{"ExpressionList_repetition0":398}},{"Id":327,"Rules":["BuiltInCall -> BOUND ( .VAR )"],"Transitions":{"VAR":399}},{"Id":328,"Rules":["BuiltInCall -> BNODE NIL ."],"Transitions":{}},{"Id":329,"Rules":["BuiltInCall -> BNODE ( .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":400,"Expression_repetition0":185}},{"Id":330,"Rules":["BuiltInCall -> BuiltInCall_option0 EXISTS .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":401,"{":143}},{"Id":331,"Rules":["FunctionCall -> iri NIL ."],"Transitions":{}},{"Id":332,"Rules":["FunctionCall -> iri ( .FunctionCall_option0 FunctionCall_repetition0 Expression )","FunctionCall_option0 -> .","FunctionCall_option0 -> .DISTINCT"],"Transitions":{"FunctionCall_option0":402,"DISTINCT":403}},{"Id":333,"Rules":["Aggregate -> COUNT ( .Aggregate_option0 Aggregate_group0 )","Aggregate_option0 -> .","Aggregate_option0 -> .DISTINCT"],"Transitions":{"Aggregate_option0":404,"DISTINCT":405}},{"Id":334,"Rules":["Aggregate -> FUNC_AGGREGATE ( .Aggregate_option1 Expression )","Aggregate_option1 -> .","Aggregate_option1 -> .DISTINCT"],"Transitions":{"Aggregate_option1":406,"DISTINCT":407}},{"Id":335,"Rules":["Aggregate -> GROUP_CONCAT ( .Aggregate_option2 Expression Aggregate_option3 )","Aggregate_option2 -> .","Aggregate_option2 -> .DISTINCT"],"Transitions":{"Aggregate_option2":408,"DISTINCT":409}},{"Id":336,"Rules":["GroupClause_repetition_plus0 -> GroupClause_repetition_plus0 GroupCondition ."],"Transitions":{}},{"Id":337,"Rules":["GroupCondition -> ( Expression .)","GroupCondition -> ( Expression .AS VAR )"],"Transitions":{")":410,"AS":411}},{"Id":338,"Rules":["SubSelect -> SelectClause WhereClause SolutionModifier .SubSelect_option0","SubSelect_option0 -> .","SubSelect_option0 -> .ValuesClause","ValuesClause -> .VALUES InlineData"],"Transitions":{"SubSelect_option0":412,"ValuesClause":413,"VALUES":30}},{"Id":339,"Rules":["GroupGraphPatternSub_repetition0 -> GroupGraphPatternSub_repetition0 GroupGraphPatternSubTail ."],"Transitions":{}},{"Id":340,"Rules":["GroupGraphPatternSubTail -> GraphPatternNotTriples .GroupGraphPatternSubTail_option0 GroupGraphPatternSubTail_option1","GroupGraphPatternSubTail_option0 -> .","GroupGraphPatternSubTail_option0 -> .."],"Transitions":{"GroupGraphPatternSubTail_option0":414,".":415}},{"Id":341,"Rules":["GroupGraphPatternSubTail -> GraphPatternNotTriplesError ."],"Transitions":{}},{"Id":342,"Rules":["GraphPatternNotTriples -> GraphPatternNotTriples_repetition0 .GroupGraphPattern","GraphPatternNotTriples_repetition0 -> GraphPatternNotTriples_repetition0 .GroupGraphPattern UNION","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":416,"{":143}},{"Id":343,"Rules":["GraphPatternNotTriples -> OPTIONAL .GroupGraphPattern","GraphPatternNotTriplesError -> OPTIONAL .error","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":417,"error":418,"{":143}},{"Id":344,"Rules":["GraphPatternNotTriples -> MINUS .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":419,"{":143}},{"Id":345,"Rules":["GraphPatternNotTriples -> GRAPH .GraphPatternNotTriples_group0 GroupGraphPattern","GraphPatternNotTriplesError -> GRAPH .error","GraphPatternNotTriples_group0 -> .VAR","GraphPatternNotTriples_group0 -> .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"GraphPatternNotTriples_group0":420,"error":421,"VAR":422,"iri":423,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":346,"Rules":["GraphPatternNotTriples -> SERVICE .GraphPatternNotTriples_option0 GraphPatternNotTriples_group1 GroupGraphPattern","GraphPatternNotTriplesError -> SERVICE .error","GraphPatternNotTriples_option0 -> .","GraphPatternNotTriples_option0 -> .SILENT"],"Transitions":{"GraphPatternNotTriples_option0":424,"error":425,"SILENT":426}},{"Id":347,"Rules":["GraphPatternNotTriples -> FILTER .Constraint","GraphPatternNotTriplesError -> FILTER .error","Constraint -> .BrackettedExpression","Constraint -> .BuiltInCall","Constraint -> .FunctionCall","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"Constraint":427,"error":428,"BrackettedExpression":253,"BuiltInCall":254,"FunctionCall":255,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":348,"Rules":["GraphPatternNotTriples -> BIND .( Expression AS VAR )","GraphPatternNotTriplesError -> BIND .error"],"Transitions":{"(":429,"error":430}},{"Id":349,"Rules":["GraphPatternNotTriples -> ValuesClause ."],"Transitions":{}},{"Id":350,"Rules":["GraphPatternNotTriplesError -> VALUES .error","ValuesClause -> VALUES .InlineData","InlineData -> .VAR { InlineData_repetition0 }","InlineData -> .( InlineData_repetition1 ) { InlineData_repetition2 }"],"Transitions":{"error":431,"InlineData":70,"VAR":71,"(":72}},{"Id":351,"Rules":["ConstructQuery -> CONSTRUCT ConstructQuery_repetition1 WHERE { ConstructQuery_option0 } SolutionModifier ."],"Transitions":{}},{"Id":352,"Rules":["PropertyListNotEmpty_repetition0 -> PropertyListNotEmpty_repetition0 SnadToChapu ."],"Transitions":{}},{"Id":353,"Rules":["SnadToChapu -> SnadToChapu_repetition_plus0 .VerbObjectListError","SnadToChapu_repetition_plus0 -> SnadToChapu_repetition_plus0 .;","VerbObjectListError -> .VerbObjectList","VerbObjectListError -> .error","VerbObjectList -> .Verb ObjectList","VerbObjectList -> .CURSOR","Verb -> .VAR","Verb -> .iri","Verb -> .a","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"VerbObjectListError":432,";":433,"VerbObjectList":434,"error":435,"Verb":218,"CURSOR":219,"VAR":220,"iri":221,"a":222,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":354,"Rules":["SnadToChapu_repetition_plus0 -> ; ."],"Transitions":{}},{"Id":355,"Rules":["ObjectList -> GraphNode ObjectList_repetition0 .","ObjectList_repetition0 -> ObjectList_repetition0 .Nechapu","Nechapu -> ., GraphNodeError"],"Transitions":{"Nechapu":436,",":437}},{"Id":356,"Rules":["SelectClauseItem -> ( Expression AS VAR ) ."],"Transitions":{}},{"Id":357,"Rules":["ConditionalAndExpression_repetition0 -> ConditionalAndExpression_repetition0 RelationalExpression && ."],"Transitions":{}},{"Id":358,"Rules":["RelationalExpression -> AdditiveExpression RelationalExpression_group0 .AdditiveExpression","AdditiveExpression -> .MultiplicativeExpression AdditiveExpression_repetition0","MultiplicativeExpression -> .UnaryExpression MultiplicativeExpression_repetition0","UnaryExpression -> .UnaryExpression_option0 PrimaryExpression","UnaryExpression -> .! PrimaryExpression","UnaryExpression -> .- PrimaryExpression","UnaryExpression_option0 -> .","UnaryExpression_option0 -> .+"],"Transitions":{"AdditiveExpression":438,"MultiplicativeExpression":298,"UnaryExpression":299,"UnaryExpression_option0":300,"!":301,"-":302,"+":303}},{"Id":359,"Rules":["RelationalExpression -> AdditiveExpression RelationalExpression_option0 .IN ExpressionList"],"Transitions":{"IN":439}},{"Id":360,"Rules":["RelationalExpression_group0 -> = ."],"Transitions":{}},{"Id":361,"Rules":["RelationalExpression_group0 -> != ."],"Transitions":{}},{"Id":362,"Rules":["RelationalExpression_group0 -> < ."],"Transitions":{}},{"Id":363,"Rules":["RelationalExpression_group0 -> > ."],"Transitions":{}},{"Id":364,"Rules":["RelationalExpression_group0 -> <= ."],"Transitions":{}},{"Id":365,"Rules":["RelationalExpression_group0 -> >= ."],"Transitions":{}},{"Id":366,"Rules":["RelationalExpression_option0 -> NOT ."],"Transitions":{}},{"Id":367,"Rules":["AdditiveExpression -> MultiplicativeExpression AdditiveExpression_repetition0 .","AdditiveExpression_repetition0 -> AdditiveExpression_repetition0 .AdditiveExpressionTail","AdditiveExpressionTail -> .AdditiveExpressionTail_group0 MultiplicativeExpression","AdditiveExpressionTail -> .NumericLiteralPositive AdditiveExpressionTail_repetition0","AdditiveExpressionTail -> .NumericLiteralNegative AdditiveExpressionTail_repetition1","AdditiveExpressionTail_group0 -> .+","AdditiveExpressionTail_group0 -> .-","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"AdditiveExpressionTail":440,"AdditiveExpressionTail_group0":441,"NumericLiteralPositive":442,"NumericLiteralNegative":443,"+":444,"-":445,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":368,"Rules":["MultiplicativeExpression -> UnaryExpression MultiplicativeExpression_repetition0 .","MultiplicativeExpression_repetition0 -> MultiplicativeExpression_repetition0 .MultiplicativeExpressionTail","MultiplicativeExpressionTail -> .MultiplicativeExpressionTail_group0 UnaryExpression","MultiplicativeExpressionTail_group0 -> .*","MultiplicativeExpressionTail_group0 -> ./"],"Transitions":{"MultiplicativeExpressionTail":446,"MultiplicativeExpressionTail_group0":447,"*":448,"/":449}},{"Id":369,"Rules":["UnaryExpression -> UnaryExpression_option0 PrimaryExpression ."],"Transitions":{}},{"Id":370,"Rules":["PrimaryExpression -> BrackettedExpression ."],"Transitions":{}},{"Id":371,"Rules":["PrimaryExpression -> BuiltInCall ."],"Transitions":{}},{"Id":372,"Rules":["PrimaryExpression -> iri .","FunctionCall -> iri .NIL","FunctionCall -> iri .( FunctionCall_option0 FunctionCall_repetition0 Expression )"],"Transitions":{"NIL":331,"(":332}},{"Id":373,"Rules":["PrimaryExpression -> FunctionCall ."],"Transitions":{}},{"Id":374,"Rules":["PrimaryExpression -> Literal ."],"Transitions":{}},{"Id":375,"Rules":["PrimaryExpression -> VAR ."],"Transitions":{}},{"Id":376,"Rules":["UnaryExpression -> ! PrimaryExpression ."],"Transitions":{}},{"Id":377,"Rules":["UnaryExpression -> - PrimaryExpression ."],"Transitions":{}},{"Id":378,"Rules":["InlineData -> ( InlineData_repetition1 ) { InlineData_repetition2 } ."],"Transitions":{}},{"Id":379,"Rules":["InlineData_repetition2 -> InlineData_repetition2 DataBlockValueList ."],"Transitions":{}},{"Id":380,"Rules":["DataBlockValueList -> ( .DataBlockValueList_repetition0 )","DataBlockValueList_repetition0 -> .","DataBlockValueList_repetition0 -> .DataBlockValueList_repetition0 DataBlockValue"],"Transitions":{"DataBlockValueList_repetition0":450}},{"Id":381,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 { .QuadsNotTriples_option0 } QuadsNotTriples_option1 QuadsNotTriples_option2","QuadsNotTriples_option0 -> .","QuadsNotTriples_option0 -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"QuadsNotTriples_option0":451,"TriplesTemplate":452,"TriplesTemplate_repetition0":130}},{"Id":382,"Rules":["UsingClause -> USING UsingClause_option0 iri ."],"Transitions":{}},{"Id":383,"Rules":["LimitOffsetClauses -> LIMIT INTEGER .","LimitOffsetClauses -> LIMIT INTEGER .OFFSET INTEGER"],"Transitions":{"OFFSET":453}},{"Id":384,"Rules":["LimitOffsetClauses -> LIMIT error ."],"Transitions":{}},{"Id":385,"Rules":["LimitOffsetClauses -> OFFSET INTEGER .","LimitOffsetClauses -> OFFSET INTEGER .LIMIT INTEGER"],"Transitions":{"LIMIT":454}},{"Id":386,"Rules":["LimitOffsetClauses -> OFFSET error ."],"Transitions":{}},{"Id":387,"Rules":["OrderClause -> ORDER BY OrderClause_repetition_plus0 .","OrderClause_repetition_plus0 -> OrderClause_repetition_plus0 .OrderCondition","OrderCondition -> .ASC BrackettedExpression","OrderCondition -> .DESC BrackettedExpression","OrderCondition -> .Constraint","OrderCondition -> .VAR","Constraint -> .BrackettedExpression","Constraint -> .BuiltInCall","Constraint -> .FunctionCall","BrackettedExpression -> .( Expression )","BuiltInCall -> .Aggregate","BuiltInCall -> .FUNC_ARITY0 NIL","BuiltInCall -> .FUNC_ARITY1 ( Expression )","BuiltInCall -> .FUNC_ARITY2 ( Expression , Expression )","BuiltInCall -> .IF ( Expression , Expression , Expression )","BuiltInCall -> .BuiltInCall_group0 ExpressionList","BuiltInCall -> .BOUND ( VAR )","BuiltInCall -> .BNODE NIL","BuiltInCall -> .BNODE ( Expression )","BuiltInCall -> .BuiltInCall_option0 EXISTS GroupGraphPattern","FunctionCall -> .iri NIL","FunctionCall -> .iri ( FunctionCall_option0 FunctionCall_repetition0 Expression )","Aggregate -> .COUNT ( Aggregate_option0 Aggregate_group0 )","Aggregate -> .FUNC_AGGREGATE ( Aggregate_option1 Expression )","Aggregate -> .GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 )","BuiltInCall_group0 -> .CONCAT","BuiltInCall_group0 -> .COALESCE","BuiltInCall_group0 -> .SUBSTR","BuiltInCall_group0 -> .REGEX","BuiltInCall_group0 -> .REPLACE","BuiltInCall_option0 -> .","BuiltInCall_option0 -> .NOT","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"OrderCondition":455,"ASC":390,"DESC":391,"Constraint":392,"VAR":393,"BrackettedExpression":253,"BuiltInCall":254,"FunctionCall":255,"(":256,"Aggregate":257,"FUNC_ARITY0":258,"FUNC_ARITY1":259,"FUNC_ARITY2":260,"IF":261,"BuiltInCall_group0":262,"BOUND":263,"BNODE":264,"BuiltInCall_option0":265,"iri":266,"COUNT":267,"FUNC_AGGREGATE":268,"GROUP_CONCAT":269,"CONCAT":270,"COALESCE":271,"SUBSTR":272,"REGEX":273,"REPLACE":274,"NOT":275,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":388,"Rules":["OrderClause -> ORDER BY error ."],"Transitions":{}},{"Id":389,"Rules":["OrderClause_repetition_plus0 -> OrderCondition ."],"Transitions":{}},{"Id":390,"Rules":["OrderCondition -> ASC .BrackettedExpression","BrackettedExpression -> .( Expression )"],"Transitions":{"BrackettedExpression":456,"(":256}},{"Id":391,"Rules":["OrderCondition -> DESC .BrackettedExpression","BrackettedExpression -> .( Expression )"],"Transitions":{"BrackettedExpression":457,"(":256}},{"Id":392,"Rules":["OrderCondition -> Constraint ."],"Transitions":{}},{"Id":393,"Rules":["OrderCondition -> VAR ."],"Transitions":{}},{"Id":394,"Rules":["BrackettedExpression -> ( Expression ) ."],"Transitions":{}},{"Id":395,"Rules":["BuiltInCall -> FUNC_ARITY1 ( Expression .)"],"Transitions":{")":458}},{"Id":396,"Rules":["BuiltInCall -> FUNC_ARITY2 ( Expression ., Expression )"],"Transitions":{",":459}},{"Id":397,"Rules":["BuiltInCall -> IF ( Expression ., Expression , Expression )"],"Transitions":{",":460}},{"Id":398,"Rules":["ExpressionList -> ( ExpressionList_repetition0 .Expression )","ExpressionList_repetition0 -> ExpressionList_repetition0 .Expression ,","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":461,"Expression_repetition0":185}},{"Id":399,"Rules":["BuiltInCall -> BOUND ( VAR .)"],"Transitions":{")":462}},{"Id":400,"Rules":["BuiltInCall -> BNODE ( Expression .)"],"Transitions":{")":463}},{"Id":401,"Rules":["BuiltInCall -> BuiltInCall_option0 EXISTS GroupGraphPattern ."],"Transitions":{}},{"Id":402,"Rules":["FunctionCall -> iri ( FunctionCall_option0 .FunctionCall_repetition0 Expression )","FunctionCall_repetition0 -> .","FunctionCall_repetition0 -> .FunctionCall_repetition0 Expression ,"],"Transitions":{"FunctionCall_repetition0":464}},{"Id":403,"Rules":["FunctionCall_option0 -> DISTINCT ."],"Transitions":{}},{"Id":404,"Rules":["Aggregate -> COUNT ( Aggregate_option0 .Aggregate_group0 )","Aggregate_group0 -> .*","Aggregate_group0 -> .Expression","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Aggregate_group0":465,"*":466,"Expression":467,"Expression_repetition0":185}},{"Id":405,"Rules":["Aggregate_option0 -> DISTINCT ."],"Transitions":{}},{"Id":406,"Rules":["Aggregate -> FUNC_AGGREGATE ( Aggregate_option1 .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":468,"Expression_repetition0":185}},{"Id":407,"Rules":["Aggregate_option1 -> DISTINCT ."],"Transitions":{}},{"Id":408,"Rules":["Aggregate -> GROUP_CONCAT ( Aggregate_option2 .Expression Aggregate_option3 )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":469,"Expression_repetition0":185}},{"Id":409,"Rules":["Aggregate_option2 -> DISTINCT ."],"Transitions":{}},{"Id":410,"Rules":["GroupCondition -> ( Expression ) ."],"Transitions":{}},{"Id":411,"Rules":["GroupCondition -> ( Expression AS .VAR )"],"Transitions":{"VAR":470}},{"Id":412,"Rules":["SubSelect -> SelectClause WhereClause SolutionModifier SubSelect_option0 ."],"Transitions":{}},{"Id":413,"Rules":["SubSelect_option0 -> ValuesClause ."],"Transitions":{}},{"Id":414,"Rules":["GroupGraphPatternSubTail -> GraphPatternNotTriples GroupGraphPatternSubTail_option0 .GroupGraphPatternSubTail_option1","GroupGraphPatternSubTail_option1 -> .","GroupGraphPatternSubTail_option1 -> .TriplesBlock","TriplesBlock -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"GroupGraphPatternSubTail_option1":471,"TriplesBlock":472,"TriplesTemplate":209,"TriplesTemplate_repetition0":130}},{"Id":415,"Rules":["GroupGraphPatternSubTail_option0 -> . ."],"Transitions":{}},{"Id":416,"Rules":["GraphPatternNotTriples -> GraphPatternNotTriples_repetition0 GroupGraphPattern .","GraphPatternNotTriples_repetition0 -> GraphPatternNotTriples_repetition0 GroupGraphPattern .UNION"],"Transitions":{"UNION":473}},{"Id":417,"Rules":["GraphPatternNotTriples -> OPTIONAL GroupGraphPattern ."],"Transitions":{}},{"Id":418,"Rules":["GraphPatternNotTriplesError -> OPTIONAL error ."],"Transitions":{}},{"Id":419,"Rules":["GraphPatternNotTriples -> MINUS GroupGraphPattern ."],"Transitions":{}},{"Id":420,"Rules":["GraphPatternNotTriples -> GRAPH GraphPatternNotTriples_group0 .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":474,"{":143}},{"Id":421,"Rules":["GraphPatternNotTriplesError -> GRAPH error ."],"Transitions":{}},{"Id":422,"Rules":["GraphPatternNotTriples_group0 -> VAR ."],"Transitions":{}},{"Id":423,"Rules":["GraphPatternNotTriples_group0 -> iri ."],"Transitions":{}},{"Id":424,"Rules":["GraphPatternNotTriples -> SERVICE GraphPatternNotTriples_option0 .GraphPatternNotTriples_group1 GroupGraphPattern","GraphPatternNotTriples_group1 -> .VAR","GraphPatternNotTriples_group1 -> .iri","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS"],"Transitions":{"GraphPatternNotTriples_group1":475,"VAR":476,"iri":477,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64}},{"Id":425,"Rules":["GraphPatternNotTriplesError -> SERVICE error ."],"Transitions":{}},{"Id":426,"Rules":["GraphPatternNotTriples_option0 -> SILENT ."],"Transitions":{}},{"Id":427,"Rules":["GraphPatternNotTriples -> FILTER Constraint ."],"Transitions":{}},{"Id":428,"Rules":["GraphPatternNotTriplesError -> FILTER error ."],"Transitions":{}},{"Id":429,"Rules":["GraphPatternNotTriples -> BIND ( .Expression AS VAR )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":478,"Expression_repetition0":185}},{"Id":430,"Rules":["GraphPatternNotTriplesError -> BIND error ."],"Transitions":{}},{"Id":431,"Rules":["GraphPatternNotTriplesError -> VALUES error ."],"Transitions":{}},{"Id":432,"Rules":["SnadToChapu -> SnadToChapu_repetition_plus0 VerbObjectListError ."],"Transitions":{}},{"Id":433,"Rules":["SnadToChapu_repetition_plus0 -> SnadToChapu_repetition_plus0 ; ."],"Transitions":{}},{"Id":434,"Rules":["VerbObjectListError -> VerbObjectList ."],"Transitions":{}},{"Id":435,"Rules":["VerbObjectListError -> error ."],"Transitions":{}},{"Id":436,"Rules":["ObjectList_repetition0 -> ObjectList_repetition0 Nechapu ."],"Transitions":{}},{"Id":437,"Rules":["Nechapu -> , .GraphNodeError","GraphNodeError -> .GraphNode","GraphNodeError -> .error","GraphNode -> .VarOrTerm","GraphNode -> .CURSOR","VarOrTerm -> .VAR","VarOrTerm -> .iri","VarOrTerm -> .Literal","VarOrTerm -> .BLANK_NODE_LABEL","VarOrTerm -> .ANON","VarOrTerm -> .NIL","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{"GraphNodeError":479,"GraphNode":480,"error":481,"VarOrTerm":291,"CURSOR":292,"VAR":155,"iri":156,"Literal":157,"BLANK_NODE_LABEL":158,"ANON":159,"NIL":160,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":438,"Rules":["RelationalExpression -> AdditiveExpression RelationalExpression_group0 AdditiveExpression ."],"Transitions":{}},{"Id":439,"Rules":["RelationalExpression -> AdditiveExpression RelationalExpression_option0 IN .ExpressionList","ExpressionList -> .NIL","ExpressionList -> .( ExpressionList_repetition0 Expression )"],"Transitions":{"ExpressionList":482,"NIL":325,"(":326}},{"Id":440,"Rules":["AdditiveExpression_repetition0 -> AdditiveExpression_repetition0 AdditiveExpressionTail ."],"Transitions":{}},{"Id":441,"Rules":["AdditiveExpressionTail -> AdditiveExpressionTail_group0 .MultiplicativeExpression","MultiplicativeExpression -> .UnaryExpression MultiplicativeExpression_repetition0","UnaryExpression -> .UnaryExpression_option0 PrimaryExpression","UnaryExpression -> .! PrimaryExpression","UnaryExpression -> .- PrimaryExpression","UnaryExpression_option0 -> .","UnaryExpression_option0 -> .+"],"Transitions":{"MultiplicativeExpression":483,"UnaryExpression":299,"UnaryExpression_option0":300,"!":301,"-":302,"+":303}},{"Id":442,"Rules":["AdditiveExpressionTail -> NumericLiteralPositive .AdditiveExpressionTail_repetition0","AdditiveExpressionTail_repetition0 -> .","AdditiveExpressionTail_repetition0 -> .AdditiveExpressionTail_repetition0 MultiplicativeExpressionTail"],"Transitions":{"AdditiveExpressionTail_repetition0":484}},{"Id":443,"Rules":["AdditiveExpressionTail -> NumericLiteralNegative .AdditiveExpressionTail_repetition1","AdditiveExpressionTail_repetition1 -> .","AdditiveExpressionTail_repetition1 -> .AdditiveExpressionTail_repetition1 MultiplicativeExpressionTail"],"Transitions":{"AdditiveExpressionTail_repetition1":485}},{"Id":444,"Rules":["AdditiveExpressionTail_group0 -> + ."],"Transitions":{}},{"Id":445,"Rules":["AdditiveExpressionTail_group0 -> - ."],"Transitions":{}},{"Id":446,"Rules":["MultiplicativeExpression_repetition0 -> MultiplicativeExpression_repetition0 MultiplicativeExpressionTail ."],"Transitions":{}},{"Id":447,"Rules":["MultiplicativeExpressionTail -> MultiplicativeExpressionTail_group0 .UnaryExpression","UnaryExpression -> .UnaryExpression_option0 PrimaryExpression","UnaryExpression -> .! PrimaryExpression","UnaryExpression -> .- PrimaryExpression","UnaryExpression_option0 -> .","UnaryExpression_option0 -> .+"],"Transitions":{"UnaryExpression":486,"UnaryExpression_option0":300,"!":301,"-":302,"+":303}},{"Id":448,"Rules":["MultiplicativeExpressionTail_group0 -> * ."],"Transitions":{}},{"Id":449,"Rules":["MultiplicativeExpressionTail_group0 -> / ."],"Transitions":{}},{"Id":450,"Rules":["DataBlockValueList -> ( DataBlockValueList_repetition0 .)","DataBlockValueList_repetition0 -> DataBlockValueList_repetition0 .DataBlockValue","DataBlockValue -> .iri","DataBlockValue -> .Literal","DataBlockValue -> .UNDEF","iri -> .IRIREF","iri -> .PNAME_LN","iri -> .PNAME_NS","Literal -> .String","Literal -> .String LANGTAG","Literal -> .String ^^ iri","Literal -> .INTEGER","Literal -> .DECIMAL","Literal -> .DOUBLE","Literal -> .NumericLiteralPositive","Literal -> .NumericLiteralNegative","Literal -> .true","Literal -> .false","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2","NumericLiteralPositive -> .INTEGER_POSITIVE","NumericLiteralPositive -> .DECIMAL_POSITIVE","NumericLiteralPositive -> .DOUBLE_POSITIVE","NumericLiteralNegative -> .INTEGER_NEGATIVE","NumericLiteralNegative -> .DECIMAL_NEGATIVE","NumericLiteralNegative -> .DOUBLE_NEGATIVE"],"Transitions":{")":487,"DataBlockValue":488,"iri":231,"Literal":232,"UNDEF":233,"IRIREF":62,"PNAME_LN":63,"PNAME_NS":64,"String":161,"INTEGER":162,"DECIMAL":163,"DOUBLE":164,"NumericLiteralPositive":165,"NumericLiteralNegative":166,"true":167,"false":168,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172,"INTEGER_POSITIVE":173,"DECIMAL_POSITIVE":174,"DOUBLE_POSITIVE":175,"INTEGER_NEGATIVE":176,"DECIMAL_NEGATIVE":177,"DOUBLE_NEGATIVE":178}},{"Id":451,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 { QuadsNotTriples_option0 .} QuadsNotTriples_option1 QuadsNotTriples_option2"],"Transitions":{"}":489}},{"Id":452,"Rules":["QuadsNotTriples_option0 -> TriplesTemplate ."],"Transitions":{}},{"Id":453,"Rules":["LimitOffsetClauses -> LIMIT INTEGER OFFSET .INTEGER"],"Transitions":{"INTEGER":490}},{"Id":454,"Rules":["LimitOffsetClauses -> OFFSET INTEGER LIMIT .INTEGER"],"Transitions":{"INTEGER":491}},{"Id":455,"Rules":["OrderClause_repetition_plus0 -> OrderClause_repetition_plus0 OrderCondition ."],"Transitions":{}},{"Id":456,"Rules":["OrderCondition -> ASC BrackettedExpression ."],"Transitions":{}},{"Id":457,"Rules":["OrderCondition -> DESC BrackettedExpression ."],"Transitions":{}},{"Id":458,"Rules":["BuiltInCall -> FUNC_ARITY1 ( Expression ) ."],"Transitions":{}},{"Id":459,"Rules":["BuiltInCall -> FUNC_ARITY2 ( Expression , .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":492,"Expression_repetition0":185}},{"Id":460,"Rules":["BuiltInCall -> IF ( Expression , .Expression , Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":493,"Expression_repetition0":185}},{"Id":461,"Rules":["ExpressionList -> ( ExpressionList_repetition0 Expression .)","ExpressionList_repetition0 -> ExpressionList_repetition0 Expression .,"],"Transitions":{")":494,",":495}},{"Id":462,"Rules":["BuiltInCall -> BOUND ( VAR ) ."],"Transitions":{}},{"Id":463,"Rules":["BuiltInCall -> BNODE ( Expression ) ."],"Transitions":{}},{"Id":464,"Rules":["FunctionCall -> iri ( FunctionCall_option0 FunctionCall_repetition0 .Expression )","FunctionCall_repetition0 -> FunctionCall_repetition0 .Expression ,","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":496,"Expression_repetition0":185}},{"Id":465,"Rules":["Aggregate -> COUNT ( Aggregate_option0 Aggregate_group0 .)"],"Transitions":{")":497}},{"Id":466,"Rules":["Aggregate_group0 -> * ."],"Transitions":{}},{"Id":467,"Rules":["Aggregate_group0 -> Expression ."],"Transitions":{}},{"Id":468,"Rules":["Aggregate -> FUNC_AGGREGATE ( Aggregate_option1 Expression .)"],"Transitions":{")":498}},{"Id":469,"Rules":["Aggregate -> GROUP_CONCAT ( Aggregate_option2 Expression .Aggregate_option3 )","Aggregate_option3 -> .","Aggregate_option3 -> .GroupConcatSeparator","GroupConcatSeparator -> .; SEPARATOR = String"],"Transitions":{"Aggregate_option3":499,"GroupConcatSeparator":500,";":501}},{"Id":470,"Rules":["GroupCondition -> ( Expression AS VAR .)"],"Transitions":{")":502}},{"Id":471,"Rules":["GroupGraphPatternSubTail -> GraphPatternNotTriples GroupGraphPatternSubTail_option0 GroupGraphPatternSubTail_option1 ."],"Transitions":{}},{"Id":472,"Rules":["GroupGraphPatternSubTail_option1 -> TriplesBlock ."],"Transitions":{}},{"Id":473,"Rules":["GraphPatternNotTriples_repetition0 -> GraphPatternNotTriples_repetition0 GroupGraphPattern UNION ."],"Transitions":{}},{"Id":474,"Rules":["GraphPatternNotTriples -> GRAPH GraphPatternNotTriples_group0 GroupGraphPattern ."],"Transitions":{}},{"Id":475,"Rules":["GraphPatternNotTriples -> SERVICE GraphPatternNotTriples_option0 GraphPatternNotTriples_group1 .GroupGraphPattern","GroupGraphPattern -> .{ SubSelect }","GroupGraphPattern -> .{ GroupGraphPatternSub }"],"Transitions":{"GroupGraphPattern":503,"{":143}},{"Id":476,"Rules":["GraphPatternNotTriples_group1 -> VAR ."],"Transitions":{}},{"Id":477,"Rules":["GraphPatternNotTriples_group1 -> iri ."],"Transitions":{}},{"Id":478,"Rules":["GraphPatternNotTriples -> BIND ( Expression .AS VAR )"],"Transitions":{"AS":504}},{"Id":479,"Rules":["Nechapu -> , GraphNodeError ."],"Transitions":{}},{"Id":480,"Rules":["GraphNodeError -> GraphNode ."],"Transitions":{}},{"Id":481,"Rules":["GraphNodeError -> error ."],"Transitions":{}},{"Id":482,"Rules":["RelationalExpression -> AdditiveExpression RelationalExpression_option0 IN ExpressionList ."],"Transitions":{}},{"Id":483,"Rules":["AdditiveExpressionTail -> AdditiveExpressionTail_group0 MultiplicativeExpression ."],"Transitions":{}},{"Id":484,"Rules":["AdditiveExpressionTail -> NumericLiteralPositive AdditiveExpressionTail_repetition0 .","AdditiveExpressionTail_repetition0 -> AdditiveExpressionTail_repetition0 .MultiplicativeExpressionTail","MultiplicativeExpressionTail -> .MultiplicativeExpressionTail_group0 UnaryExpression","MultiplicativeExpressionTail_group0 -> .*","MultiplicativeExpressionTail_group0 -> ./"],"Transitions":{"MultiplicativeExpressionTail":505,"MultiplicativeExpressionTail_group0":447,"*":448,"/":449}},{"Id":485,"Rules":["AdditiveExpressionTail -> NumericLiteralNegative AdditiveExpressionTail_repetition1 .","AdditiveExpressionTail_repetition1 -> AdditiveExpressionTail_repetition1 .MultiplicativeExpressionTail","MultiplicativeExpressionTail -> .MultiplicativeExpressionTail_group0 UnaryExpression","MultiplicativeExpressionTail_group0 -> .*","MultiplicativeExpressionTail_group0 -> ./"],"Transitions":{"MultiplicativeExpressionTail":506,"MultiplicativeExpressionTail_group0":447,"*":448,"/":449}},{"Id":486,"Rules":["MultiplicativeExpressionTail -> MultiplicativeExpressionTail_group0 UnaryExpression ."],"Transitions":{}},{"Id":487,"Rules":["DataBlockValueList -> ( DataBlockValueList_repetition0 ) ."],"Transitions":{}},{"Id":488,"Rules":["DataBlockValueList_repetition0 -> DataBlockValueList_repetition0 DataBlockValue ."],"Transitions":{}},{"Id":489,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 { QuadsNotTriples_option0 } .QuadsNotTriples_option1 QuadsNotTriples_option2","QuadsNotTriples_option1 -> .","QuadsNotTriples_option1 -> .."],"Transitions":{"QuadsNotTriples_option1":507,".":508}},{"Id":490,"Rules":["LimitOffsetClauses -> LIMIT INTEGER OFFSET INTEGER ."],"Transitions":{}},{"Id":491,"Rules":["LimitOffsetClauses -> OFFSET INTEGER LIMIT INTEGER ."],"Transitions":{}},{"Id":492,"Rules":["BuiltInCall -> FUNC_ARITY2 ( Expression , Expression .)"],"Transitions":{")":509}},{"Id":493,"Rules":["BuiltInCall -> IF ( Expression , Expression ., Expression )"],"Transitions":{",":510}},{"Id":494,"Rules":["ExpressionList -> ( ExpressionList_repetition0 Expression ) ."],"Transitions":{}},{"Id":495,"Rules":["ExpressionList_repetition0 -> ExpressionList_repetition0 Expression , ."],"Transitions":{}},{"Id":496,"Rules":["FunctionCall -> iri ( FunctionCall_option0 FunctionCall_repetition0 Expression .)","FunctionCall_repetition0 -> FunctionCall_repetition0 Expression .,"],"Transitions":{")":511,",":512}},{"Id":497,"Rules":["Aggregate -> COUNT ( Aggregate_option0 Aggregate_group0 ) ."],"Transitions":{}},{"Id":498,"Rules":["Aggregate -> FUNC_AGGREGATE ( Aggregate_option1 Expression ) ."],"Transitions":{}},{"Id":499,"Rules":["Aggregate -> GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 .)"],"Transitions":{")":513}},{"Id":500,"Rules":["Aggregate_option3 -> GroupConcatSeparator ."],"Transitions":{}},{"Id":501,"Rules":["GroupConcatSeparator -> ; .SEPARATOR = String"],"Transitions":{"SEPARATOR":514}},{"Id":502,"Rules":["GroupCondition -> ( Expression AS VAR ) ."],"Transitions":{}},{"Id":503,"Rules":["GraphPatternNotTriples -> SERVICE GraphPatternNotTriples_option0 GraphPatternNotTriples_group1 GroupGraphPattern ."],"Transitions":{}},{"Id":504,"Rules":["GraphPatternNotTriples -> BIND ( Expression AS .VAR )"],"Transitions":{"VAR":515}},{"Id":505,"Rules":["AdditiveExpressionTail_repetition0 -> AdditiveExpressionTail_repetition0 MultiplicativeExpressionTail ."],"Transitions":{}},{"Id":506,"Rules":["AdditiveExpressionTail_repetition1 -> AdditiveExpressionTail_repetition1 MultiplicativeExpressionTail ."],"Transitions":{}},{"Id":507,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 { QuadsNotTriples_option0 } QuadsNotTriples_option1 .QuadsNotTriples_option2","QuadsNotTriples_option2 -> .","QuadsNotTriples_option2 -> .TriplesTemplate","TriplesTemplate -> .TriplesTemplate_repetition0 TriplesSameSubjectError TriplesTemplate_option0","TriplesTemplate_repetition0 -> .","TriplesTemplate_repetition0 -> .TriplesTemplate_repetition0 TriplesSameSubjectError ."],"Transitions":{"QuadsNotTriples_option2":516,"TriplesTemplate":517,"TriplesTemplate_repetition0":130}},{"Id":508,"Rules":["QuadsNotTriples_option1 -> . ."],"Transitions":{}},{"Id":509,"Rules":["BuiltInCall -> FUNC_ARITY2 ( Expression , Expression ) ."],"Transitions":{}},{"Id":510,"Rules":["BuiltInCall -> IF ( Expression , Expression , .Expression )","Expression -> .Expression_repetition0 ConditionalAndExpression","Expression_repetition0 -> .","Expression_repetition0 -> .Expression_repetition0 ConditionalAndExpression ||"],"Transitions":{"Expression":518,"Expression_repetition0":185}},{"Id":511,"Rules":["FunctionCall -> iri ( FunctionCall_option0 FunctionCall_repetition0 Expression ) ."],"Transitions":{}},{"Id":512,"Rules":["FunctionCall_repetition0 -> FunctionCall_repetition0 Expression , ."],"Transitions":{}},{"Id":513,"Rules":["Aggregate -> GROUP_CONCAT ( Aggregate_option2 Expression Aggregate_option3 ) ."],"Transitions":{}},{"Id":514,"Rules":["GroupConcatSeparator -> ; SEPARATOR .= String"],"Transitions":{"=":519}},{"Id":515,"Rules":["GraphPatternNotTriples -> BIND ( Expression AS VAR .)"],"Transitions":{")":520}},{"Id":516,"Rules":["QuadsNotTriples -> GRAPH QuadsNotTriples_group0 { QuadsNotTriples_option0 } QuadsNotTriples_option1 QuadsNotTriples_option2 ."],"Transitions":{}},{"Id":517,"Rules":["QuadsNotTriples_option2 -> TriplesTemplate ."],"Transitions":{}},{"Id":518,"Rules":["BuiltInCall -> IF ( Expression , Expression , Expression .)"],"Transitions":{")":521}},{"Id":519,"Rules":["GroupConcatSeparator -> ; SEPARATOR = .String","String -> .STRING_LITERAL1","String -> .STRING_LITERAL2","String -> .STRING_LITERAL_LONG1","String -> .STRING_LITERAL_LONG2"],"Transitions":{"String":522,"STRING_LITERAL1":169,"STRING_LITERAL2":170,"STRING_LITERAL_LONG1":171,"STRING_LITERAL_LONG2":172}},{"Id":520,"Rules":["GraphPatternNotTriples -> BIND ( Expression AS VAR ) ."],"Transitions":{}},{"Id":521,"Rules":["BuiltInCall -> IF ( Expression , Expression , Expression ) ."],"Transitions":{}},{"Id":522,"Rules":["GroupConcatSeparator -> ; SEPARATOR = String ."],"Transitions":{}}],performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var result = { query:$$[$0-1], recoverableErrors: parserErrors, haltingError:null }
        return result;
    
break;
case 2:

      if (Parser.base)
        $$[$0].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      this.$ = $$[$0];
    
break;
case 3:

     logParserError('PrefixOrBase', getStart(_$[$0-2]), getStart(_$[$0-1])); 
      if (Parser.base)
        $$[$0].base = Parser.base;
      Parser.base = base = basePath = baseRoot = '';
      $$[$0].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      this.$ = $$[$0];
    
break;
case 4:
this.$ = extend($$[$0-1], $$[$0], { type: 'query' });
break;
case 5:

      Parser.base = resolveIRI($$[$0])
      base = basePath = baseRoot = '';
    
break;
case 6:

      logParserError('BaseAfter', getEnd(_$[$0-1]), getStart(_$[$0]));
      Parser.base = resolveIRI($$[$0-1])
      base = basePath = baseRoot = '';
    
break;
case 7:

        logParserError('Base', getEnd(_$[$0-1]), getStart(_$[$0]));
        base = basePath = baseRoot = '';
    
break;
case 8:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 9:

        logParserError('Prefix', getEnd(_$[$0-1]), getStart(_$[$0])); 
        if (!Parser.prefixes) Parser.prefixes = {};
    
break;
case 10:

      logParserError('PrefixAfter', getEnd(_$[$0-1]), getStart(_$[$0])); 
      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-2] = $$[$0-2].substr(0, $$[$0-2].length - 1);
      $$[$0-1] = resolveIRI($$[$0-1]);
      Parser.prefixes[$$[$0-2]] = $$[$0-1];
    
break;
case 11:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 12:
this.$ = extend({ type: 'query' }, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 13:
this.$ = extend({ queryType: 'SELECT', variables: $$[$0] === '*' ? ['*'] : $$[$0] }, $$[$0-1] && ($$[$0-2] = lowercase($$[$0-1]), $$[$0-1] = {}, $$[$0-1][$$[$0-2]] = true, $$[$0-1]));
break;
case 14: case 113: case 122: case 147:
this.$ = toVar($$[$0]);
break;
case 15: case 28:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 16:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 17:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 18:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? ['*'] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 19:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 20: case 63:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 21:
this.$ = { where: $$[$0].patterns };
break;
case 22:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 23:
this.$ = { group: $$[$0] };
break;
case 24:
this.$ = { group:"error" };
break;
case 25: case 26: case 34: case 36:
this.$ = expression($$[$0]);
break;
case 27:
this.$ = expression($$[$0-1]);
break;
case 29: case 37:
this.$ = expression(toVar($$[$0]));
break;
case 30:
this.$ = { having: $$[$0] };
break;
case 31:
this.$ = { having: "error" };
break;
case 32:
this.$ = { order: $$[$0] };
break;
case 33:
this.$ = { order: "error" };
break;
case 35:
this.$ = expression($$[$0], { descending: true });
break;
case 38:
this.$ = { limit:  toInt($$[$0]) };
break;
case 39:
this.$ = { offset: toInt($$[$0]) };
break;
case 40:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 41:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 42:
this.$ = { limit: "error"  };
break;
case 43:
this.$ = { offset: "error" };
break;
case 44:
this.$ = { type: 'values', values: $$[$0] };
break;
case 45:

      $$[$0-3] = toVar($$[$0-3]);
      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 46:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject[$$[$0-4][i]] = values[i];
        return valuesObject;
      });
    
break;
case 49:
this.$ = undefined;
break;
case 50: case 73: case 100: case 148:
this.$ = $$[$0-1];
break;
case 51:
this.$ = { type: 'update', updates: appendTo($$[$0-1], $$[$0]) };
break;
case 52:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 53:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 54:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 55:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: $$[$0-1] };
break;
case 56:
this.$ = { updateType: 'insert',      insert: $$[$0] };
break;
case 57:
this.$ = { updateType: 'delete',      delete: $$[$0] };
break;
case 58:
this.$ = { updateType: 'deletewhere', delete: $$[$0] };
break;
case 59:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 60:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 61: case 62: case 65: case 108: case 117: case 139:
this.$ = $$[$0];
break;
case 64:
this.$ = { graph: $$[$0] };
break;
case 66:
this.$ = { type: 'graph', default: true };
break;
case 67: case 68:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 69:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 70:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 71:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 72:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 74:

      // Simplify the groups by merging adjacent BGPs
      if ($$[$0-1].length > 1) {
        var groups = [], currentBgp;
        for (var i = 0, group; group=$$[$0-1][i]; i++) {
          switch (group.type) {
            // Add a BGP's triples to the current BGP
            case 'bgp':
              if (group.triples.length) {
                if (!currentBgp)
                  appendTo(groups, currentBgp = group);
                else
                  appendAllTo(currentBgp.triples, group.triples);
              }
              break;
            // All other groups break up a BGP
            default:
              // Only add the group if its pattern is non-empty
              if (!group.patterns || group.patterns.length > 0) {
                appendTo(groups, group);
                currentBgp = null;
              }
          }
        }
        $$[$0-1] = groups;
      }
      this.$ = { type: 'group', patterns: $$[$0-1] }
    
break;
case 75:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 76:

        if($$[$0]) {
            if($$[$0-2] == null){
                this.$ = [$$[$0]];
            }
            else {
                this.$ = [$$[$0-2], $$[$0]];
            }            
        }
        else {
            this.$ = $$[$0-2];
        }
    
break;
case 77:
this.$ = null;
break;
case 79:

        logParserError('OPTIONAL error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        this.$ = null;
    
break;
case 80:

        logParserError('GRAPH error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        this.$ = null;
    
break;
case 81:

        logParserError('SERVICE error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        this.$ = null;
    
break;
case 82:

        logParserError('filter error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        throw new("asdfsfd")
        this.$ = null;
    
break;
case 83:

        logParserError('BIND error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        this.$ = null;
    
break;
case 84:

        logParserError('VALUES error', getEnd(_$[$0-1]), getEnd(_$[$0]));
        this.$ = null;
    
break;
case 85:
this.$ = $$[$0-1].length ? { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) } : degroupSingle($$[$0]);
break;
case 86:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 87:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 88:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 89:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 90:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 91:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 96:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 97:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 98: case 188: case 200: case 212: case 214: case 224: case 228: case 248: case 250: case 252: case 254: case 256: case 277: case 283: case 294: case 304: case 310: case 316: case 326: case 328: case 332: case 338: case 342: case 344: case 346: case 356: case 360: case 362: case 364:
this.$ = [];
break;
case 99:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 101:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 103:
 
        this.$ = [];
        logParserError("TriplesSameSubject", getEnd(_$[$0-1]), getEnd(_$[$0]));
    
break;
case 104:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 105:
this.$ = [{subject: "?cursor", predicate: "?predicate", object: "?object"}];
break;
case 107:
this.$ = unionAll($$[$0-1], $$[$0]);;
break;
case 110:
 
        this.$ = [];
        logParserError("VerbObjectList", getEnd(_$[$0-1]), getEnd(_$[$0]));
    
break;
case 111:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 112:
this.$ = [{predicate: "?cursor", object: "?object"}];
break;
case 115:
this.$ = RDF_TYPE;
break;
case 116:
this.$ = ([$$[$0-1]].concat($$[$0])).filter(function(n) { return n != null; });
break;
case 119:
 
        this.$ = null;
        logParserError("GraphNode", getEnd(_$[$0-1]), getEnd(_$[$0]));
    
break;
case 120:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 121:
this.$ = { entity: '?cursor', triples: [] };
break;
case 126:
this.$ = blank();
break;
case 127:
this.$ = RDF_NIL;
break;
case 128:
this.$ = $$[$0-1].length ? operation('||', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 129:
this.$ = $$[$0-1].length ? operation('&&', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 131:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 132:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 133: case 137:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 134: case 138:
this.$ = [$$[$0-1], $$[$0]];
break;
case 135:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 136:
this.$ = ['-', createOperationTree($$[$0-1].replace('-', ''), $$[$0])];
break;
case 140:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 141:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 150:
this.$ = operation(lowercase($$[$0-1]));
break;
case 151:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 152:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 153:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 154:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 155:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 156:
this.$ = operation($$[$0-1], []);
break;
case 157:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 158:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 159: case 160:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 161:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 162:
this.$ = $$[$0].substr(1, $$[$0].length - 2);
break;
case 164:
this.$ = $$[$0-1] + lowercase($$[$0]);
break;
case 165:
this.$ = $$[$0-2] + '^^' + $$[$0];
break;
case 166: case 180:
this.$ = createLiteral($$[$0], XSD_INTEGER);
break;
case 167: case 181:
this.$ = createLiteral($$[$0], XSD_DECIMAL);
break;
case 168: case 182:
this.$ = createLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 171:
this.$ = XSD_TRUE;
break;
case 172:
this.$ = XSD_FALSE;
break;
case 173: case 174:
this.$ = unescapeString($$[$0], 1);
break;
case 175: case 176:
this.$ = unescapeString($$[$0], 3);
break;
case 177:
this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 178:
this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 179:
this.$ = createLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 183:
this.$ = resolveIRI($$[$0]);
break;
case 184:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 185:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 189: case 201: case 209: case 213: case 215: case 221: case 225: case 229: case 243: case 245: case 247: case 249: case 251: case 253: case 255: case 278: case 284: case 295: case 311: case 339: case 341: case 343: case 357: case 361: case 363: case 365:
$$[$0-1].push($$[$0]);
break;
case 208: case 220: case 242: case 244: case 246: case 340:
this.$ = [$$[$0]];
break;
case 257: case 305: case 317: case 327: case 329: case 333: case 345: case 347:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,188],{3:1,4:2,6:3,2:[1,4]}),{1:[3]},{5:[1,5]},o($V1,$V2,{7:6,257:7,9:8,94:9,12:10,15:11,10:12,95:13,18:16,34:17,43:18,48:19,19:20,13:[1,14],16:[1,15],25:$V3,35:$V4,44:$V5,49:$V6}),o($V1,$V2,{10:12,95:13,18:16,34:17,43:18,48:19,19:20,8:25,9:26,94:27,25:$V3,35:$V4,44:$V5,49:$V6}),{1:[2,1]},{5:[2,2]},o($V0,[2,189]),{5:[2,190]},{5:[2,191]},o($V0,[2,186]),o($V0,[2,187]),{5:[2,198],11:28,83:29,84:$V7},{96:31,97:[1,32],100:33,103:34,107:[1,35],110:[1,36],112:[1,37],113:[1,38],114:39,118:40,122:[2,279],123:[2,273],127:46,128:[1,47],267:[1,41],268:[1,42],269:[1,43],270:[1,44],271:[1,45]},{2:[1,49],14:[1,48]},{2:[1,51],17:[1,50]},o($V8,[2,194]),o($V8,[2,195]),o($V8,[2,196]),o($V8,[2,197]),o($V9,[2,200],{20:52}),o($Va,[2,214],{36:53,38:54,40:[1,55]}),{14:$Vb,17:$Vc,29:$Vd,45:56,54:61,256:$Ve,262:[1,58],263:59,264:57},o($V9,[2,228],{50:65}),o($Vf,[2,206],{26:66,258:67,259:[1,68],260:[1,69]}),{5:[2,3]},{5:[2,192]},{5:[2,193]},{5:[2,4]},{5:[2,199]},{29:$Vg,30:$Vh,85:70},{5:[2,51],236:[1,73]},o($Vi,[2,258],{98:74,266:[1,75]}),o($Vj,[2,264],{101:76,266:[1,77]}),o($Vk,[2,269],{104:78,266:[1,79]}),{108:80,109:[2,271],266:[1,81]},{40:$Vl,111:82},{40:$Vl,111:84},{40:$Vl,111:85},{115:86,123:$Vm},{119:88,122:$Vn},o($Vo,[2,262]),o($Vo,[2,263]),o($Vp,[2,266]),o($Vp,[2,267]),o($Vp,[2,268]),{122:[2,280],123:[2,274]},{14:$Vb,17:$Vc,54:90,256:$Ve},o($V0,[2,5],{2:[1,91]}),o($V0,[2,7]),{14:[1,92]},o($V0,[2,9]),{21:93,39:$Vq,40:$Vr,51:94,52:$Vs,55:95},o($V9,[2,212],{37:98}),{39:[1,99],51:100,52:$Vs},o($Vt,[2,332],{168:101,169:102,170:103,42:[2,330]}),o($Vu,[2,224],{46:104}),o($Vu,[2,222],{54:61,263:105,14:$Vb,17:$Vc,29:$Vd,256:$Ve}),o($Vu,[2,223]),o($Vv,[2,220]),o($Vv,[2,218]),o($Vv,[2,219]),o($Vw,[2,183]),o($Vw,[2,184]),o($Vw,[2,185]),{21:106,39:$Vq,40:$Vr,51:107,52:$Vs,55:95},{27:108,28:111,29:$Vx,30:$Vy,261:109,262:[1,110]},o($Vf,[2,207]),o($Vf,[2,204]),o($Vf,[2,205]),o($Vz,[2,44]),{40:[1,114]},o($VA,[2,250],{87:115}),o($V1,[2,257]),{14:$Vb,17:$Vc,54:116,256:$Ve},o($Vi,[2,259]),{102:117,109:[1,118],131:[1,120],133:119,265:[1,121],272:[1,122]},o($Vj,[2,265]),o($Vi,$VB,{105:123,132:125,109:$VC,131:$VD}),o($Vk,[2,270]),{109:[1,127]},{109:[2,272]},o($VE,[2,56]),o($Vt,$VF,{134:128,141:129,142:130,42:$VG,109:$VG}),o($VE,[2,57]),o($VE,[2,58]),o($VH,[2,275],{116:131,119:132,122:$Vn}),{40:$Vl,111:133},o($VH,[2,281],{120:134,115:135,123:$Vm}),{40:$Vl,111:136},o([122,123],[2,64]),o($V0,[2,6]),o($V0,[2,8],{2:[1,137]}),o($VI,$VJ,{22:138,57:139,61:140,62:$VK}),o($V9,[2,201]),{40:$VL,56:142},o($Vi,[2,230],{53:144,265:[1,145]}),{40:[2,233]},{21:146,39:$Vq,40:$Vr,51:147,52:$Vs,55:95},{40:[1,148]},o($Va,[2,215]),{42:[1,149]},{42:[2,331]},{2:$VM,14:$Vb,17:$Vc,29:$VN,54:156,81:$VO,90:157,143:150,163:$VP,172:151,173:153,175:$VQ,191:$VR,192:$VS,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},o($V51,[2,226],{55:95,47:179,51:180,21:181,39:$Vq,40:$Vr,52:$Vs}),o($Vv,[2,221]),o($VI,$VJ,{57:139,61:140,22:182,62:$VK}),o($V9,[2,229]),o($V9,[2,13]),o($V9,[2,210],{28:183,29:$Vx,30:$Vy}),o($V9,[2,211]),o($V61,[2,208]),o($V61,[2,14]),o($V71,$V81,{31:184,193:185}),o($V91,[2,248],{86:186}),{29:[1,188],33:[1,187]},o($VE,[2,260],{99:189,129:190,130:[1,191]}),o($VE,[2,53]),{14:$Vb,17:$Vc,54:192,256:$Ve},o($VE,[2,69]),o($VE,[2,289]),o($VE,[2,290]),o($VE,[2,291]),{106:[1,193]},o($Va1,[2,66]),{14:$Vb,17:$Vc,54:194,256:$Ve},o($Vi,[2,288]),{14:$Vb,17:$Vc,54:195,256:$Ve},o($Vb1,[2,294],{135:196}),o($Vb1,[2,293]),{2:$VM,14:$Vb,17:$Vc,29:$VN,54:156,81:$VO,90:157,143:197,163:$VP,172:151,173:153,175:$VQ,191:$VR,192:$VS,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},o($VH,[2,277],{117:198}),o($VH,[2,276]),o([39,122,125],[2,62]),o($VH,[2,283],{121:199}),o($VH,[2,282]),o([39,123,125],[2,61]),o($V0,[2,10]),o($V8,[2,11]),o($Vc1,[2,236],{58:200,68:201,69:[1,202]}),o($VI,[2,235]),{63:[1,203]},o([5,42,62,69,72,80,82,84],[2,21]),o($Vt,$VF,{142:130,23:204,145:205,19:206,146:207,153:208,141:209,25:$V3,40:$Vd1,42:$Vd1,84:$Vd1,109:$Vd1,154:$Vd1,155:$Vd1,156:$Vd1,157:$Vd1,159:$Vd1}),{14:$Vb,17:$Vc,54:210,256:$Ve},o($Vi,[2,231]),o($VI,$VJ,{57:139,61:140,22:211,62:$VK}),o($V9,[2,213]),o($Vt,$VF,{142:130,41:212,141:213,42:[2,216]}),o($V9,[2,100]),{42:[2,334],171:214,273:[1,215]},o($Ve1,[2,102]),o($Ve1,[2,103]),{14:$Vb,17:$Vc,29:$Vf1,54:221,174:216,175:$Vg1,178:217,183:218,185:$Vh1,256:$Ve},o($Ve1,[2,105]),o($Vi1,[2,122]),o($Vi1,[2,123]),o($Vi1,[2,124]),o($Vi1,[2,125]),o($Vi1,[2,126]),o($Vi1,[2,127]),o($Vj1,[2,163],{240:[1,223],241:[1,224]}),o($Vj1,[2,166]),o($Vj1,[2,167]),o($Vj1,[2,168]),o($Vj1,[2,169]),o($Vj1,[2,170]),o($Vj1,[2,171]),o($Vj1,[2,172]),o($Vk1,[2,173]),o($Vk1,[2,174]),o($Vk1,[2,175]),o($Vk1,[2,176]),o($Vj1,[2,177]),o($Vj1,[2,178]),o($Vj1,[2,179]),o($Vj1,[2,180]),o($Vj1,[2,181]),o($Vj1,[2,182]),o($VI,$VJ,{57:139,61:140,22:225,62:$VK}),o($Vu,[2,225]),o($V51,[2,227]),o($V8,[2,19]),o($V61,[2,209]),{32:[1,226]},o($V71,[2,346],{194:227,195:228}),{14:$Vb,17:$Vc,42:[1,229],54:231,81:$VO,89:230,90:232,91:$Vl1,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},{40:[1,234]},o($VA,[2,251]),o($VE,[2,52]),o($VE,[2,261]),{109:[1,235]},o($VE,[2,68]),o($Vi,$VB,{132:125,105:236,109:$VC,131:$VD}),o($Va1,[2,67]),o($VE,[2,55]),{42:[1,237],109:[1,239],136:238},o($Vm1,[2,306],{144:240,273:[1,241]}),{39:[1,242],124:243,125:$Vn1},{39:[1,245],124:246,125:$Vn1},o($Vo1,[2,238],{59:247,71:248,72:[1,249]}),o($Vc1,[2,237]),{2:[1,251],14:$Vb,17:$Vc,30:$Vp1,54:266,66:254,67:255,70:250,76:253,78:252,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},{2:[1,277],14:$Vb,17:$Vc,29:$VG1,30:$VH1,54:266,64:276,65:278,66:279,67:280,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},{42:[1,283]},{42:[1,284]},{21:285,39:$Vq,40:$Vr,55:95},o($Vm1,[2,310],{147:286}),o($Vm1,[2,309]),o($Vm1,[2,78]),o($Vu,[2,20]),o($V8,[2,16]),{42:[1,287]},{42:[2,217]},{42:[2,101]},o($Vt,[2,333],{42:[2,335]}),o($Ve1,[2,104]),o($VI1,[2,338],{179:288}),{14:$Vb,17:$Vc,29:$VN,54:156,81:$VO,90:157,163:$VP,173:291,175:$VJ1,184:289,186:290,191:$VR,192:$VS,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},o($VI1,[2,112]),o($VK1,[2,113]),o($VK1,[2,114]),o($VK1,[2,115]),o($Vj1,[2,164]),{14:$Vb,17:$Vc,54:293,256:$Ve},o($V8,[2,18]),{29:[1,294]},o([32,33,189,236],[2,128],{275:[1,295]}),o($VL1,$VM1,{196:296,197:297,201:298,209:299,213:300,215:$VN1,216:$VO1,283:$VP1}),o($Vz,[2,45]),o($V91,[2,249]),o($VQ1,[2,47]),o($VQ1,[2,48]),o($VQ1,[2,49]),o($VR1,[2,252],{88:304}),{14:$Vb,17:$Vc,54:305,256:$Ve},o($VE,[2,54]),o([5,39,122,123,125,236],[2,70]),o($Vb1,[2,295]),{14:$Vb,17:$Vc,29:[1,307],54:308,137:306,256:$Ve},o($Vm1,[2,72]),o($Vt,[2,305],{40:$VS1,42:$VS1,84:$VS1,109:$VS1,154:$VS1,155:$VS1,156:$VS1,157:$VS1,159:$VS1}),{40:$VL,56:309},o($VH,[2,278]),o($Vi,[2,285],{126:310,265:[1,311]}),{40:$VL,56:312},o($VH,[2,284]),o($VT1,[2,240],{60:313,79:314,80:[1,315],82:[1,316]}),o($Vo1,[2,239]),{63:[1,317]},o($Vc1,[2,30],{76:253,66:254,67:255,217:257,222:262,225:265,54:266,78:318,14:$Vb,17:$Vc,30:$Vp1,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,223:$Vu1,224:$Vv1,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1}),o($Vc1,[2,31]),o($VU1,[2,244]),o($VV1,[2,93]),o($VV1,[2,94]),o($VV1,[2,95]),o($V71,$V81,{193:185,31:319}),o($VW1,[2,149]),{163:[1,320]},{30:[1,321]},{30:[1,322]},{30:[1,323]},{30:$VX1,163:$VY1,166:324},{30:[1,327]},{30:[1,329],163:[1,328]},{226:[1,330]},{30:$VZ1,163:$V_1},{30:[1,333]},{30:[1,334]},{30:[1,335]},o($V$1,[2,370]),o($V$1,[2,371]),o($V$1,[2,372]),o($V$1,[2,373]),o($V$1,[2,374]),{226:[2,376]},o($VI,[2,23],{217:257,222:262,225:265,54:266,66:279,67:280,65:336,14:$Vb,17:$Vc,29:$VG1,30:$VH1,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,223:$Vu1,224:$Vv1,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1}),o($VI,[2,24]),o($V02,[2,242]),o($V02,[2,25]),o($V02,[2,26]),o($V71,$V81,{193:185,31:337}),o($V02,[2,29]),o($V12,[2,73]),o($V12,[2,74]),o($VI,$VJ,{57:139,61:140,22:338,62:$VK}),{40:[2,316],42:[2,75],83:349,84:[1,350],109:[1,345],148:339,149:340,152:341,154:[1,343],155:[1,346],156:[1,347],157:[1,348],158:342,159:[1,344]},o($VI,$VJ,{57:139,61:140,22:351,62:$VK}),o($Ve1,[2,107],{180:352,181:353,236:[1,354]}),o($VI1,[2,111]),o($V22,[2,342],{187:355}),o($V22,[2,120]),o($V22,[2,121]),o($Vj1,[2,165]),{33:[1,356]},o($V71,[2,345]),o([32,33,189,236,275],[2,129],{276:[1,357]}),o($V32,[2,130],{198:358,199:359,200:[2,354],238:[1,360],277:[1,361],278:[1,362],279:[1,363],280:[1,364],281:[1,365],282:[1,366]}),o($V42,[2,356],{202:367}),o($V52,[2,364],{210:368}),{14:$Vb,17:$Vc,29:$V62,30:$Vp1,54:372,66:371,67:373,76:370,81:$VO,90:374,205:165,207:166,214:369,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},{14:$Vb,17:$Vc,29:$V62,30:$Vp1,54:372,66:371,67:373,76:370,81:$VO,90:374,205:165,207:166,214:376,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},{14:$Vb,17:$Vc,29:$V62,30:$Vp1,54:372,66:371,67:373,76:370,81:$VO,90:374,205:165,207:166,214:377,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},o($VL1,[2,369]),{30:[1,380],42:[1,378],92:379},o($VE,[2,65]),{40:[1,381]},{40:[2,296]},{40:[2,297]},o($VE,[2,59]),{14:$Vb,17:$Vc,54:382,256:$Ve},o($Vi,[2,286]),o($VE,[2,60]),o($VT1,[2,22]),o($VT1,[2,241]),{2:[1,384],81:[1,383]},{2:[1,386],81:[1,385]},{2:[1,388],14:$Vb,17:$Vc,29:$V72,30:$Vp1,54:266,66:254,67:255,73:387,74:389,75:$V82,76:253,77:$V92,78:392,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},o($VU1,[2,245]),{33:[1,394]},o($VW1,[2,150]),o($V71,$V81,{193:185,31:395}),o($V71,$V81,{193:185,31:396}),o($V71,$V81,{193:185,31:397}),o($VW1,[2,154]),o($VW1,[2,98]),o($V71,[2,328],{167:398}),{29:[1,399]},o($VW1,[2,156]),o($V71,$V81,{193:185,31:400}),{40:$VL,56:401},o($VW1,[2,96]),o($V71,[2,324],{164:402,259:[1,403]}),o($Va2,[2,377],{228:404,259:[1,405]}),o($V71,[2,381],{231:406,259:[1,407]}),o($V71,[2,383],{233:408,259:[1,409]}),o($V02,[2,243]),{32:[1,411],33:[1,410]},{24:412,42:[2,202],83:413,84:$V7},o($Vm1,[2,311]),o($Vb2,[2,312],{150:414,273:[1,415]}),o($Vm1,[2,77]),{40:$VL,56:416},{2:[1,418],40:$VL,56:417},{40:$VL,56:419},{2:[1,421],14:$Vb,17:$Vc,29:[1,422],54:423,160:420,256:$Ve},o($Vc2,[2,320],{161:424,2:[1,425],266:[1,426]}),{2:[1,428],14:$Vb,17:$Vc,30:$Vp1,54:266,66:254,67:255,76:253,78:427,217:257,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,222:262,223:$Vu1,224:$Vv1,225:265,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1},{2:[1,430],30:[1,429]},o($Vd2,[2,92]),{2:[1,431],29:$Vg,30:$Vh,85:70},o($V8,[2,17]),o($VI1,[2,339]),{2:[1,435],14:$Vb,17:$Vc,29:$Vf1,54:221,175:$Vg1,178:434,182:432,183:218,185:$Vh1,236:[1,433],256:$Ve},o($Ve2,[2,340]),o($VI1,[2,116],{188:436,189:[1,437]}),o($V61,[2,15]),o($V71,[2,347]),o($VL1,$VM1,{201:298,209:299,213:300,197:438,215:$VN1,216:$VO1,283:$VP1}),{200:[1,439]},o($V71,[2,348]),o($V71,[2,349]),o($V71,[2,350]),o($V71,[2,351]),o($V71,[2,352]),o($V71,[2,353]),{200:[2,355]},o([32,33,189,200,236,238,275,276,277,278,279,280,281,282],[2,133],{203:440,204:441,205:442,207:443,216:[1,445],250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,283:[1,444]}),o($V42,[2,137],{211:446,212:447,262:$Vf2,284:$Vg2}),o($V52,[2,139]),o($V52,[2,142]),o($V52,[2,143]),o($V52,[2,144],{30:$VZ1,163:$V_1}),o($V52,[2,145]),o($V52,[2,146]),o($V52,[2,147]),o($V52,[2,140]),o($V52,[2,141]),o($Vz,[2,46]),o($VR1,[2,253]),o($Vh2,[2,254],{93:450}),o($Vt,$VF,{142:130,138:451,141:452,42:[2,298]}),o($VH,[2,63]),o($VT1,[2,38],{82:[1,453]}),o($VT1,[2,42]),o($VT1,[2,39],{80:[1,454]}),o($VT1,[2,43]),o($Vo1,[2,32],{76:253,66:254,67:255,217:257,222:262,225:265,54:266,78:392,74:455,14:$Vb,17:$Vc,29:$V72,30:$Vp1,75:$V82,77:$V92,218:$Vq1,219:$Vr1,220:$Vs1,221:$Vt1,223:$Vu1,224:$Vv1,226:$Vw1,227:$Vx1,230:$Vy1,232:$Vz1,256:$Ve,282:$VA1,285:$VB1,286:$VC1,287:$VD1,288:$VE1,289:$VF1}),o($Vo1,[2,33]),o($Vi2,[2,246]),{30:$Vp1,76:456},{30:$Vp1,76:457},o($Vi2,[2,36]),o($Vi2,[2,37]),o([2,5,14,17,29,30,32,33,40,42,72,75,77,80,81,82,84,109,154,155,156,157,159,163,175,189,191,192,200,216,218,219,220,221,223,224,226,227,230,232,236,238,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,262,273,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],[2,148]),{33:[1,458]},{189:[1,459]},{189:[1,460]},o($V71,$V81,{193:185,31:461}),{33:[1,462]},{33:[1,463]},o($VW1,[2,158]),o($V71,[2,326],{165:464}),o($V71,[2,325]),o($V71,$V81,{193:185,229:465,31:467,262:[1,466]}),o($Va2,[2,378]),o($V71,$V81,{193:185,31:468}),o($V71,[2,382]),o($V71,$V81,{193:185,31:469}),o($V71,[2,384]),o($V02,[2,27]),{29:[1,470]},{42:[2,12]},{42:[2,203]},o($Vt,$VF,{142:130,141:209,151:471,153:472,40:$Vj2,42:$Vj2,84:$Vj2,109:$Vj2,154:$Vj2,155:$Vj2,156:$Vj2,157:$Vj2,159:$Vj2}),o($Vb2,[2,313]),o($Vd2,[2,85],{274:[1,473]}),o($Vd2,[2,86]),o($Vm1,[2,79]),o($Vd2,[2,87]),{40:$VL,56:474},o($Vm1,[2,80]),{40:[2,318]},{40:[2,319]},{14:$Vb,17:$Vc,29:[1,476],54:477,162:475,256:$Ve},o($Vm1,[2,81]),o($Vc2,[2,321]),o($Vd2,[2,90]),o($Vm1,[2,82]),o($V71,$V81,{193:185,31:478}),o($Vm1,[2,83]),o($Vm1,[2,84]),o($VI1,[2,108]),o($Ve2,[2,341]),o($VI1,[2,109]),o($VI1,[2,110]),o($V22,[2,343]),{2:[1,481],14:$Vb,17:$Vc,29:$VN,54:156,81:$VO,90:157,163:$VP,173:291,175:$VJ1,186:480,190:479,191:$VR,192:$VS,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},o($V32,[2,131]),{30:$VX1,163:$VY1,166:482},o($V42,[2,357]),o($VL1,$VM1,{209:299,213:300,201:483,215:$VN1,216:$VO1,283:$VP1}),o($V52,[2,360],{206:484}),o($V52,[2,362],{208:485}),o($V71,[2,358]),o($V71,[2,359]),o($V52,[2,365]),o($VL1,$VM1,{213:300,209:486,215:$VN1,216:$VO1,283:$VP1}),o($V71,[2,366]),o($V71,[2,367]),{14:$Vb,17:$Vc,33:[1,487],54:231,81:$VO,89:488,90:232,91:$Vl1,205:165,207:166,239:161,242:$VT,243:$VU,244:$VV,245:$VW,246:$VX,247:$VY,248:$VZ,249:$V_,250:$V$,251:$V01,252:$V11,253:$V21,254:$V31,255:$V41,256:$Ve},{42:[1,489]},{42:[2,299]},{81:[1,490]},{81:[1,491]},o($Vi2,[2,247]),o($Vi2,[2,34]),o($Vi2,[2,35]),o($VW1,[2,151]),o($V71,$V81,{193:185,31:492}),o($V71,$V81,{193:185,31:493}),{33:[1,494],189:[1,495]},o($VW1,[2,155]),o($VW1,[2,157]),o($V71,$V81,{193:185,31:496}),{33:[1,497]},{33:[2,379]},{33:[2,380]},{33:[1,498]},{33:[2,385],234:499,235:500,236:[1,501]},{33:[1,502]},o($Vm1,[2,76]),o($Vm1,[2,315]),{40:[2,317]},o($Vd2,[2,88]),{40:$VL,56:503},{40:[2,322]},{40:[2,323]},{32:[1,504]},o($V22,[2,117]),o($V22,[2,118]),o($V22,[2,119]),o($V32,[2,132]),o($V42,[2,134]),o($V42,[2,135],{212:447,211:505,262:$Vf2,284:$Vg2}),o($V42,[2,136],{212:447,211:506,262:$Vf2,284:$Vg2}),o($V52,[2,138]),o($VR1,[2,50]),o($Vh2,[2,255]),o($Vk2,[2,300],{139:507,273:[1,508]}),o($VT1,[2,40]),o($VT1,[2,41]),{33:[1,509]},{189:[1,510]},o($VW1,[2,99]),o($V71,[2,329]),{33:[1,511],189:[1,512]},o($VW1,[2,159]),o($VW1,[2,160]),{33:[1,513]},{33:[2,386]},{237:[1,514]},o($V02,[2,28]),o($Vd2,[2,89]),{29:[1,515]},o($V52,[2,361]),o($V52,[2,363]),o($Vt,$VF,{142:130,140:516,141:517,42:$Vl2,109:$Vl2}),o($Vk2,[2,301]),o($VW1,[2,152]),o($V71,$V81,{193:185,31:518}),o($VW1,[2,97]),o($V71,[2,327]),o($VW1,[2,161]),{238:[1,519]},{33:[1,520]},o($Vb1,[2,71]),o($Vb1,[2,303]),{33:[1,521]},{239:522,246:$VX,247:$VY,248:$VZ,249:$V_},o($Vd2,[2,91]),o($VW1,[2,153]),{33:[2,162]}],
defaultActions: {5:[2,1],6:[2,2],8:[2,190],9:[2,191],25:[2,3],26:[2,192],27:[2,193],28:[2,4],29:[2,199],81:[2,272],97:[2,233],102:[2,331],213:[2,217],214:[2,101],275:[2,376],307:[2,296],308:[2,297],366:[2,355],412:[2,12],413:[2,203],422:[2,318],423:[2,319],452:[2,299],466:[2,379],467:[2,380],473:[2,317],476:[2,322],477:[2,323],500:[2,386],522:[2,162]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str, hash);
    } else {
        this.trace(str, hash);
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    function getNonTerminalFromCode(targetCode, symbols) {
        for (var key in symbols) {
            if (!symbols.hasOwnProperty(key)) {
                continue;
            }
            if (symbols[key] === targetCode) {
                return key;
            }
        }
    }
    this.parserDebugger = [];
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                function isTerminalReallyExpected(terminal, productions, table, stack) {
                    var state = stack[stack.length-1];
                    var action = table[state][terminal];
                    
                    if(action === undefined) {
                        // Not defined action
                        return false;
                    }

                    var actionType = action[0];
                    if(actionType == 1) {
                        // Shift
                        return true;
                    }

                    if(actionType == 2)
                    {
                        // Reduce
                        var production = productions[action[1]];
                        var len = production[1];
                        if (len) {
                            stack = stack.slice(0,-1*len*2);
                        }
                        stack.push(production[0]);    // push nonterminal (reduce)
                        var newState = table[stack[stack.length-2]][stack[stack.length-1]];
                        stack.push(newState);
                        return isTerminalReallyExpected(terminal, productions, table, stack);
                    }

                    throw new Error("Unknown state of action.");
                }

                expected = [];
                var reallyExpected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                        if(isTerminalReallyExpected(p, this.productions_, table, stack.slice(0))) {
                            reallyExpected.push(this.terminals_[p]);
                        }
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    reallyExpected: reallyExpected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);
            var debuggableSymbols = this.symbols_; 
            var popStackPart = stack.slice(stack.length - 2 * error_rule_depth, stack.length);
            var popStackPartNamed = popStackPart
                 .map(function(stackSymbol,index){
                    return getStateDescription(stackSymbol, (index % 2) == 1);
                 });
            var vpopStackPart = vstack.slice(vstack.length - error_rule_depth, vstack.length);
            this.parserDebugger.push({
                    action: 'popStack',
                    symbol: String(this.getSymbolName(symbol)) + ' ' + lexer.yytext,
                    preErrorSymbol: this.getSymbolName(preErrorSymbol),
                    depth: error_rule_depth,
                    state: state,
                    error: errStr,
                    stack: popStackPart,
                    stackNamed: popStackPartNamed,
                    vstack: vpopStackPart,
                    allstack: stack.map(function(stackSymbol){
                             return getNonTerminalFromCode(stackSymbol, debuggableSymbols);
                            })
                });           

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                
                var itemSets = this.itemSets;
                var symbolsThis = this.symbols_;
                function getStateDescription(state, isEven) {
                    if(isEven)
                    {
                        return itemSets.filter(function(x){return x.Id==state;})[0];
                    }
                    else
                    {
                        return getNonTerminalFromCode(state, symbolsThis);
                    }
                }

                this.parserDebugger.push({
                    action: 'shift',
                    symbol: this.getSymbolName(symbol),
                    preErrorSymbol: this.getSymbolName(preErrorSymbol),
                    text: lexer.yytext,
                    state: state,
                    terminal:this.terminals_[symbol],
                    stack: JSON.parse(JSON.stringify(vstack)),
                    allstack: stack.map(function(stackSymbol, index){
                             return getStateDescription(stackSymbol, (index % 2) == 0);
                            })
                });
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                var itemSets = this.itemSets;
                var symbolsThis = this.symbols_;
                function getStateDescription(state, isEven) {
                    if(isEven)
                    {
                        return itemSets.filter(function(x){return x.Id==state;})[0];
                    }
                    else
                    {
                        return getNonTerminalFromCode(state, symbolsThis);
                    }
                }
                
                
                var prereduceValue = vstack.slice(vstack.length - len, vstack.length);
                var prereduceLoc = lstack.slice(lstack.length - len, lstack.length);
                var debuggableProductions = [];
                for (var debugIdx = len - 1; debugIdx >= 0; debugIdx--) {
                    var debuggableProduction = getNonTerminalFromCode(
                        stack[stack.length - ((debugIdx + 1) * 2)],
                        this.symbols_);
                    debuggableProductions.push(debuggableProduction);
                }
                // find the current nonterminal name (- nolan)
                var currentNonterminalCode = this.productions_[action[1]][0];
                var currentNonterminal = getNonTerminalFromCode(
                    currentNonterminalCode, this.symbols_);

                var debuggableSymbols = this.symbols_; 
                this.parserDebugger.push({
                    action: 'reduce',
                    symbol: this.getSymbolName(symbol),
                    preErrorSymbol: this.getSymbolName(preErrorSymbol),
                    state: state,
                    nonterminal: currentNonterminal,
                    prereduce: prereduceValue,
                    prereduceLoc: prereduceLoc,
                    productions: debuggableProductions,
                    stack: JSON.parse(JSON.stringify(vstack)),
                    result: yyval.$ == undefined? undefined : JSON.parse(JSON.stringify(yyval.$)),
                    allstack: stack.map(function(stackSymbol, index){
                             return getStateDescription(stackSymbol, (index % 2) == 0);
                            }),
                    allstackNumbers: JSON.parse(JSON.stringify(stack))
                });

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                this.parserDebugger.push({
                    action: 'accept'
                });
                return true;
        }

    }

    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN;

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    // Return absolute IRIs unmodified
    if (/^[a-z]+:/.test(iri))
      return iri;
    if (!Parser.base)
      throw new Error('Cannot resolve relative IRI ' + iri + ' because no base IRI was set.');
    if (!base) {
      base = Parser.base;
      basePath = base.replace(/[^\/:]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    }
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }
  var parserErrors = []; 

  Parser.resetParserErrors = function(){
      parserErrors = []; 
  };
  
  function getStart(tokenRange) {
    return {
            line: tokenRange.first_line,
            column: tokenRange.first_column
        };
  }

  function getEnd(tokenRange){
    return {
            line: tokenRange.last_line,
            column: tokenRange.last_column
        };
  }

  function logParserError(type, startPosition, endPosition){
      var parserError = {
            type: type,
            message: 'something is wrong ' + type,
            options: {
                startPosition:startPosition,
                endPosition:endPosition
            },
            range:{
                first_line: startPosition.line,
                first_column: startPosition.column,
                last_line: endPosition.line,
                last_column: endPosition.column,
            } 
      };
      parserErrors.push(parserError);
  }

  function createError(type, value, yyloc, stack) {
        var result = { 
            errorType:type,
             value:value
            }; 
        return result;
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 175
break;
case 2:return 'UNKNOWN'
break;
case 3:return 13
break;
case 4:return 16
break;
case 5:return 25
break;
case 6:return 259
break;
case 7:return 260
break;
case 8:return 30
break;
case 9:return 32
break;
case 10:return 33
break;
case 11:return 262
break;
case 12:return 35
break;
case 13:return 39
break;
case 14:return 40
break;
case 15:return 42
break;
case 16:return 44
break;
case 17:return 49
break;
case 18:return 52
break;
case 19:return 265
break;
case 20:return 62
break;
case 21:return 63
break;
case 22:return 69
break;
case 23:return 72
break;
case 24:return 75
break;
case 25:return 77
break;
case 26:return 80
break;
case 27:return 82
break;
case 28:return 84
break;
case 29:return 236
break;
case 30:return 97
break;
case 31:return 266
break;
case 32:return 130
break;
case 33:return 267
break;
case 34:return 268
break;
case 35:return 107
break;
case 36:return 269
break;
case 37:return 106
break;
case 38:return 270
break;
case 39:return 271
break;
case 40:return 110
break;
case 41:return 112
break;
case 42:return 113
break;
case 43:return 128
break;
case 44:return 122
break;
case 45:return 123
break;
case 46:return 125
break;
case 47:return 131
break;
case 48:return 109
break;
case 49:return 272
break;
case 50:return 273
break;
case 51:return 154
break;
case 52:return 155
break;
case 53:return 157
break;
case 54:return 91
break;
case 55:return 159
break;
case 56:return 274
break;
case 57:return 156
break;
case 58:return 189
break;
case 59:return 185
break;
case 60:return '|'
break;
case 61:return 284
break;
case 62:return '^'
break;
case 63:return '?'
break;
case 64:return 283
break;
case 65:return 215
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 275
break;
case 69:return 276
break;
case 70:return 238
break;
case 71:return 277
break;
case 72:return 278
break;
case 73:return 279
break;
case 74:return 280
break;
case 75:return 281
break;
case 76:return 200
break;
case 77:return 282
break;
case 78:return 216
break;
case 79:return 223
break;
case 80:return 224
break;
case 81:return 218
break;
case 82:return 219
break;
case 83:return 220
break;
case 84:return 285
break;
case 85:return 286
break;
case 86:return 221
break;
case 87:return 288
break;
case 88:return 287
break;
case 89:return 289
break;
case 90:return 226
break;
case 91:return 227
break;
case 92:return 230
break;
case 93:return 232
break;
case 94:return 237
break;
case 95:return 241
break;
case 96:return 244
break;
case 97:return 245
break;
case 98:return 14
break;
case 99:return 17
break;
case 100:return 256
break;
case 101:return 191
break;
case 102:return 29
break;
case 103:return 240
break;
case 104:return 81
break;
case 105:return 242
break;
case 106:return 243
break;
case 107:return 250
break;
case 108:return 251
break;
case 109:return 252
break;
case 110:return 253
break;
case 111:return 254
break;
case 112:return 255
break;
case 113:return 'EXPONENT'
break;
case 114:return 246
break;
case 115:return 247
break;
case 116:return 248
break;
case 117:return 249
break;
case 118:return 163
break;
case 119:return 192
break;
case 120:return 5
break;
case 121:return 'INVALID'
break;
case 122:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:CURSOR)/i,/^(?:UNKNOWN)/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT\s+DATA)/i,/^(?:DELETE\s+DATA)/i,/^(?:DELETE\s+WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STRUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true)/i,/^(?:false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:([\?\$]((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof _dereq_ !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = _dereq_('fs').readFileSync(_dereq_('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && _dereq_.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this,_dereq_("qC859L"))
},{"fs":2,"path":3,"qC859L":4}],2:[function(_dereq_,module,exports){

},{}],3:[function(_dereq_,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,_dereq_("qC859L"))
},{"qC859L":4}],4:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],5:[function(_dereq_,module,exports){
var ParserError = _dereq_('./errors/ParserError').ParserError;

/**
 * Remove character from string at given position
 * @param {string} text 
 * @param {number} position of character
 * @returns {string} text without a removed character
 */
function removeCharacterAt(text, position) {
    return text.substring(0, position) + text.substring(position + 1, text.length);
}

/**
 * Contains state and error logic of PreParser algorithm
 * @param {string} query
 */
function PreParserContext(query) {
    this.query = query;
    this.queryLength = query.length;
    this.position = -1;
    this.openParenthesisCount = 0;
    this.removeCloseParenthesisFrom = [];
    this.isQuotesOpen = false;
    this.lastOpenQuotesPosition = -1;
    this.openQuotesCharacter = '';
}

/**
 * Sets current position into lastOpenQuotesPosition
 */
PreParserContext.prototype.setLastOpenQuotesPosition = function () {
    this.lastOpenQuotesPosition = this.position;
}

/**
 * Increase parenthesis count.
 */
PreParserContext.prototype.increaseParenthesisCount = function () {
    this.openParenthesisCount++;
}
/**
 * Decrease parenthesis count. In case of count goes under zero then sets count to 0
 * and adds current position into removeCloseParenthesisFrom.
 */
PreParserContext.prototype.decreaseParenthesisCount = function () {
    this.openParenthesisCount--;
    if (this.openParenthesisCount < 0) {
        this.removeCloseParenthesisFrom.push(this.position);
        this.openParenthesisCount = 0;
    }
}

/**
 * Move position window in query text. 
 * @returns {boolean} True if position is valid.
 */
PreParserContext.prototype.next = function () {
    this.position++;
    return this.position < this.queryLength;
}

/**
 * Must be called after iteration.
 * @param {number} end state id
 */
PreParserContext.prototype.end = function (state) {
    switch (state) {
        case 0:
            //ok 
            break;
        case 1:
            this.isQuotesOpen = true;
            this.openQuotesCharacter = '"';
            break;
        case 2:
            this.isQuotesOpen = true;
            this.openQuotesCharacter = '"';
            break;
        case 3:
            this.isQuotesOpen = true;
            this.openQuotesCharacter = "'";
            break;
        case 4:
            this.isQuotesOpen = true;
            this.openQuotesCharacter = "'";
            break;
        default:
            throw new Error('Unknown state.')
    }
}

PreParserContext.prototype.getErrors = function () {
    var haltingError = null;
    var errors = [];
    if (this.isQuotesOpen) {
        haltingError = new ParserError("MissingCloseQuotes");
        haltingError.options = {
            openQuotesCharacter: this.openQuotesCharacter,
            offset: this.lastOpenQuotesPosition
        };
        return { recoverableErrors: [], haltingError: haltingError };
    }

    this.removeCloseParenthesisFrom.forEach(function (offset) {
        var error = new ParserError("ExtraClosedParenthesis");
        error.options = {
            offset: offset
        }
        errors.push(error);
    });

    if (this.openParenthesisCount > 0) {
        var error = new ParserError("MissingClosedParenthesis");
        error.options = {
            count: this.openParenthesisCount
        }
        errors.push(error);
    }

    return { recoverableErrors: errors, haltingError: haltingError };
}

/**
 * Fix query from recoverable errors
 * @returns {string} fixed query
 */
PreParserContext.prototype.getFixedQuery = function () {
    var fixedQuery = this.query;
    // var removeCloseParenthesisFrom = this.removeCloseParenthesisFrom;
    // for (var i = removeCloseParenthesisFrom.length - 1; i >= 0; i--) {
    //     fixedQuery = removeCharacterAt(fixedQuery, removeCloseParenthesisFrom[i]);
    // }
    return fixedQuery + Array(this.openParenthesisCount + 1).join('}');
}

/**
 * Returns char from query at current position.
 * @returns {string} currentChar
 */
PreParserContext.prototype.currentChar = function () {
    return this.query[this.position];
}

/**
 *  Base state of PreParser, counts number of parenthesis, in case of quotes redirects to states handling quotes. 
 * @param {PreParserContext} context 
 */
function BaseState(context) {
    switch (context.currentChar()) {
        case '{':
            context.increaseParenthesisCount();
            return 0;
        case '}':
            context.decreaseParenthesisCount();
            return 0;
        case '"':
            context.setLastOpenQuotesPosition();
            return 1;
        case "'":
            context.setLastOpenQuotesPosition();
            return 3;
        default:
            return 0;
    }
}

/**
 * PreParser state handling double quotes.
 * @param {PreParserContext} context 
 */
function DoubleQuoteState(context) {
    switch (context.currentChar()) {
        case '"':
            return 0;
        case "\\":
            return 2;
        default:
            return 1;
    }
}

/**
 * PreParser state handling backslash (escape character) in double quotes.
 */
function DoubleQuoteSlashState() {
    return 1;
}

/**
 * PreParser state handling single quotes.
 * @param {PreParserContext} context 
 */
function SingleQuoteState(context) {
    switch (context.currentChar()) {
        case "'":
            return 0;
        case "\\":
            return 4;
        default:
            return 3;
    }
}

/**
 * PreParser state handling backslash (escape character) in single quotes.
 */
function SingleQuoteSlashState() {
    return 3;
}

/**
 * Preparser handle errors with parenthesis count and open quotes.
 */
function PreParser() {
    this.states = {
        0: BaseState,
        1: DoubleQuoteState,
        2: DoubleQuoteSlashState,
        3: SingleQuoteState,
        4: SingleQuoteSlashState
    };
}

PreParser.prototype.run = function (query) {
    var context = new PreParserContext(query);
    var state = 0;
    while (context.next()) {
        var stateStepFunction = this.states[state];
        state = stateStepFunction(context);
    }
    context.end(state);

    var errors = context.getErrors();
    return {
        recoverableErrors: errors.recoverableErrors,
        haltingError: errors.haltingError,
        fixedQuery: context.getFixedQuery()
    }
}

module.exports.PreParser = PreParser
},{"./errors/ParserError":6}],6:[function(_dereq_,module,exports){
/**
 * Parser error model.
 * @param {string} type code  
 * @param {object} start token range 
 * @param {object} end token range 
 */
function ParserError(type) {
    this.type = type;
    this.message = "";
    this.options = {};
    this.range = {
        first_line: 0,
        first_column: 0,
        last_line: 0,
        last_column: 0
    };
}

module.exports.ParserError = ParserError;
},{}],7:[function(_dereq_,module,exports){
var ParserError = _dereq_('./ParserError').ParserError;
var getPositionFromOffset = _dereq_('../utils/positionOffsetConvert').getPositionFromOffset;

/**
 * Process all errors before they goes from parser. Can resolve error message
 * or range from option fields. 
 */
function ParserErrorPreprocessor() {
}

/**
 * Preprocess errors in parser result
 * @param {string} query
 * @param {Object} result
 */
ParserErrorPreprocessor.prototype.preprocessParserResult = function (query, result) {
    if (result.haltingError != null) {
        this.preprocessError(query, result.haltingError)
    }

    result.recoverableErrors.forEach(function (error) {
        return this.preprocessError(query, error);
    }, this);
}

/**
 * Preprocess one parser error
 * @param {string} query 
 * @param {ParserError} error 
 */
ParserErrorPreprocessor.prototype.preprocessError = function (query, error) {
    switch (error.type) {
        case "GraphNode":
            error.message = "Current object graph node contains error.";
            break;

        case "TriplesSameSubject":
            error.message = "Current triple contains error.";
            break;

        case "VerbObjectList":
            error.message = "Current verb object list contains error.";
            break;

        case "ClassicHaltingError":
            error.message = "Unexpected token '"
                + error.options.unexpectedToken
                + "' expected one of these "
                + error.options.expectedTokens.join(", ")
                + ".";
            break;

        case "MissingCloseQuotes":
            error.message = "MissingCloseQuotes";
            var startPosition = getPositionFromOffset(query, error.options.offset);
            var endPosition = getPositionFromOffset(query, query.length - 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;
            break;

        case "ExtraClosedParenthesis":
            error.message = "ExtraClosedParenthesis";
            var startPosition = getPositionFromOffset(query, error.options.offset - 1);
            var endPosition = getPositionFromOffset(query, error.options.offset + 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;

            break;

        case "MissingClosedParenthesis":
            error.message = "MissingClosedParenthesis";

            var startPosition = getPositionFromOffset(query, query.length - 3);
            var endPosition = getPositionFromOffset(query, query.length - 1);

            error.range.first_line = startPosition.line;
            error.range.first_column = startPosition.column;
            error.range.last_line = endPosition.line;
            error.range.last_column = endPosition.column;
            break;
        case "PrefixOrBase":
            error.message = "Expected base or prefix statement."
            break;
        case "Prefix":
            error.message = "Expected prefix in format ns:IRI."
            break;
        case "Base":
            error.message = "Expected base IRI."
            break;
        case "PrefixAfter":
        case "BaseAfter":
            error.message = "Unexpected text."
            break;

        default:
        // Anything
    }
}
module.exports.ParserErrorPreprocessor = ParserErrorPreprocessor;
},{"../utils/positionOffsetConvert":9,"./ParserError":6}],8:[function(_dereq_,module,exports){
var Parser = _dereq_('../generatedParser/parserModule').Parser;
var ParserErrorPreprocessor = _dereq_('../src/errors/ParserErrorsProcessor').ParserErrorPreprocessor;
var PreParser = _dereq_('./PreParser').PreParser;

function showTerminals(parser, input) {
  var lexer = Object.create(parser.lexer);
  lexer.setInput(input);
  var token = lexer.lex();
  var result = "";
  while (token != 1) {
    var terminal = parser.terminals_[token];
    result += " " + (terminal === undefined ? "undefined" : terminal.toString());
    token = lexer.lex();
  }
  return result;
}

function ERSParserError(message, hash) {
  var hashLoc = hash.loc;
  this.originalMessage = message;
  this.loc = {
    first_line: hashLoc.first_line,
    first_column: hashLoc.first_column,
    last_line: hashLoc.last_line,
    last_column: hashLoc.last_column
  };

  this.expected = hash.reallyExpected;
  this.problemToken = hash.token;
}

function ERSParser(prefixes, baseIRI) {
  var prefixesCopy = {};
  for (var prefix in prefixes || {}) {
    prefixesCopy[prefix] = prefixes[prefix];
  }
  var preParser = new PreParser();
  var parser = new Parser();
  var parserErrorPreprocessor = new ParserErrorPreprocessor();

  parser.tracedParserErrors = [];
  parser.trace = function (message, hash) {
    this.tracedParserErrors.push(new ERSParserError(message, hash));
  }

  parser.parse = function () {
    Parser.resetParserErrors();
    Parser.base = baseIRI || '';
    Parser.prefixes = Object.create(prefixesCopy);

    var query = arguments[0];
    var preParserResult = preParser.run(query);
    if (preParserResult.haltingError != null) {
      parserErrorPreprocessor.preprocessError(query, preParserResult.haltingError);
      return {
        query: null,
        recoverableErrors: [],
        haltingError: preParserResult.haltingError
      };
    }

    var preParserRecoverableErrors = preParserResult.recoverableErrors;

    if (preParserResult.recoverableErrors.length > 0) {
      query = preParserResult.fixedQuery;
    }

    var result;
    try {
      result = Parser.prototype.parse.call(parser, query);
      result.tracedParserErrors = parser.tracedParserErrors;
    }
    catch (e) {
      var lines = arguments[0].split(/\r?\n/gm);
      var lastError = parser.tracedParserErrors[parser.tracedParserErrors.length - 1];
      if (lastError === undefined) {
        throw e;
      }
      var lastErrorLoc = lastError.loc;
      result = {
        query: null,
        tracedParserErrors: parser.tracedParserErrors,
        recoverableErrors: [],
        haltingError: {
          type: "ClassicHaltingError",
          options: {
            originalMessage: lastError.originalMessage,
            expectedTokens: lastError.expected,
            unexpectedToken: lastError.problemToken
          },
          range: {
            first_line: lastErrorLoc.last_line,
            first_column: lastErrorLoc.last_column,
            last_line: lines.length,
            last_column: lines[lines.length - 1].length + 1,
          }
        }
      };
    }

    result.recoverableErrors = result.recoverableErrors.concat(preParserRecoverableErrors);
    parserErrorPreprocessor.preprocessParserResult(query, result);
    return result;
  };

  parser._resetBlanks = Parser._resetBlanks;

  parser.showTerminals = function (input) {
    return showTerminals(parser, input)
  }
  return parser;
}

module.exports = {}
module.exports.ERSParser = ERSParser;
},{"../generatedParser/parserModule":1,"../src/errors/ParserErrorsProcessor":7,"./PreParser":5}],9:[function(_dereq_,module,exports){
/**
 * Returns position (line, column) of offset index in text
 * @param {string} text 
 * @param {number} offset 
 * @returns {Object} position (line, column)
 */
function getPositionFromOffset(text, offset) {
    // TODO: Write tests fastly written

    if (offset < 0) {
        offset = 0;
    }
    var line = 1;
    var column = 1;
    for (var i = 0; i < text.length; i++) {
        var currentChar = text[i]
        if (currentChar == '\r') {
            // do not add column
        } else if (currentChar == '\n') {
            line++;
            column = 1;
        }
        else {
            column++;
        }

        if (i == offset) {
            return { line: line, column: column };
        }
    }
    return { line: line, column: column };
}
module.exports.getPositionFromOffset = getPositionFromOffset
},{}]},{},[8])
(8)
});